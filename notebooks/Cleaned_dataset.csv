,question,answer,category,difficulty_level,tags,example_query,explanation,common_mistakes,related_questions
0,"You are given two tables: 'sales' and 'products'. The 'sales' table contains the following columns: 'sale_id', 'product_id', 'quantity', and 'sale_date'. The 'products' table contains 'product_id' and 'product_name'. Write a SQL query to find the total quantity sold for each product, including products that haven't sold any units, and sort the results by total quantity sold in descending order. Display the product name and the total quantity sold","SELECT p.product_name, COALESCE(SUM(s.quantity), 0) AS total_quantity_sold FROM products p LEFT JOIN sales s ON p.product_id = s.product_id GROUP BY p.product_name ORDER BY total_quantity_sold DESC",Data Analyst,intermediate,"Data Analyst, Join, Aggregation, SQL Functions","SELECT p.product_name, COALESCE(SUM(s.quantity), 0) AS total_quantity_sold FROM products p LEFT JOIN sales s ON p.product_id = s.product_id GROUP BY p.product_name ORDER BY total_quantity_sold DESC",Not Available,"This query uses a LEFT JOIN to ensure all products are listed, even if no sales were made for some. The COALESCE function is used to return 0 for products with no sales. The results are grouped by product and sorted by total quantity sold, in descending order","Candidates might forget to use COALESCE, resulting in NULL being shown for products with no sales. They may also forget to use LEFT JOIN, leading to the exclusion of products without sales records"
1,"You are given two tables: 'Sales' and 'Products'. The 'Sales' table contains sales records with columns 'sale_id', 'product_id', 'quantity', and 'sale_date'. The 'Products' table contains product information with columns 'product_id', 'product_name', and 'category'. Write a SQL query to find the top 3 products by quantity sold in each category for the last quarter (assuming the current date is December 31, 2023)","WITH ranked_sales AS ( SELECT p.category, p.product_name, SUM(s.quantity) AS total_quantity, ROW_NUMBER() OVER (PARTITION BY p.category ORDER BY SUM(s.quantity) DESC) AS rank FROM Sales s JOIN Products p ON s.product_id = p.product_id WHERE s.sale_date >= '2023-10-01' AND s.sale_date <= '2023-12-31' GROUP BY p.category, p.product_name ) SELECT category, product_name, total_quantity FROM ranked_sales WHERE rank <= 3",SQL,unknown,Advanced,"Data Analyst, Join, Aggregate function, Window function","WITH ranked_sales AS ( SELECT p.category, p.product_name, SUM(s.quantity) AS total_quantity, ROW_NUMBER() OVER (PARTITION BY p.category ORDER BY SUM(s.quantity) DESC) AS rank FROM Sales s JOIN Products p ON s.product_id = p.product_id WHERE s.sale_date >= '2023-10-01' AND s.sale_date <= '2023-12-31' GROUP BY p.category, p.product_name ) SELECT category, product_name, total_quantity FROM ranked_sales WHERE rank <= 3",Not Available,"The query first creates a Common Table Expression (CTE) called 'ranked_sales' that ranks products within each category based on the total quantity sold. It uses a window function 'ROW_NUMBER()' to generate ranks. The main query retrieves products that have a rank of 3 or lower, effectively giving the top 3 products per category for the specified date range"
2,"Given two tables, 'employees' (emp_id, emp_name, manager_id) and 'departments' (dept_id, dept_name), write a SQL query to find the names of employees who do not manage anyone and also the names of the departments they belong to. Ensure to use appropriate joins and filtering","SELECT e.emp_name, d.dept_name FROM employees e LEFT JOIN employees m ON e.emp_id = m.manager_id LEFT JOIN departments d ON e.emp_id = d.dept_id WHERE m.manager_id IS NULL",SQL,unknown,Intermediate,"Data Analyst, Join, Aggregate function",Not Available,This query uses a LEFT JOIN to find employees who do not manage anyone by looking for null matches in the manager table. It then joins to the departments table to gather the department information without needing to filter by managed employees,"Candidates might overlook the need for filtering on the manager_id column or incorrectly reference the join conditions, leading to wrong results"
3,"Given a sales database with two tables: 'Sales' (containing columns such as SaleID, ProductID, Quantity, SaleDate) and 'Products' (containing ProductID, ProductName, Price), write a SQL query to find the total revenue generated for each product in the year 2022. Sort the results by total revenue in descending order and include only products that generated more than $500 in revenue","SELECT p.ProductID, p.ProductName, SUM(s.Quantity * p.Price) AS TotalRevenue FROM Sales s JOIN Products p ON s.ProductID = p.ProductID WHERE YEAR(s.SaleDate) = 2022 GROUP BY p.ProductID, p.ProductName HAVING TotalRevenue > 500 ORDER BY TotalRevenue DESC",SQL,unknown,Intermediate,"Data Analyst, Aggregate function, Join, Group By","SELECT p.ProductID, p.ProductName, SUM(s.Quantity * p.Price) AS TotalRevenue FROM Sales s JOIN Products p ON s.ProductID = p.ProductID WHERE YEAR(s.SaleDate) = 2022 GROUP BY p.ProductID, p.ProductName HAVING TotalRevenue > 500 ORDER BY TotalRevenue DESC",Not Available,"This query joins the Sales and Products tables on ProductID. It filters records to include only sales from 2022, calculates total revenue by multiplying Quantity and Price, groups the results by ProductID and ProductName, and filters to show only products with more than $500 in revenue, sorted by total revenue in descending order"
4,"You are tasked with analyzing sales data from two tables: 'sales' (containing transaction records with columns 'sale_id', 'product_id', 'amount', 'sale_date') and 'products' (containing product details with columns 'product_id', 'product_name', 'category'). Write an SQL query to find the total sales amount for each product category for the last quarter of 2023","SELECT p.category, SUM(s.amount) AS total_sales FROM sales s JOIN products p ON s.product_id = p.product_id WHERE s.sale_date >= '2023-10-01' AND s.sale_date < '2024-01-01' GROUP BY p.category",SQL,unknown,Intermediate,"[""Data Analyst"", ""Business Intelligence"", ""Join"", ""Aggregate Function""]",Not Available,"This query joins the sales and products tables, filters sales for the last quarter of 2023, and calculates the total sales amount per product category by grouping the results accordingly",Candidates might mistakenly forget to filter the sale_date correctly or overlook the need to join the two tables
5,"You are given two tables: 'employees' and 'departments'. The 'employees' table includes columns 'id', 'name', 'department_id', and 'salary'. The 'departments' table includes 'id' and 'department_name'. Write an SQL query to calculate the average salary of employees in each department, and list the department name alongside the average salary, sorting the results by average salary in descending order","SELECT d.department_name, AVG(e.salary) AS average_salary FROM employees e JOIN departments d ON e.department_id = d.id GROUP BY d.department_name ORDER BY average_salary DESC",SQL,unknown,Intermediate,"Data Analyst, Aggregate function, Join","SELECT d.department_name, AVG(e.salary) AS average_salary FROM employees e JOIN departments d ON e.department_id = d.id GROUP BY d.department_name ORDER BY average_salary DESC",Not Available,"This SQL query uses a JOIN to combine the 'employees' and 'departments' tables on the 'department_id' and 'id' fields, respectively. It then calculates the average salary per department by using the AVG() aggregate function and groups the results by department name before sorting them in descending order based on the average salary"
6,"Given two tables, `employees` and `departments`, write an SQL query to find the average salary of employees in each department, but only for departments where the average salary is greater than $50,000. The `employees` table contains columns `id` (employee ID), `name`, `salary`, and `department_id`, and the `departments` table contains `id` (department ID) and `department_name`. Sort the results by department name in ascending order","WITH AvgSalaries AS (SELECT d.department_name, AVG(e.salary) AS average_salary FROM employees e JOIN departments d ON e.department_id = d.id GROUP BY d.department_name HAVING AVG(e.salary) > 50000) SELECT department_name, average_salary FROM AvgSalaries ORDER BY department_name ASC","Basic data is aggregated from the employees table and joined to the departments table, filtering for averages above $50,000, then sorted",intermediate,"[Data Analyst, SQL, Aggregate Function, Join]","SELECT d.department_name, AVG(e.salary) AS average_salary FROM employees e JOIN departments d ON e.department_id = d.id GROUP BY d.department_name HAVING AVG(e.salary) > 50000 ORDER BY d.department_name","This query utilizes a Common Table Expression (CTE) to first calculate the average salaries filtered by those earning above $50,000 and sorts the final output by department name",Candidates might forget to include the HAVING clause or mistakenly apply the filter in the WHERE clause instead,How would you modify this query to also include the total number of employees per department?
7,"You are given two tables: `employees` and `departments`. The `employees` table has columns: `id`, `name`, `salary`, `department_id`, and the `departments` table has columns: `id`, `department_name`. Write a SQL query to find the department with the highest average salary and the average salary in that department. If there are ties, return all departments sharing that highest average salary. The result should include the department name and the average salary","WITH DepartmentAvg AS ( SELECT d.department_name, AVG(e.salary) AS avg_salary FROM departments d JOIN employees e ON d.id = e.department_id GROUP BY d.department_name ) SELECT department_name, avg_salary FROM DepartmentAvg WHERE avg_salary = (SELECT MAX(avg_salary) FROM DepartmentAvg)",SQL,unknown,Advanced,"[""Join"", ""Aggregate Function"", ""CTE"", ""Data Analyst""]",Not Available,"This SQL query uses a Common Table Expression (CTE) to first calculate the average salaries for each department, and then it selects the department(s) with the highest average salary by comparing against the maximum average salary found","Candidates might overlook the need for a CTE, leading them to write more complex and error-prone queries. Additionally, they might confuse the average calculation and filtering conditions"
8,"You are working for an e-commerce company and need to analyze the sales data to determine the best-selling products over the last quarter. Write a SQL query that returns the product ID, product name, total quantity sold, and total revenue generated for the top 5 products based on total revenue. Assume you have two tables: 'sales' (with columns 'id', 'product_id', 'quantity', 'sale_date', 'price') and 'products' (with columns 'id', 'name')","WITH ProductSales AS (SELECT p.id AS product_id, p.name AS product_name, SUM(s.quantity) AS total_quantity, SUM(s.quantity * s.price) AS total_revenue FROM sales s JOIN products p ON s.product_id = p.id WHERE s.sale_date >= DATEADD(quarter, -1, GETDATE()) GROUP BY p.id, p.name) SELECT * FROM ProductSales ORDER BY total_revenue DESC LIMIT 5",SQL,advanced,"Data Analyst, Aggregate function, JOIN","WITH ProductSales AS (SELECT p.id AS product_id, p.name AS product_name, SUM(s.quantity) AS total_quantity, SUM(s.quantity * s.price) AS total_revenue FROM sales s JOIN products p ON s.product_id = p.id WHERE s.sale_date >= DATEADD(quarter, -1, GETDATE()) GROUP BY p.id, p.name) SELECT * FROM ProductSales ORDER BY total_revenue DESC LIMIT 5","This SQL query uses a Common Table Expression (CTE) to first calculate the total quantity sold and total revenue for each product over the last quarter. Then, it selects the top 5 products based on total revenue using an ORDER BY clause","Candidates might forget to join the tables correctly or might not filter the sales data by quarter, potentially leading to incorrect results",What modifications would you make to include only products that have sold more than 50 units? What if you wanted to analyze the data over the last year instead of the last quarter?
9,"Given a table `Sales` that records sales transactions with columns `TransactionID`, `ProductID`, `CustomerID`, and `SaleDate`, and another table `Products` that includes `ProductID`, `ProductName`, and `Category`. Write an SQL query to determine the top 3 products by total sales amount for each category for the year 2022","WITH SalesByProduct AS ( SELECT p.Category, p.ProductName, SUM(s.Amount) AS TotalSales FROM Products p JOIN Sales s ON p.ProductID = s.ProductID WHERE s.SaleDate BETWEEN '2022-01-01' AND '2022-12-31' GROUP BY p.Category, p.ProductName ) SELECT Category, ProductName, TotalSales FROM ( SELECT Category, ProductName, TotalSales, ROW_NUMBER() OVER (PARTITION BY Category ORDER BY TotalSales DESC) AS rn FROM SalesByProduct ) AS RankedProducts WHERE rn <= 3 ORDER BY Category, TotalSales DESC",SQL,unknown,Advanced,"SQL, Aggregate function, Window function, CTE","WITH SalesByProduct AS ( SELECT p.Category, p.ProductName, SUM(s.Amount) AS TotalSales FROM Products p JOIN Sales s ON p.ProductID = s.ProductID WHERE s.SaleDate BETWEEN '2022-01-01' AND '2022-12-31' GROUP BY p.Category, p.ProductName ) SELECT Category, ProductName, TotalSales FROM ( SELECT Category, ProductName, TotalSales, ROW_NUMBER() OVER (PARTITION BY Category ORDER BY TotalSales DESC) AS rn FROM SalesByProduct ) AS RankedProducts WHERE rn <= 3 ORDER BY Category, TotalSales DESC",Not Available,"This query first calculates total sales for each product in each category in the year 2022 using a common table expression (CTE). Then, it uses the `ROW_NUMBER()` window function to rank products by total sales within each category, finally filtering to retain only the top 3 products for each category"
10,"You are working with an e-commerce database containing two tables: `orders` with columns `order_id`, `customer_id`, `order_date`, and `total_amount`","and `customers` with columns `customer_id`, `customer_name`, and `signup_date`. Write a query to find the top 5 customers who have spent the most in total on their orders, along with their names, total amounts spent, and the number of orders placed. Sort the results by total amounts spent in descending order","SELECT c.customer_name, SUM(o.total_amount) AS total_spent, COUNT(o.order_id) AS number_of_orders FROM customers c JOIN orders o ON c.customer_id = o.customer_id GROUP BY c.customer_name ORDER BY total_spent DESC LIMIT 5",unknown,SQL,Not Available,"Data Analyst, Join, Aggregate Function","SELECT c.customer_name, SUM(o.total_amount) AS total_spent, COUNT(o.order_id) AS number_of_orders FROM customers c JOIN orders o ON c.customer_id = o.customer_id GROUP BY c.customer_name ORDER BY total_spent DESC LIMIT 5",Not Available
11,"You have two tables: `customers` (customer_id, customer_name, region) and `orders` (order_id, customer_id, order_date, amount). Write a SQL query to find the total order amount for each customer in the 'West' region, and rank them by total order amount in descending order","WITH CustomerOrders AS (SELECT c.customer_id, c.customer_name, SUM(o.amount) AS total_amount FROM customers c JOIN orders o ON c.customer_id = o.customer_id WHERE c.region = 'West' GROUP BY c.customer_id, c.customer_name) SELECT customer_id, customer_name, total_amount, RANK() OVER (ORDER BY total_amount DESC) AS rank FROM CustomerOrders",SQL,intermediate,"['Join', 'Aggregate function', 'Window function']","SELECT customer_id, customer_name, total_amount, RANK() OVER (ORDER BY total_amount DESC) AS rank FROM (SELECT c.customer_id, c.customer_name, SUM(o.amount) AS total_amount FROM customers c JOIN orders o ON c.customer_id = o.customer_id WHERE c.region = 'West' GROUP BY c.customer_id, c.customer_name) AS CustomerOrders",Not Available,This query uses a Common Table Expression (CTE) to aggregate total order amounts per customer in the 'West' region and then applies the RANK() window function to assign a rank based on the total amounts in descending order,"Candidates may forget to use the GROUP BY clause correctly, leading to incorrect aggregation, or they may misuse the JOIN condition"
12,"You have two tables, 'orders' and 'customers'. The 'orders' table contains columns: 'order_id', 'customer_id', 'order_date', and 'total_amount'. The 'customers' table contains 'customer_id', 'customer_name', and 'signup_date'. Write a SQL query to find the total spending of each customer who joined after January 1, 2020, and place them in descending order of their total spending. Include only customers with total spending greater than $500","SELECT c.customer_name, SUM(o.total_amount) AS total_spending FROM customers c JOIN orders o ON c.customer_id = o.customer_id WHERE c.signup_date > '2020-01-01' GROUP BY c.customer_name HAVING SUM(o.total_amount) > 500 ORDER BY total_spending DESC",SQL,unknown,Intermediate,"['Data Analyst', 'Data Engineer', 'Join', 'Aggregate function']","SELECT c.customer_name, SUM(o.total_amount) AS total_spending FROM customers c JOIN orders o ON c.customer_id = o.customer_id WHERE c.signup_date > '2020-01-01' GROUP BY c.customer_name HAVING SUM(o.total_amount) > 500 ORDER BY total_spending DESC",Not Available,"This query joins the 'customers' and 'orders' tables on 'customer_id', filters customers who signed up after 2020-01-01, groups the results by customer name, aggregates their total spending, and then filters the results to include only those with spending greater than $500, ordering the results by total spending in descending order"
13,"You have a table called `sales` that contains the following fields: `sales_date`, `product_id`, `amount`, and `customer_id`. You also have a table called `products` with `product_id`, `product_name`, and `category_id`. Write a SQL query to find the total sales amount for each product name from the `products` table where the total sales amount is greater than $10,000, grouped by product name. Include the number of sales transactions for each product as well","SELECT p.product_name, SUM(s.amount) AS total_sales, COUNT(s.transaction_id) AS transaction_count FROM products p JOIN sales s ON p.product_id = s.product_id GROUP BY p.product_name HAVING SUM(s.amount) > 10000",SQL,unknown,Intermediate,"[""Join"",""Aggregate function"",""Group By"",""Having""]",Not Available,"This query joins the `products` table with the `sales` table using the `product_id`, sums the `amount`, and counts the number of transactions for each product. It then filters results to include only those products that have total sales greater than $10,000","Common mistakes include forgetting to group by the product name, neglecting to include the count of transactions, and using WHERE instead of HAVING for aggregate filtering"
14,"Given a sales database with two tables: `sales` (columns: `sale_id`, `product_id`, `amount`, `sale_date`) and `products` (columns: `product_id`, `product_name`, `category`), write a query to find the total sales amount for each category in the month of January 2023. Additionally, include the category name and order the results by total sales in descending order","SELECT p.category, SUM(s.amount) AS total_sales FROM sales s JOIN products p ON s.product_id = p.product_id WHERE s.sale_date BETWEEN '2023-01-01' AND '2023-01-31' GROUP BY p.category ORDER BY total_sales DESC",SQL,unknown,Intermediate,"[""Join"",""Aggregate function"",""Data Analysis""]",Not Available,"This query joins the `sales` and `products` tables on `product_id`, filters the results for the sales in January 2023, groups the data by category, sums the sales amounts, and orders the results by total sales","Candidates might forget to filter the date correctly, leading to incorrect results or might fail to include all necessary columns in the GROUP BY clause"
15,"You are given two tables: `employees` (with columns `employee_id`, `manager_id`, and `salary`) and `departments` (with columns `department_id`, `department_name`). Write a SQL query to find the department names with the highest average employee salary, displaying the department name and the average salary","WITH avg_salaries AS ( SELECT d.department_name, AVG(e.salary) AS average_salary FROM employees e JOIN departments d ON e.department_id = d.department_id GROUP BY d.department_name ) SELECT department_name, average_salary FROM avg_salaries WHERE average_salary = (SELECT MAX(average_salary) FROM avg_salaries)",SQL,unknown,Intermediate,"Data Analyst, Aggregation, Join, CTE","WITH avg_salaries AS ( SELECT d.department_name, AVG(e.salary) AS average_salary FROM employees e JOIN departments d ON e.department_id = d.department_id GROUP BY d.department_name ) SELECT department_name, average_salary FROM avg_salaries WHERE average_salary = (SELECT MAX(average_salary) FROM avg_salaries)",Not Available,"This SQL uses a Common Table Expression (CTE) to first calculate the average salary per department, and then it selects the department(s) with the maximum average salary from that CTE"
16,"You are given two tables: `employees` with columns `employee_id`, `name`, and `manager_id`, and `sales` with columns `sale_id`, `employee_id`, `amount`, and `sale_date`. Write a SQL query to find the total sales amount made by each manager where a manager is defined as someone who has at least one direct report (i.e., someone who is an employee's manager). Your output should include `manager_id`, `total_sales`, and `number_of_reports`. Order the results by `total_sales` in descending order","WITH ManagerSales AS (SELECT e.manager_id, SUM(s.amount) AS total_sales, COUNT(e.employee_id) AS number_of_reports FROM employees e JOIN sales s ON e.employee_id = s.employee_id WHERE e.manager_id IS NOT NULL GROUP BY e.manager_id) SELECT manager_id, total_sales, number_of_reports FROM ManagerSales WHERE number_of_reports > 0 ORDER BY total_sales DESC",SQL,unknown,Advanced,"Data Analyst, Data Engineer, Aggregate Function, Join, CTE","SELECT e.manager_id, SUM(s.amount) AS total_sales, COUNT(e.employee_id) AS number_of_reports FROM employees e JOIN sales s ON e.employee_id = s.employee_id WHERE e.manager_id IS NOT NULL GROUP BY e.manager_id",Not Available,The query uses a Common Table Expression (CTE) to first aggregate sales amounts and count direct reports for each manager and then filters out any managers without reports
17,"You have two tables: 'employees' (containing 'employee_id', 'name', and 'department_id') and 'departments' (containing 'department_id' and 'department_name'). Write a SQL query to retrieve the names of employees along with their department names, sorted alphabetically by employee name. Additionally, if an employee does not belong to any department, show their name with 'No Department' as the department name","SELECT e.name, COALESCE(d.department_name, 'No Department') AS department_name FROM employees e LEFT JOIN departments d ON e.department_id = d.department_id ORDER BY e.name",SQL,unknown,Intermediate,"[""SQL"", ""Join"", ""Left Join"", ""Aggregation""]",Not Available,"This query uses a LEFT JOIN to combine data from 'employees' and 'departments'. The COALESCE function ensures that if there is no matching department, 'No Department' is displayed. The results are then ordered by employee names","Candidates may forget to use LEFT JOIN, resulting in missing employees without departments. They might also overlook the use of COALESCE, which could lead to NULL values being displayed"
18,"Given two tables, 'orders' (with columns 'order_id', 'customer_id', 'order_date', 'total_amount') and 'customers' (with columns 'customer_id', 'customer_name', 'signup_date'), write a SQL query to find the total amount spent by each customer who signed up after January 1, 2022, and sort the results by total amount spent in descending order","WITH customer_spend AS (SELECT c.customer_id, c.customer_name, SUM(o.total_amount) AS total_spent FROM customers c JOIN orders o ON c.customer_id = o.customer_id WHERE c.signup_date > '2022-01-01' GROUP BY c.customer_id, c.customer_name) SELECT customer_id, customer_name, total_spent FROM customer_spend ORDER BY total_spent DESC",SQL,unknown,Intermediate,"Data Analyst, CTE, Aggregate function, Join","SELECT c.customer_id, c.customer_name, SUM(o.total_amount) AS total_spent FROM customers c JOIN orders o ON c.customer_id = o.customer_id WHERE c.signup_date > '2022-01-01' GROUP BY c.customer_id, c.customer_name ORDER BY total_spent DESC",Not Available,"This SQL query uses a Common Table Expression (CTE) to first calculate the total amount spent per customer who signed up after a specific date and then retrieves the customer details along with their total spend, sorting them in descending order"
19,"Given a sales database with tables `orders` (order_id, customer_id, order_date, total_amount) and `customers` (customer_id, customer_name, join_date), write a query to find the total amount spent by each customer who joined before 2022, along with the number of orders placed by those customers","SELECT c.customer_id, c.customer_name, COUNT(o.order_id) AS order_count, SUM(o.total_amount) AS total_spent FROM customers c LEFT JOIN orders o ON c.customer_id = o.customer_id WHERE c.join_date < '2022-01-01' GROUP BY c.customer_id, c.customer_name",SQL,unknown,Intermediate,"[""Data Analyst"", ""Business Intelligence"", ""Aggregate function"", ""Join""]",Not Available,"This SQL query retrieves the total amount spent and order counts for customers who joined before 2022, using a LEFT JOIN to include customers with no orders and GROUP BY for aggregation","Candidates may forget to use a GROUP BY clause, leading to incorrect results. They might also use INNER JOIN instead of LEFT JOIN, missing customers without orders"
20,"You have two tables: 'employees' (columns: employee_id, name, department_id, salary) and 'departments' (columns: department_id, department_name). Write an SQL query to find the average salary of employees in each department, only including departments that have more than 2 employees","SELECT d.department_name, AVG(e.salary) AS average_salary FROM employees e JOIN departments d ON e.department_id = d.department_id GROUP BY d.department_name HAVING COUNT(e.employee_id) > 2",SQL,unknown,Intermediate,"Data Analyst, Join, Aggregate function","SELECT d.department_name, AVG(e.salary) AS average_salary FROM employees e JOIN departments d ON e.department_id = d.department_id GROUP BY d.department_name HAVING COUNT(e.employee_id) > 2",Not Available,"This query joins the 'employees' and 'departments' tables, groups the results by department name, calculates the average salary for each department, and filters to include only those departments with more than 2 employees"
21,"You are given two tables: `orders` and `customers`. The `orders` table contains columns `order_id`, `customer_id`, `order_date`, and `amount`. The `customers` table contains `customer_id`, `customer_name`, and `signup_date`. Write a query that returns the customer names along with the total amount spent by each customer and the date of their first order. Only include customers who have placed more than 5 orders","SELECT c.customer_name, SUM(o.amount) AS total_spent, MIN(o.order_date) AS first_order_date FROM customers c JOIN orders o ON c.customer_id = o.customer_id GROUP BY c.customer_name HAVING COUNT(o.order_id) > 5",SQL,unknown,Intermediate,"[""JOIN"", ""Aggregate function"", ""Group By"", ""HAVING""]",Not Available,"This query joins the `customers` and `orders` tables, groups the results by `customer_name`, and calculates the total amount spent and the date of the first order for each customer. It then filters to include only those customers who have placed more than 5 orders using the HAVING clause","Common mistakes include forgetting to include `COUNT()` in the HAVING clause to filter based on the number of orders, or using the wrong JOIN type"
22,"You have two tables: 'employees' with columns (id, name, department_id) and 'departments' with columns (id, dept_name). Write a SQL query to find the number of employees in each department, including departments with no employees, returning 'dept_name' and 'employee_count'","SELECT d.dept_name, COUNT(e.id) AS employee_count FROM departments d LEFT JOIN employees e ON d.id = e.department_id GROUP BY d.dept_name ORDER BY d.dept_name",SQL,unknown,Intermediate,"['Join', 'Aggregate Function']","SELECT d.dept_name, COUNT(e.id) AS employee_count FROM departments d LEFT JOIN employees e ON d.id = e.department_id GROUP BY d.dept_name ORDER BY d.dept_name",Not Available,This query uses a LEFT JOIN to include all departments even if they have no employees and counts employees grouped by department
23,"Given two tables, 'employees' and 'departments', write a SQL query to find the average salary of employees in each department, but exclude employees whose salaries are above the average salary of their respective department","WITH DepartmentAvg AS (SELECT d.id AS department_id, AVG(e.salary) AS avg_salary FROM employees e JOIN departments d ON e.department_id = d.id GROUP BY d.id) SELECT d.name, AVG(e.salary) AS avg_dept_salary FROM employees e JOIN departments d ON e.department_id = d.id JOIN DepartmentAvg da ON da.department_id = d.id WHERE e.salary < da.avg_salary GROUP BY d.name",SQL,unknown,Advanced,"[""Data Analyst"", ""Data Engineer"", ""Business Analyst"", ""Aggregate function"", ""Join"", ""CTE""]",Not Available,"This query first calculates the average salary for each department using a Common Table Expression (CTE). Then, it joins this CTE with the employees and departments tables to filter out salaries that are above the department's average, and finally computes the average salary of eligible employees per department",Candidates might forget to include the correct joins between the CTE and the main query or fail to apply the WHERE clause correctly to filter the salaries
24,"Consider a database with two tables: `employees` (with columns `employee_id`, `name`, and `department_id`) and `departments` (with columns `department_id` and `department_name`). Write a SQL query to find the total number of employees in each department and the percentage of employees in that department relative to the total employee count in the company","SELECT d.department_name, COUNT(e.employee_id) AS total_employees, COUNT(e.employee_id) * 100.0 / (SELECT COUNT(*) FROM employees) AS percentage FROM departments d LEFT JOIN employees e ON d.department_id = e.department_id GROUP BY d.department_name",SQL,unknown,Intermediate,"Data Analyst, Aggregate Function, Join","SELECT d.department_name, COUNT(e.employee_id) AS total_employees, COUNT(e.employee_id) * 100.0 / (SELECT COUNT(*) FROM employees) AS percentage FROM departments d LEFT JOIN employees e ON d.department_id = e.department_id GROUP BY d.department_name",Not Available,"This query performs a `LEFT JOIN` between the `departments` and `employees` tables to count the total number of employees in each department, while also calculating the percentage of employees relative to the overall employee count using a subquery"
25,"Given a sales database with tables 'Sales' (columns: SaleID, ProductID, SaleAmount, SaleDate) and 'Products' (columns: ProductID, ProductName, Category), write a SQL query to find the total sales amount per category for the year 2023, ordered by total sales in descending order","SELECT p.Category, SUM(s.SaleAmount) AS TotalSales FROM Sales s JOIN Products p ON s.ProductID = p.ProductID WHERE YEAR(s.SaleDate) = 2023 GROUP BY p.Category ORDER BY TotalSales DESC",SQL,intermediate,"Data Analyst, Aggregate function, Join","SELECT p.Category, SUM(s.SaleAmount) AS TotalSales FROM Sales s JOIN Products p ON s.ProductID = p.ProductID WHERE YEAR(s.SaleDate) = 2023 GROUP BY p.Category ORDER BY TotalSales DESC",Not Available,"This SQL query joins the Sales and Products tables on ProductID, filters for the year 2023, groups the results by category, and calculates the total sales per category, ordering the results in descending order by total sales amount","Common mistakes include forgetting to join the tables correctly, not using the correct function or syntax for filtering by year, or neglecting to specify the ordering for the results"
26,"You are given two tables: `employees` (with columns `id`, `name`, `salary`, `department_id`) and `departments` (with columns `id`, `department_name`). Write a SQL query to find the top 3 highest paid employees in each department","WITH ranked_employees AS (SELECT e.id, e.name, e.salary, d.department_name, ROW_NUMBER() OVER (PARTITION BY e.department_id ORDER BY e.salary DESC) AS rank FROM employees e JOIN departments d ON e.department_id = d.id) SELECT id, name, salary, department_name FROM ranked_employees WHERE rank <= 3",SQL,unknown,Advanced,"[""Data Analyst"", ""Business Analyst"", ""Data Engineer"", ""Window Function"", ""Join""]","WITH ranked_employees AS (SELECT e.id, e.name, e.salary, d.department_name, ROW_NUMBER() OVER (PARTITION BY e.department_id ORDER BY e.salary DESC) AS rank FROM employees e JOIN departments d ON e.department_id = d.id) SELECT id, name, salary, department_name FROM ranked_employees WHERE rank <= 3",Not Available,This SQL query uses a Common Table Expression (CTE) to first rank employees within their respective departments based on their salaries using the ROW_NUMBER window function. It then filters for the top 3 highest salaries per department
27,"You are working with two tables: `orders` and `customers`. The `orders` table has columns (`order_id`, `customer_id`, `order_date`, `amount`) and the `customers` table has columns (`customer_id`, `customer_name`, `signup_date`). Write a SQL query to find the top 5 customers who have the highest total order amounts and their signup date, ordered by the total order amount in descending order","WITH CustomerTotals AS (SELECT c.customer_id, c.customer_name, c.signup_date, SUM(o.amount) AS total_amount FROM customers c JOIN orders o ON c.customer_id = o.customer_id GROUP BY c.customer_id, c.customer_name, c.signup_date) SELECT customer_id, customer_name, signup_date, total_amount FROM CustomerTotals ORDER BY total_amount DESC LIMIT 5",SQL,unknown,Intermediate,"Data Analyst, Aggregate function, Join","SELECT c.customer_id, c.customer_name, c.signup_date, SUM(o.amount) AS total_amount FROM customers c JOIN orders o ON c.customer_id = o.customer_id GROUP BY c.customer_id, c.customer_name, c.signup_date ORDER BY total_amount DESC LIMIT 5",Not Available,"This query uses a Common Table Expression (CTE) to calculate the total order amount for each customer and then selects the top 5 customers based on the total amount, along with their signup dates"
28,"You are given two tables: `employees` (with columns `employee_id`, `name`, `salary`, `department_id`) and `departments` (with columns `department_id`, `department_name`). Write a SQL query to find the department name and the average salary of the employees in each department, but only include departments that have an average salary greater than $60,000","SELECT d.department_name, AVG(e.salary) AS average_salary FROM employees e JOIN departments d ON e.department_id = d.department_id GROUP BY d.department_name HAVING AVG(e.salary) > 60000",SQL,unknown,Intermediate,"[""Join"", ""Aggregate function"", ""Group By""]",Not Available,"This query joins the `employees` and `departments` tables to calculate the average salary for each department. It groups the results by department name and filters to only show departments where the average salary exceeds $60,000","Candidates may forget to include the HAVING clause or may use WHERE instead, which causes an error in filtering aggregated results"
29,"Given a database with two tables, `sales` (containing columns `id`, `product_id`, `amount`, and `sale_date`) and `products` (containing columns `id` and `category`), write a SQL query to calculate the total sales amount for each product category for the last 30 days. Sort the result in descending order of the total sales amount","SELECT p.category, SUM(s.amount) AS total_sales FROM sales s JOIN products p ON s.product_id = p.id WHERE s.sale_date >= CURRENT_DATE - INTERVAL '30 days' GROUP BY p.category ORDER BY total_sales DESC",SQL,unknown,Intermediate,"['Data Analyst', 'Join', 'Aggregate Function']","SELECT p.category, SUM(s.amount) AS total_sales FROM sales s JOIN products p ON s.product_id = p.id WHERE s.sale_date >= CURRENT_DATE - INTERVAL '30 days' GROUP BY p.category ORDER BY total_sales DESC",Not Available,"The SQL query joins the `sales` and `products` tables on the `product_id`, filters sales from the last 30 days, groups the results by product category, and sums the total sales amount for each category, ordering the output by `total_sales` in descending order"
30,"Given a sales database with two tables: 'orders' (order_id, customer_id, order_date, total_amount) and 'customers' (customer_id, customer_name, sign_up_date), write a SQL query to find the top 5 customers who have spent the most in total, along with their total amount spent and the number of orders they placed. Additionally, include a calculated field for the average amount spent per order. Ensure to order the results by total_amount in descending order","SELECT c.customer_id, c.customer_name, COUNT(o.order_id) AS num_orders, SUM(o.total_amount) AS total_spent, AVG(o.total_amount) AS avg_spent_per_order 
FROM customers c 
JOIN orders o ON c.customer_id = o.customer_id 
GROUP BY c.customer_id, c.customer_name 
ORDER BY total_spent DESC 
LIMIT 5",SQL,unknown,Intermediate,"[""Data Analyst"", ""Data Engineer"", ""Business Analyst"", ""Aggregate function"", ""Join""]","SELECT c.customer_id, c.customer_name, COUNT(o.order_id) AS num_orders, SUM(o.total_amount) AS total_spent, AVG(o.total_amount) AS avg_spent_per_order FROM customers c JOIN orders o ON c.customer_id = o.customer_id GROUP BY c.customer_id, c.customer_name ORDER BY total_spent DESC LIMIT 5",Not Available,"This query joins the 'customers' and 'orders' tables on the customer_id field, aggregates the total amount spent, counts the number of orders, and calculates the average amount per order for each customer, then returns the top 5 customers by total spent"
31,"You are working for an e-commerce company and need to analyze sales performance. You have two tables: 'Orders' (OrderID, CustomerID, OrderDate, TotalAmount) and 'Customers' (CustomerID, CustomerName, Country). Write a SQL query to find the total sales amount for each country along with the number of unique customers who made purchases, sorted by total sales amount in descending order","SELECT c.Country, SUM(o.TotalAmount) AS TotalSales, COUNT(DISTINCT o.CustomerID) AS UniqueCustomers FROM Orders o JOIN Customers c ON o.CustomerID = c.CustomerID GROUP BY c.Country ORDER BY TotalSales DESC",SQL,unknown,Intermediate,"Data Analyst, Join, Aggregate function","SELECT c.Country, SUM(o.TotalAmount) AS TotalSales, COUNT(DISTINCT o.CustomerID) AS UniqueCustomers FROM Orders o JOIN Customers c ON o.CustomerID = c.CustomerID GROUP BY c.Country ORDER BY TotalSales DESC",Not Available,"This query joins the 'Orders' and 'Customers' tables on the CustomerID, aggregates the total sales and counts unique customers by country, and sorts the results in descending order based on total sales"
32,"You are given two tables: `employees` (columns: `id`, `name`, `department_id`, `salary`) and `departments` (columns: `id`, `department_name`). Write a SQL query to find the average salary for each department and list the departments with an average salary above $70,000 along with their average salary. Order the results by average salary in descending order","SELECT d.department_name, AVG(e.salary) AS average_salary FROM employees e JOIN departments d ON e.department_id = d.id GROUP BY d.department_name HAVING AVG(e.salary) > 70000 ORDER BY average_salary DESC",SQL,unknown,Intermediate,"['Data Analyst', 'Data Engineer', 'Join', 'Aggregate function']","SELECT d.department_name, AVG(e.salary) AS average_salary FROM employees e JOIN departments d ON e.department_id = d.id GROUP BY d.department_name HAVING AVG(e.salary) > 70000 ORDER BY average_salary DESC",Not Available,"This query joins the `employees` and `departments` tables on the `department_id` and `id`. It calculates the average salary for each department, filters departments with an average salary greater than $70,000, and sorts the results by average salary in descending order"
33,"You are given two tables, `employees` and `departments`. The `employees` table contains columns `id`, `name`, `salary`, and `department_id`. The `departments` table contains columns `id` and `department_name`. Write a SQL query to find the average salary of employees in each department, along with the department name, excluding departments with an average salary below $50,000","SELECT d.department_name, AVG(e.salary) AS average_salary FROM employees e JOIN departments d ON e.department_id = d.id GROUP BY d.department_name HAVING AVG(e.salary) >= 50000",SQL,unknown,Intermediate,"Data Analyst, Join, Aggregate function","SELECT d.department_name, AVG(e.salary) AS average_salary FROM employees e JOIN departments d ON e.department_id = d.id GROUP BY d.department_name HAVING AVG(e.salary) >= 50000",Not Available,"This query uses a JOIN to combine data from the `employees` and `departments` tables, aggregates the salary to compute the average, groups by department name, and filters out departments below the salary threshold with HAVING"
34,"Given a database with two tables, 'employees' (columns: id, name, department_id, salary) and 'departments' (columns: id, department_name), write an SQL query to find the average salary of employees in each department along with the department name. Additionally, only include departments where the average salary is greater than $60,000","SELECT d.department_name, AVG(e.salary) AS average_salary FROM employees e JOIN departments d ON e.department_id = d.id GROUP BY d.department_name HAVING AVG(e.salary) > 60000",SQL,unknown,Intermediate,"Data Analyst, Join, Aggregate function","SELECT d.department_name, AVG(e.salary) AS average_salary FROM employees e JOIN departments d ON e.department_id = d.id GROUP BY d.department_name HAVING AVG(e.salary) > 60000",Not Available,"This query joins the 'employees' table with the 'departments' table, calculates the average salary for each department, and filters the results to only show departments with an average salary greater than $60,000"
35,"You are given two tables: 'employees' and 'departments'. The 'employees' table has the following columns: employee_id, name, department_id, salary. The 'departments' table has department_id and department_name. Write a SQL query to find the average salary of employees for each department, along with the department name. The result should be ordered by average salary in descending order","SELECT d.department_name, AVG(e.salary) AS average_salary FROM employees e JOIN departments d ON e.department_id = d.department_id GROUP BY d.department_name ORDER BY average_salary DESC",SQL,unknown,Intermediate,"['Join', 'Aggregate function', 'Data Analysis']","SELECT d.department_name, AVG(e.salary) AS average_salary FROM employees e JOIN departments d ON e.department_id = d.department_id GROUP BY d.department_name ORDER BY average_salary DESC",Not Available,"This SQL query joins the 'employees' and 'departments' tables on the department_id, groups the result by department name, and calculates the average salary for each department. The results are then ordered by average salary in descending order, highlighting the departments with the highest average salaries first"
36,"You are working with a sales database that has two tables: `orders` and `customers`. The `orders` table includes columns for `order_id`, `customer_id`, `order_date`, and `total_amount`. The `customers` table includes `customer_id`, `customer_name`, and `signup_date`. Write a SQL query to find the top 5 customers with the highest total order amounts in the last year, along with their names and the total amounts. The result should be ordered by total amount in descending order","WITH last_year_orders AS ( SELECT o.customer_id, SUM(o.total_amount) AS total_spent FROM orders o WHERE o.order_date >= DATEADD(year, -1, GETDATE()) GROUP BY o.customer_id ) SELECT c.customer_name, l.total_spent FROM customers c JOIN last_year_orders l ON c.customer_id = l.customer_id ORDER BY l.total_spent DESC LIMIT 5",SQL,unknown,Intermediate,"[""Join"", ""Aggregate function"", ""CTE"", ""Data Analysis""]","WITH last_year_orders AS ( SELECT o.customer_id, SUM(o.total_amount) AS total_spent FROM orders o WHERE o.order_date >= DATEADD(year, -1, GETDATE()) GROUP BY o.customer_id ) SELECT c.customer_name, l.total_spent FROM customers c JOIN last_year_orders l ON c.customer_id = l.customer_id ORDER BY l.total_spent DESC LIMIT 5",Not Available,"This SQL query first creates a Common Table Expression (CTE) named `last_year_orders` to aggregate the total order amounts for each customer within the last year. Then, it joins this CTE with the `customers` table to retrieve the customer names and their corresponding total order amounts, finally limiting the results to the top 5 customers"
37,"Suppose you have two tables, 'orders' and 'customers'. The 'orders' table contains columns 'order_id', 'customer_id', 'order_date', and 'order_amount'. The 'customers' table contains 'customer_id', 'customer_name', and 'signup_date'. Write a SQL query to find the top 3 customers who spent the most on orders in the last year, along with their total spending and signup date","WITH total_spending AS (SELECT c.customer_id, c.customer_name, SUM(o.order_amount) AS total_amount, c.signup_date FROM customers c JOIN orders o ON c.customer_id = o.customer_id WHERE o.order_date >= DATEADD(YEAR, -1, GETDATE()) GROUP BY c.customer_id, c.customer_name, c.signup_date) SELECT TOP 3 customer_name, total_amount, signup_date FROM total_spending ORDER BY total_amount DESC",SQL,unknown,Advanced,"[""Data Analyst"", ""Business Analyst"", ""Aggregate function"", ""Join"", ""CTE""]",Not Available,This query uses a Common Table Expression (CTE) to first calculate the total spending of each customer in the last year by joining the 'customers' and 'orders' tables. The final selection retrieves only the top 3 customers based on the total amount spent,"A common mistake is failing to filter the orders properly for the last year, or using incorrect date functions that do not apply to the SQL dialect being used. Additionally, candidates may forget to group by all selected columns when using aggregates"
38,"Given two tables: 'orders' (with columns 'order_id', 'customer_id', 'order_date', 'amount') and 'customers' (with columns 'customer_id', 'customer_name', 'signup_date'), write a SQL query to find the top 5 customers by total amount spent, with their names and the total amount. Also, include the signup date of each customer in the result","WITH total_spent AS ( SELECT c.customer_name, SUM(o.amount) AS total_amount, c.signup_date FROM customers c JOIN orders o ON c.customer_id = o.customer_id GROUP BY c.customer_name, c.signup_date ORDER BY total_amount DESC LIMIT 5 ) SELECT customer_name, total_amount, signup_date FROM total_spent",SQL,intermediate,"Data Analyst, Join, Aggregate Function","WITH total_spent AS ( SELECT c.customer_name, SUM(o.amount) AS total_amount, c.signup_date FROM customers c JOIN orders o ON c.customer_id = o.customer_id GROUP BY c.customer_name, c.signup_date ORDER BY total_amount DESC LIMIT 5 ) SELECT customer_name, total_amount, signup_date FROM total_spent",Not Available,"This query uses a Common Table Expression (CTE) to calculate the total amount spent by each customer, ordering them by their total amount in descending order and limiting the results to the top 5. The final SELECT retrieves the customer name, total amount spent, and signup date from the CTE","Candidates may forget to include the signup date in the grouping or may not use a CTE, leading to a more complicated and less readable query"
39,"You are given two tables: `orders` and `customers`. The `orders` table contains the columns `order_id`, `customer_id`, `order_date`, and `amount`. The `customers` table contains `customer_id`, `customer_name`, and `signup_date`. Write a SQL query that retrieves the total amount spent by each customer, their name, and the number of orders they placed, but only for customers who signed up in the last year","SELECT c.customer_name, COUNT(o.order_id) AS order_count, SUM(o.amount) AS total_spent FROM customers c LEFT JOIN orders o ON c.customer_id = o.customer_id WHERE c.signup_date >= DATEADD(year, -1, GETDATE()) GROUP BY c.customer_name",SQL,unknown,Intermediate,"Data Analyst, SQL, Join, Aggregate Function","SELECT c.customer_name, COUNT(o.order_id) AS order_count, SUM(o.amount) AS total_spent FROM customers c LEFT JOIN orders o ON c.customer_id = o.customer_id WHERE c.signup_date >= DATEADD(year, -1, GETDATE()) GROUP BY c.customer_name",Not Available,This query joins the `customers` and `orders` tables on `customer_id` and filters customers who signed up within the last year. It then counts the number of orders and sums the order amounts for each customer
40,"Given a table 'sales' that records transactions with columns 'id', 'customer_id', 'amount', and 'transaction_date', and a 'customers' table with columns 'id' and 'join_date', write a query to find the total sales amount per customer and the month they first joined, only for customers who joined before January 1, 2021","SELECT c.id AS customer_id, SUM(s.amount) AS total_sales, DATE_TRUNC('month', c.join_date) AS join_month FROM customers c JOIN sales s ON c.id = s.customer_id WHERE c.join_date < '2021-01-01' GROUP BY c.id, c.join_date ORDER BY c.id",SQL,unknown,Intermediate,"['Join', 'Aggregate Function', 'Data Analysis']","SELECT c.id AS customer_id, SUM(s.amount) AS total_sales, DATE_TRUNC('month', c.join_date) AS join_month FROM customers c JOIN sales s ON c.id = s.customer_id WHERE c.join_date < '2021-01-01' GROUP BY c.id, c.join_date ORDER BY c.id",Not Available,"This query joins the 'customers' table with the 'sales' table on 'customer_id' and calculates the total sales amount for each customer who joined before January 1, 2021, grouping by the customer's ID and their join date"
41,"You have two tables, `employees` and `departments`. The `employees` table includes fields like `employee_id`, `employee_name`, `salary`, and `department_id`. The `departments` table has `department_id` and `department_name`. Write a SQL query that retrieves the average salary of employees per department, only including departments where the average salary is greater than $50,000. Sort the results by the department name in ascending order","SELECT d.department_name, AVG(e.salary) AS average_salary FROM employees e JOIN departments d ON e.department_id = d.department_id GROUP BY d.department_name HAVING AVG(e.salary) > 50000 ORDER BY d.department_name ASC",SQL,unknown,Intermediate,"Data Analyst, SQL, Aggregate function, Join","SELECT d.department_name, AVG(e.salary) AS average_salary FROM employees e JOIN departments d ON e.department_id = d.department_id GROUP BY d.department_name HAVING AVG(e.salary) > 50000 ORDER BY d.department_name ASC",Not Available,"This query joins the `employees` and `departments` tables on `department_id`, groups the results by `department_name`, calculates the average salary for each department, filters departments with an average salary exceeding $50,000, and finally sorts the output by department name"
42,"You are given two tables: 'Employees' (with fields: EmployeeID, Name, DepartmentID, Salary) and 'Departments' (with fields: DepartmentID, DepartmentName). Write a SQL query to find the average salary of employees in each department, but only include those departments with more than one employee. Order the result by average salary descending","WITH DeptEmployeeCount AS (SELECT DepartmentID, COUNT(*) AS EmployeeCount FROM Employees GROUP BY DepartmentID HAVING COUNT(*) > 1) SELECT d.DepartmentName, AVG(e.Salary) AS AverageSalary FROM Employees e JOIN Departments d ON e.DepartmentID = d.DepartmentID WHERE e.DepartmentID IN (SELECT DepartmentID FROM DeptEmployeeCount) GROUP BY d.DepartmentName ORDER BY AverageSalary DESC",SQL,unknown,Intermediate,"['SQL', 'Aggregate Function', 'Join', 'Common Table Expression']","SELECT DepartmentName, AVG(Salary) AS AverageSalary FROM Employees E JOIN Departments D ON E.DepartmentID = D.DepartmentID GROUP BY D.DepartmentName",Not Available,"The query first uses a CTE to filter for departments with more than one employee, then it joins the two tables to calculate and order the average salaries"
43,"You are working with a database containing two tables: `orders` (with columns `order_id`, `customer_id`, `order_date`, and `amount`) and `customers` (with columns `customer_id`, `customer_name`, and `signup_date`). Write an SQL query to find the top 3 customers who have spent the most in the year 2022. Include their names and total spending, sorted from highest to lowest spending. If there are ties in spending, include all tied customers. What query would you use?","SELECT c.customer_name, SUM(o.amount) AS total_spending FROM orders o JOIN customers c ON o.customer_id = c.customer_id WHERE o.order_date BETWEEN '2022-01-01' AND '2022-12-31' GROUP BY c.customer_name ORDER BY total_spending DESC LIMIT 3",SQL,unknown,Intermediate,"Data Analyst, SQL, Join, Aggregate function","SELECT c.customer_name, SUM(o.amount) AS total_spending FROM orders o JOIN customers c ON o.customer_id = c.customer_id WHERE o.order_date BETWEEN '2022-01-01' AND '2022-12-31' GROUP BY c.customer_name ORDER BY total_spending DESC LIMIT 3",Not Available,"This query joins the `orders` and `customers` tables on the `customer_id`, filters for orders in the year 2022, aggregates the total spending per customer, and sorts the results to display the top 3 customers by total spending"
44,"Given a sales database with tables `orders` (order_id, customer_id, order_date, total_amount) and `customers` (customer_id, customer_name, signup_date), write a SQL query to find the top 5 customers who spent the most since signing up, and include their total spending and the number of orders placed. Sort the results by total spending in descending order","SELECT c.customer_name, SUM(o.total_amount) AS total_spending, COUNT(o.order_id) AS total_orders FROM customers c JOIN orders o ON c.customer_id = o.customer_id WHERE o.order_date >= c.signup_date GROUP BY c.customer_name ORDER BY total_spending DESC LIMIT 5",SQL,unknown,Intermediate,"[Data Analyst, Business Intelligence, SQL, Join, Aggregate function]","SELECT c.customer_name, SUM(o.total_amount) AS total_spending, COUNT(o.order_id) AS total_orders FROM customers c JOIN orders o ON c.customer_id = o.customer_id WHERE o.order_date >= c.signup_date GROUP BY c.customer_name ORDER BY total_spending DESC LIMIT 5",Not Available,"This query joins the orders and customers tables, filters the orders to only include those that occurred after the customer signed up, and then aggregates the total spending and number of orders for each customer to find the top 5 by total spending"
45,"You work for a retail company and need to find the total sales made by each product category over the past year. Additionally, you want to identify which category had the highest total sales and display it alongside its respective sales total. You have two tables: `sales` (with columns `sale_id`, `product_id`, `amount`, `sale_date`) and `products` (with columns `product_id`, `category`). Write a SQL query to achieve this","WITH sales_by_category AS (SELECT p.category, SUM(s.amount) AS total_sales FROM sales s JOIN products p ON s.product_id = p.product_id WHERE s.sale_date >= DATEADD(year, -1, GETDATE()) GROUP BY p.category) SELECT category, total_sales FROM sales_by_category WHERE total_sales = (SELECT MAX(total_sales) FROM sales_by_category)",SQL,unknown,Intermediate,"['Join', 'Aggregate Function', 'CTE']","WITH sales_by_category AS (SELECT p.category, SUM(s.amount) AS total_sales FROM sales s JOIN products p ON s.product_id = p.product_id WHERE s.sale_date >= DATEADD(year, -1, GETDATE()) GROUP BY p.category) SELECT category, total_sales FROM sales_by_category WHERE total_sales = (SELECT MAX(total_sales) FROM sales_by_category)",Not Available,This SQL uses a Common Table Expression (CTE) to first compute the total sales per product category over the past year using the `SUM` function and `JOIN` operation. Then it retrieves the category with the highest sales using a subquery
46,"Given a sales table with columns 'sale_id', 'employee_id', 'sale_amount', 'sale_date' and an employee table with 'employee_id', 'employee_name', and 'hire_date', write a SQL query that returns the total sales made by each employee during their first year of employment. Order the results by total sales in descending order","WITH FirstYearSales AS (SELECT e.employee_name, SUM(s.sale_amount) AS total_sales FROM sales s JOIN employees e ON s.employee_id = e.employee_id WHERE s.sale_date BETWEEN e.hire_date AND DATEADD(year, 1, e.hire_date) GROUP BY e.employee_name) SELECT employee_name, total_sales FROM FirstYearSales ORDER BY total_sales DESC",SQL,unknown,Advanced,"['Join', 'Aggregate Function', 'CTE']","WITH FirstYearSales AS (SELECT e.employee_name, SUM(s.sale_amount) AS total_sales FROM sales s JOIN employees e ON s.employee_id = e.employee_id WHERE s.sale_date BETWEEN e.hire_date AND DATEADD(year, 1, e.hire_date) GROUP BY e.employee_name) SELECT employee_name, total_sales FROM FirstYearSales ORDER BY total_sales DESC",Not Available,"This query uses a Common Table Expression (CTE) to first calculate the total sales per employee within their first year of employment. It filters the sales based on the hire date and uses SUM to aggregate the sales amounts. Finally, it sorts the result by total sales in descending order"
47,"You are given two tables: `employees` (columns: `employee_id`, `name`, `manager_id`) and `salaries` (columns: `employee_id`, `salary`). Write a SQL query to find the average salary of employees under each manager, and also include the manager's name in the result set. Sort the results by average salary in descending order","SELECT e.manager_id, m.name AS manager_name, AVG(s.salary) AS average_salary FROM employees e JOIN employees m ON e.manager_id = m.employee_id JOIN salaries s ON e.employee_id = s.employee_id GROUP BY e.manager_id, m.name ORDER BY average_salary DESC",SQL,unknown,Advanced,"[""Join"",""Aggregate function"",""Data Analysis""]",Not Available,Not Available,"This query uses multiple joins to link the `employees` table to itself (to get manager names) and to the `salaries` table to calculate the average salary for each manager. Data is grouped by manager, and results are sorted by average salary"
48,"You have two tables: `sales` (with columns `sale_id`, `product_id`, `amount`, and `sale_date`) and `products` (with columns `product_id`, `product_name`, and `category`). Write a SQL query to find the top 3 products by total sales amount for each category, along with their total sales amount","WITH ranked_sales AS (SELECT p.category, p.product_name, SUM(s.amount) AS total_sales, ROW_NUMBER() OVER (PARTITION BY p.category ORDER BY SUM(s.amount) DESC) AS rank FROM products p JOIN sales s ON p.product_id = s.product_id GROUP BY p.category, p.product_name) SELECT category, product_name, total_sales FROM ranked_sales WHERE rank <= 3 ORDER BY category, total_sales DESC",SQL,unknown,Advanced,"Data Analyst, Data Engineer, Business Intelligence","Aggregate function, Window function, CTE","SELECT category, product_name, total_sales FROM ranked_sales WHERE rank <= 3",Not Available
49,"You are tasked with analyzing sales data from a retail database. The database includes two tables: `sales` (with columns `sale_id`, `product_id`, `amount`, and `sale_date`) and `products` (with columns `product_id`, `product_name`, and `category`). Write a SQL query to find the total sales amount for each product category for the year 2023, showing the category name and total sales amount sorted in descending order by total sales","SELECT p.category, SUM(s.amount) AS total_sales FROM sales s JOIN products p ON s.product_id = p.product_id WHERE YEAR(s.sale_date) = 2023 GROUP BY p.category ORDER BY total_sales DESC",SQL,unknown,Intermediate,"Data Analyst, Join, Aggregate function","SELECT p.category, SUM(s.amount) AS total_sales FROM sales s JOIN products p ON s.product_id = p.product_id WHERE YEAR(s.sale_date) = 2023 GROUP BY p.category ORDER BY total_sales DESC",Not Available,"This query joins the `sales` table with the `products` table to aggregate total sales for each category in 2023, grouping the results by `category` and ordering them by the total sales amount"
50,"You have two tables: 'Employees' (EmployeeID, EmployeeName, TeamID) and 'Teams' (TeamID, TeamName). Write a SQL query to find the number of employees in each team, and list teams that have more than 5 employees, including the team name and the employee count","SELECT t.TeamName, COUNT(e.EmployeeID) AS EmployeeCount FROM Teams t LEFT JOIN Employees e ON t.TeamID = e.TeamID GROUP BY t.TeamName HAVING COUNT(e.EmployeeID) > 5",SQL,unknown,Intermediate,"Data Analyst, Join, Aggregate function","SELECT t.TeamName, COUNT(e.EmployeeID) AS EmployeeCount FROM Teams t LEFT JOIN Employees e ON t.TeamID = e.TeamID GROUP BY t.TeamName HAVING COUNT(e.EmployeeID) > 5",Not Available,"This query uses a LEFT JOIN to combine the Teams and Employees tables, counts the employees for each team, groups by TeamName, and filters to only show teams with more than 5 employees"
51,"You are given two tables, `employees` and `departments`. The `employees` table includes columns `employee_id`, `name`, `salary`, and `department_id`. The `departments` table contains `department_id` and `department_name`. Write a SQL query to find the average salary of employees in each department and return the department name along with the average salary. Order the results by average salary in descending order","WITH avg_salaries AS (SELECT d.department_name, AVG(e.salary) AS average_salary FROM employees e JOIN departments d ON e.department_id = d.department_id GROUP BY d.department_name) SELECT department_name, average_salary FROM avg_salaries ORDER BY average_salary DESC",SQL,unknown,Intermediate,"Data Analyst, Join, Aggregate function","SELECT d.department_name, AVG(e.salary) AS average_salary FROM employees e JOIN departments d ON e.department_id = d.department_id GROUP BY d.department_name ORDER BY average_salary DESC",Not Available,The query uses a Common Table Expression (CTE) to calculate the average salary for each department by joining the employees and departments tables. It then selects and orders the results based on average salary
52,"You are tasked with finding the total sales and the rank of each product based on total sales within different categories. Your data is stored in two tables: 'products' with columns (product_id, product_name, category_id) and 'sales' with columns (sale_id, product_id, sale_amount). Write a SQL query to obtain the product name, total sales for each product, and its rank within its category","WITH ProductSales AS (SELECT p.product_name, SUM(s.sale_amount) AS total_sales, p.category_id FROM products p JOIN sales s ON p.product_id = s.product_id GROUP BY p.product_name, p.category_id), RankedSales AS (SELECT product_name, total_sales, category_id, RANK() OVER (PARTITION BY category_id ORDER BY total_sales DESC) AS sales_rank FROM ProductSales) SELECT product_name, total_sales, sales_rank FROM RankedSales",SQL,unknown,Advanced,"['Data Analyst', 'Business Analyst', 'CTE', 'Window Function', 'Aggregates']","WITH ProductSales AS (SELECT p.product_name, SUM(s.sale_amount) AS total_sales, p.category_id FROM products p JOIN sales s ON p.product_id = s.product_id GROUP BY p.product_name, p.category_id), RankedSales AS (SELECT product_name, total_sales, category_id, RANK() OVER (PARTITION BY category_id ORDER BY total_sales DESC) AS sales_rank FROM ProductSales) SELECT product_name, total_sales, sales_rank FROM RankedSales",Not Available,"This SQL query uses Common Table Expressions (CTEs) to first aggregate total sales per product by joining the products and sales tables. After that, it calculates the rank of each product within its category based on total sales using the RANK() window function. The final SELECT fetches the product names along with their total sales and ranks"
53,"Given a sales database with two tables: `Sales` (columns: `SaleID`, `ProductID`, `Quantity`, `SaleDate`) and `Products` (columns: `ProductID`, `ProductName`, `Price`), write a query to find the total revenue generated from each product in the past month and rank the products by revenue, displaying the top 5","WITH Revenue AS (SELECT p.ProductName, SUM(s.Quantity * p.Price) AS TotalRevenue FROM Sales s JOIN Products p ON s.ProductID = p.ProductID WHERE s.SaleDate >= DATEADD(MONTH, -1, GETDATE()) GROUP BY p.ProductName) SELECT ProductName, TotalRevenue, RANK() OVER (ORDER BY TotalRevenue DESC) AS RevenueRank FROM Revenue WHERE RevenueRank <= 5",SQL,advanced,"[""Data Analyst"", ""Business Intelligence"", ""Join"", ""Aggregate function"", ""Window function""]","SELECT ProductName, SUM(Quantity * Price) AS TotalRevenue FROM Sales s JOIN Products p ON s.ProductID = p.ProductID GROUP BY ProductName ORDER BY TotalRevenue DESC LIMIT 5",Not Available,This query first calculates the total revenue per product for the last month and then ranks the products based on this total revenue. Only the top 5 products are returned,Candidates might forget to filter the sales for the past month or misplace the ordering of total revenue
54,"You are given two tables, `customers` and `orders`. The `customers` table contains customer_id and customer_name, while the `orders` table contains order_id, customer_id, and order_total. Write a query that returns the customer names along with the total amount each customer has ordered, ordered from highest to lowest total order amount. If a customer has not made any orders, they should still be listed with a total of 0","SELECT c.customer_name, COALESCE(SUM(o.order_total), 0) AS total_order_amount FROM customers c LEFT JOIN orders o ON c.customer_id = o.customer_id GROUP BY c.customer_name ORDER BY total_order_amount DESC",SQL,unknown,Intermediate,"Data Analyst, Join, Aggregate Function","SELECT c.customer_name, COALESCE(SUM(o.order_total), 0) AS total_order_amount FROM customers c LEFT JOIN orders o ON c.customer_id = o.customer_id GROUP BY c.customer_name ORDER BY total_order_amount DESC",Not Available,"This query uses a LEFT JOIN to include all customers even if they have no orders. The COALESCE function is used to return 0 for customers with no orders, and the results are grouped by customer name with totals calculated for each customer"
55,"Given a sales database with two tables, `sales` (columns: `id`, `product_id`, `quantity`, `sale_date`) and `products` (columns: `id`, `product_name`, `price`), write a SQL query to calculate the total revenue generated for each product for the year 2022. The output should include `product_name` and `total_revenue` sorted in descending order of revenue","SELECT p.product_name, SUM(s.quantity * p.price) AS total_revenue 
 FROM sales s 
 JOIN products p ON s.product_id = p.id 
 WHERE YEAR(s.sale_date) = 2022 
 GROUP BY p.product_name 
 ORDER BY total_revenue DESC",SQL,unknown,Intermediate,"[""Data Analyst"", ""Data Engineer"", ""Join"", ""Aggregate Function""]","SELECT p.product_name, SUM(s.quantity * p.price) AS total_revenue FROM sales s JOIN products p ON s.product_id = p.id WHERE YEAR(s.sale_date) = 2022 GROUP BY p.product_name ORDER BY total_revenue DESC",Not Available,"This query joins the `sales` and `products` tables to calculate total revenue by multiplying quantity sold by the product price and sums it up for the year 2022, then groups the results by product name and orders them by total revenue in descending order"
56,"You are given two tables: `employees` with columns `employee_id`, `name`, and `manager_id`, and `sales` with columns `employee_id`, `amount`, and `date`. Write a SQL query to find the total sales amount generated by each manager's team for the last month. Make sure to return each manager's name along with their total sales","WITH last_month_sales AS (SELECT e.manager_id, SUM(s.amount) AS total_sales FROM employees e JOIN sales s ON e.employee_id = s.employee_id WHERE s.date >= DATE_TRUNC('month', CURRENT_DATE - INTERVAL '1 month') AND s.date < DATE_TRUNC('month', CURRENT_DATE) GROUP BY e.manager_id) SELECT m.name, COALESCE(lm.total_sales, 0) AS total_sales FROM employees m LEFT JOIN last_month_sales lm ON m.employee_id = lm.manager_id WHERE m.manager_id IS NULL",SQL,unknown,Advanced,"['Data Analyst', 'Data Engineer', 'Join', 'Aggregate Function', 'CTE']","SELECT m.name, COALESCE(lm.total_sales, 0) AS total_sales FROM employees m LEFT JOIN last_month_sales lm ON m.employee_id = lm.manager_id WHERE m.manager_id IS NULL",Not Available,This query uses a Common Table Expression (CTE) to first calculate total sales for each manager's team. It then performs a LEFT JOIN with the `employees` table to get the manager's names and ensures that managers without sales still appear in the output with a total of zero
57,"Given a sales database with two tables: `sales` (containing sales records with columns for `sale_id`, `product_id`, `amount`, and `sale_date`) and `products` (containing product details with columns for `product_id`, `product_name`, and `category_id`), write a query to find the total sales amount for each product category in the last month, including categories with no sales","WITH last_month_sales AS (SELECT p.category_id, SUM(s.amount) AS total_amount FROM sales s JOIN products p ON s.product_id = p.product_id WHERE s.sale_date >= DATEADD(month, -1, GETDATE()) GROUP BY p.category_id) SELECT c.category_id, COALESCE(l.total_amount, 0) AS total_sales FROM categories c LEFT JOIN last_month_sales l ON c.category_id = l.category_id",SQL,unknown,Advanced,"Data Analyst, Data Engineer, Aggregate Function, Join, CTE","WITH last_month_sales AS (SELECT p.category_id, SUM(s.amount) AS total_amount FROM sales s JOIN products p ON s.product_id = p.product_id WHERE s.sale_date >= DATEADD(month, -1, GETDATE()) GROUP BY p.category_id) SELECT c.category_id, COALESCE(l.total_amount, 0) AS total_sales FROM categories c LEFT JOIN last_month_sales l ON c.category_id = l.category_id",Not Available,"This query uses a Common Table Expression (CTE) to calculate total sales amounts for each product category in the last month. The main query then performs a LEFT JOIN with the `categories` table to include categories that had no sales, using COALESCE to turn NULL into zero"
58,"You are tasked with analyzing the sales data for a retail company. You have two tables: 'sales' that records each sale made with 'sale_id', 'customer_id', 'product_id', and 'amount', and 'customers' that provides 'customer_id' and 'registration_date'. Your goal is to identify the top 5 customers by total sales who registered in the last year. Write an SQL query to solve this","WITH recent_customers AS (SELECT customer_id FROM customers WHERE registration_date >= DATEADD(YEAR, -1, GETDATE())) SELECT TOP 5 c.customer_id, SUM(s.amount) AS total_sales FROM sales s JOIN recent_customers rc ON s.customer_id = rc.customer_id GROUP BY c.customer_id ORDER BY total_sales DESC",SQL,unknown,Advanced,"Data Analyst, SQL, Aggregate Function, Join, CTE","WITH recent_customers AS (SELECT customer_id FROM customers WHERE registration_date >= DATEADD(YEAR, -1, GETDATE())) SELECT TOP 5 c.customer_id, SUM(s.amount) AS total_sales FROM sales s JOIN recent_customers rc ON s.customer_id = rc.customer_id GROUP BY c.customer_id ORDER BY total_sales DESC",Not Available,"This SQL query uses a Common Table Expression (CTE) to first filter customers who registered in the last year, and then joins this subset with the sales data to calculate total sales per customer, finally selecting the top 5 based on total sales"
59,"Given a sales database with tables `orders` (order_id, customer_id, order_date, total_amount) and `customers` (customer_id, name, country), write a SQL query to find the total sales amount for each customer, sorted by the highest sales amount first. Additionally, include customers who have never made a purchase, showing their total sales as zero","SELECT c.customer_id, c.name, COALESCE(SUM(o.total_amount), 0) AS total_sales FROM customers c LEFT JOIN orders o ON c.customer_id = o.customer_id GROUP BY c.customer_id, c.name ORDER BY total_sales DESC",SQL,unknown,Intermediate,"Data Analyst, SQL, Join, Aggregate function","SELECT c.customer_id, c.name, COALESCE(SUM(o.total_amount), 0) AS total_sales FROM customers c LEFT JOIN orders o ON c.customer_id = o.customer_id GROUP BY c.customer_id, c.name ORDER BY total_sales DESC",Not Available,"This query performs a LEFT JOIN between the `customers` and `orders` tables to ensure that all customers are included, even those without orders. The `COALESCE` function is used to replace NULL values with 0 for total sales. It groups the results by customer and sorts them in descending order of total sales"
60,"You are given a sales database with two tables: 'sales' and 'products'. The 'sales' table contains fields: 'sale_id', 'product_id', 'quantity_sold', and 'sale_date'. The 'products' table contains 'product_id', 'product_name', and 'price'. Write an SQL query to find the top 5 products by total revenue generated (revenue = quantity_sold * price) in the month of January 2023. Include product_id, product_name, total_revenue, and rank based on total revenue","WITH revenue_data AS (SELECT p.product_id, p.product_name, SUM(s.quantity_sold * p.price) AS total_revenue FROM sales s JOIN products p ON s.product_id = p.product_id WHERE s.sale_date >= '2023-01-01' AND s.sale_date < '2023-02-01' GROUP BY p.product_id, p.product_name) SELECT product_id, product_name, total_revenue, RANK() OVER (ORDER BY total_revenue DESC) AS revenue_rank FROM revenue_data ORDER BY revenue_rank",SQL,advanced,"['Data Analyst', 'Data Engineer', 'Join', 'Aggregate function', 'Window function']","WITH revenue_data AS (SELECT p.product_id, p.product_name, SUM(s.quantity_sold * p.price) AS total_revenue FROM sales s JOIN products p ON s.product_id = p.product_id WHERE s.sale_date >= '2023-01-01' AND s.sale_date < '2023-02-01' GROUP BY p.product_id, p.product_name) SELECT product_id, product_name, total_revenue, RANK() OVER (ORDER BY total_revenue DESC) AS revenue_rank FROM revenue_data ORDER BY revenue_rank",Not Available,This SQL code calculates total revenue generated for each product sold in January 2023 and ranks the products based on their total revenue using a Common Table Expression (CTE) and a window function,"Candidates may forget to filter the sale_date correctly, leading to wrong date ranges, or they might neglect to use the RANK() function for ordering the results"
61,"You are working with a sales database that contains two tables: `orders` and `customers`. The `orders` table has columns `order_id`, `customer_id`, `order_date`, and `amount`. The `customers` table has columns `customer_id`, `customer_name`, and `region`. Write a SQL query to find the total sales amount per customer along with their customer names, and rank them in descending order of their sales. If two customers have the same sales amount, they should have the same rank","WITH RankedSales AS (SELECT c.customer_name, SUM(o.amount) AS total_sales, RANK() OVER (ORDER BY SUM(o.amount) DESC) AS sales_rank FROM customers c JOIN orders o ON c.customer_id = o.customer_id GROUP BY c.customer_name) SELECT customer_name, total_sales, sales_rank FROM RankedSales",SQL,unknown,Advanced,"[""SQL"", ""Window Functions"", ""CTE"", ""Join""]","SELECT c.customer_name, SUM(o.amount) AS total_sales, RANK() OVER (ORDER BY SUM(o.amount) DESC) AS sales_rank FROM customers c JOIN orders o ON c.customer_id = o.customer_id GROUP BY c.customer_name",Not Available,"The provided SQL query uses a Common Table Expression (CTE) to first aggregate total sales per customer using a JOIN between the `customers` and `orders` tables. Then, it employs a window function `RANK()` to assign ranks based on the total sales in descending order"
62,"Given a sales database with tables 'sales' (fields: sale_id, product_id, amount, sale_date) and 'products' (fields: product_id, product_name, category), write an SQL query to find the top 3 products by total sales amount in each category for the last year","WITH sales_summary AS (SELECT p.category, p.product_name, SUM(s.amount) AS total_sales FROM sales s JOIN products p ON s.product_id = p.product_id WHERE s.sale_date >= DATEADD(year, -1, GETDATE()) GROUP BY p.category, p.product_name), ranked_sales AS (SELECT category, product_name, total_sales, ROW_NUMBER() OVER (PARTITION BY category ORDER BY total_sales DESC) AS rank FROM sales_summary) SELECT category, product_name, total_sales FROM ranked_sales WHERE rank <= 3 ORDER BY category, total_sales DESC",SQL,unknown,Advanced,"[""Data Analyst"", ""Data Engineer"", ""Aggregate function"", ""Join"", ""CTE""]",Not Available,"The SQL query uses Common Table Expressions (CTEs) to first summarize the total sales per product within each category for the last year, and then ranks these products using the ROW_NUMBER() window function to extract the top 3 products in each category",Candidates may forget to filter the sales for the last year or misapplied the JOIN condition between tables
63,"Given a sales database with tables `orders` (order_id, customer_id, order_date, total_amount) and `customers` (customer_id, customer_name, signup_date), write an SQL query to find the total money spent by each customer who signed up in 2022, along with their names, sorted by amount spent in descending order. If a customer has not placed any orders, they should not appear in the results","SELECT c.customer_name, SUM(o.total_amount) AS total_spent FROM customers c JOIN orders o ON c.customer_id = o.customer_id WHERE c.signup_date >= '2022-01-01' AND c.signup_date < '2023-01-01' GROUP BY c.customer_id ORDER BY total_spent DESC",SQL,unknown,Intermediate,"[""Data Analyst"", ""Data Engineer"", ""Join"", ""Aggregate Function""]",Not Available,"The query joins the `customers` and `orders` tables, filters the customers who signed up in 2022, and calculates the total amount spent using the `SUM` function, grouping by `customer_id` and ordering the results by the total spent in descending order","Candidates might forget to filter the signup date correctly or might not aggregate properly, leading to errors in data retrieval or incorrect totals"
64,"You are given two tables: `employees` (with columns `employee_id`, `name`, `department_id`, `salary`) and `departments` (with columns `department_id`, `department_name`). Write a SQL query to find the top 3 highest-paid employees in each department","WITH ranked_employees AS ( SELECT e.employee_id, e.name, e.salary, d.department_name, ROW_NUMBER() OVER (PARTITION BY e.department_id ORDER BY e.salary DESC) AS rank FROM employees e JOIN departments d ON e.department_id = d.department_id ) SELECT employee_id, name, salary, department_name FROM ranked_employees WHERE rank <= 3 ORDER BY department_name, rank",SQL,unknown,Advanced,"[""Data Analyst"", ""Data Engineer"", ""Business Intelligence"", ""Window Function"", ""CTE""]",Not Available,This query uses a Common Table Expression (CTE) to rank employees in each department based on their salaries and then filters out the top 3 highest-paid employees for each department,"Candidates might forget to use the PARTITION BY clause correctly, or they may not understand how to order the ranks properly. They might also overlook ordering the final results"
65,"You are given two tables: `employees` with columns `id`, `name`, `department_id`, and `salary`, and `departments` with columns `id`, `department_name`. Write a SQL query to find the average salary of employees, grouped by department name, and only include departments with an average salary greater than $60,000","SELECT d.department_name, AVG(e.salary) AS average_salary FROM employees e JOIN departments d ON e.department_id = d.id GROUP BY d.department_name HAVING AVG(e.salary) > 60000",SQL,unknown,Intermediate,"['Join', 'Aggregate function', 'Group By']","SELECT d.department_name, AVG(e.salary) AS average_salary FROM employees e JOIN departments d ON e.department_id = d.id GROUP BY d.department_name HAVING AVG(e.salary) > 60000",Not Available,"This query joins the `employees` and `departments` tables, calculates the average salary for each department, and filters to show only those departments with an average salary exceeding $60,000"
66,"You have two tables, `employees` and `departments`. The `employees` table has columns: `employee_id`, `employee_name`, `department_id`, and `salary`. The `departments` table has columns: `department_id` and `department_name`. Write an SQL query to find the average salary of employees in each department that has more than five employees","WITH dept_employee_count AS (SELECT department_id, COUNT(*) AS employee_count FROM employees GROUP BY department_id HAVING COUNT(*) > 5) SELECT d.department_name, AVG(e.salary) AS average_salary FROM departments d JOIN employees e ON d.department_id = e.department_id JOIN dept_employee_count dec ON d.department_id = dec.department_id GROUP BY d.department_name",SQL,unknown,Intermediate,"[""Join"",""Aggregation"",""CTE"",""Data Analyst""]",Not Available,"The query first creates a Common Table Expression (CTE) to count the number of employees in each department that has more than five employees. It then joins the `departments` table with the `employees` table and the CTE to get the average salary for those departments, grouping the results by department name","Candidates may forget to include the HAVING clause in the CTE, mistakenly think that even departments with five employees should be included, or misjoin tables leading to incorrect results"
67,"Given two tables, `orders` and `customers`, write a SQL query to find the total number of orders placed by each customer along with their names. The result should only include customers who have placed more than 3 orders. The `orders` table has fields `order_id`, `customer_id`, and `order_date`, while the `customers` table has fields `customer_id` and `customer_name`","SELECT c.customer_name, COUNT(o.order_id) AS total_orders FROM customers c JOIN orders o ON c.customer_id = o.customer_id GROUP BY c.customer_name HAVING COUNT(o.order_id) > 3",SQL,unknown,Intermediate,"Data Analyst, Join, Aggregate Function",Not Available,"This SQL query joins the `customers` and `orders` tables on the `customer_id` field, groups the results by customer names, counts the number of orders for each customer, and filters the results to only include customers with more than 3 orders","Common mistakes include failing to use the `HAVING` clause correctly, misplacing the `GROUP BY` clause, or leaving out the `JOIN` entirely, resulting in an incomplete dataset"
68,"Given two tables: `employees` (columns: `employee_id`, `name`, `department_id`) and `departments` (columns: `department_id`, `department_name`), write a SQL query to find the total number of employees in each department. Include departments that have no employees as well","SELECT d.department_name, COUNT(e.employee_id) AS total_employees FROM departments d LEFT JOIN employees e ON d.department_id = e.department_id GROUP BY d.department_name",SQL,unknown,Intermediate,"Data Analyst, Data Engineer, Join, Aggregate Function","SELECT d.department_name, COUNT(e.employee_id) AS total_employees FROM departments d LEFT JOIN employees e ON d.department_id = e.department_id GROUP BY d.department_name",Not Available,"This query uses a LEFT JOIN to ensure that all departments are included in the results, even if they have no employees. The COUNT function counts the number of employees for each department"
69,"Consider a retail database with two tables: `orders` and `customers`. The `orders` table contains columns `order_id`, `customer_id`, `order_date`, and `total_amount`. The `customers` table has columns `customer_id`, `customer_name`, and `membership_type` (which can be 'regular', 'premium', or 'vip'). Write an SQL query to find the total amount spent by each membership type over the last year, ranked by total amount spent in descending order. Include a row for each membership type even if no orders were placed","WITH total_spending AS ( SELECT c.membership_type, SUM(o.total_amount) AS total_amount FROM customers c LEFT JOIN orders o ON c.customer_id = o.customer_id AND o.order_date >= DATEADD(year, -1, GETDATE()) GROUP BY c.membership_type ) SELECT membership_type, ISNULL(total_amount, 0) AS total_amount FROM total_spending ORDER BY total_amount DESC",SQL,unknown,Advanced,"[""Data Analyst"", ""Business Intelligence"", ""Aggregate function"", ""Join"", ""CTE""]","SELECT c.membership_type, SUM(o.total_amount) AS total_amount FROM customers c LEFT JOIN orders o ON c.customer_id = o.customer_id WHERE o.order_date >= DATEADD(year, -1, GETDATE()) GROUP BY c.membership_type ORDER BY total_amount DESC",Not Available,"This query uses a Common Table Expression (CTE) to first aggregate the total amount spent by each membership type for the last year. It then selects from this CTE while ensuring that all membership types are included in the final output, using ISNULL to replace NULLs with zero for any types without orders"
70,"Given a sales database with `orders` (order_id, customer_id, amount, order_date) and `customers` (customer_id, name, joined_date), write an SQL query to find the top 3 customers who have spent the most money in the year 2023. Return their name, total amount spent, and the number of orders placed","SELECT c.name, SUM(o.amount) AS total_spent, COUNT(o.order_id) AS order_count FROM customers c JOIN orders o ON c.customer_id = o.customer_id WHERE YEAR(o.order_date) = 2023 GROUP BY c.customer_id ORDER BY total_spent DESC LIMIT 3",SQL,unknown,Intermediate,"Data Analyst, Join, Aggregate function, Group By","SELECT c.name, SUM(o.amount) AS total_spent, COUNT(o.order_id) AS order_count FROM customers c JOIN orders o ON c.customer_id = o.customer_id WHERE YEAR(o.order_date) = 2023 GROUP BY c.customer_id ORDER BY total_spent DESC LIMIT 3",Not Available,"This query joins the `customers` and `orders` tables and filters for orders made in 2023. It aggregates the total spending and count of orders per customer, ordering the result to get the top 3 by total spending"
71,"You are given two tables: 'employees' (employee_id, name, department_id) and 'departments' (department_id, department_name). Write an SQL query to find the department name(s) which have more than 5 employees",SELECT d.department_name FROM employees e JOIN departments d ON e.department_id = d.department_id GROUP BY d.department_name HAVING COUNT(e.employee_id) > 5,unknown,Intermediate,"['Join', 'Aggregate function', 'Group By']",example_query,"The query joins the 'employees' and 'departments' tables on the department_id, groups the results by department_name, and filters the groups to find those with more than 5 employees using the HAVING clause","Candidates might forget to use the HAVING clause instead of WHERE for aggregate functions, or neglect to group the results correctly by department","Candidates might forget to use the HAVING clause instead of WHERE for aggregate functions, or neglect to group the results correctly by department"
72,"Given a sales database with tables for `orders` (order_id, customer_id, order_date, total_amount) and `customers` (customer_id, customer_name, signup_date), write a SQL query to find the top 5 customers who have spent the most in total and have also signed up in the last year. Include their customer name, total spent, and signup date","WITH customer_spending AS ( SELECT c.customer_name, SUM(o.total_amount) AS total_spent, c.signup_date FROM customers c JOIN orders o ON c.customer_id = o.customer_id WHERE c.signup_date >= DATEADD(year, -1, GETDATE()) GROUP BY c.customer_name, c.signup_date ) SELECT TOP 5 customer_name, total_spent, signup_date FROM customer_spending ORDER BY total_spent DESC",SQL,intermediate,"Data Analyst, Aggregate function, Join, CTE","WITH customer_spending AS ( SELECT c.customer_name, SUM(o.total_amount) AS total_spent, c.signup_date FROM customers c JOIN orders o ON c.customer_id = o.customer_id WHERE c.signup_date >= DATEADD(year, -1, GETDATE()) GROUP BY c.customer_name, c.signup_date ) SELECT TOP 5 customer_name, total_spent, signup_date FROM customer_spending ORDER BY total_spent DESC",Not Available,"The SQL code first creates a common table expression (CTE) that sums up the total amount spent by customers who signed up in the last year. Then, it selects the top 5 customers based on their total spending","Common mistakes include forgetting to filter customers by the signup date, not using `SUM` correctly, or using `LIMIT` instead of `TOP` when querying in SQL Server"
73,"Assuming you have two tables: `employees` (id, name, department_id) and `departments` (id, department_name, manager_id), write an SQL query to find the names of all employees along with their department names and the names of their managers","SELECT e.name AS employee_name, d.department_name, (SELECT e2.name FROM employees AS e2 WHERE e2.id = d.manager_id) AS manager_name FROM employees AS e JOIN departments AS d ON e.department_id = d.id",SQL,unknown,Intermediate,"Data Analyst, Data Engineer, Business Intelligence","Join, Subquery","SELECT e.name AS employee_name, d.department_name, (SELECT e2.name FROM employees AS e2 WHERE e2.id = d.manager_id) AS manager_name FROM employees AS e JOIN departments AS d ON e.department_id = d.id",Not Available
74,"You have two tables: `employees` (employee_id, name, department_id) and `departments` (department_id, department_name). Write a SQL query to find the department name with the highest average salary from the `salaries` table (salary_id, employee_id, amount). If no salaries are available for a department, exclude it from the results","WITH avg_salaries AS (SELECT d.department_name, AVG(s.amount) AS avg_salary FROM departments d INNER JOIN employees e ON d.department_id = e.department_id LEFT JOIN salaries s ON e.employee_id = s.employee_id GROUP BY d.department_name) SELECT department_name FROM avg_salaries ORDER BY avg_salary DESC LIMIT 1",SQL,unknown,Advanced,"Data Analyst, SQL, Join, Aggregate Function, CTE","WITH avg_salaries AS (SELECT d.department_name, AVG(s.amount) AS avg_salary FROM departments d INNER JOIN employees e ON d.department_id = e.department_id LEFT JOIN salaries s ON e.employee_id = s.employee_id GROUP BY d.department_name) SELECT department_name FROM avg_salaries ORDER BY avg_salary DESC LIMIT 1",Not Available,"This query calculates the average salary for each department by joining the `departments`, `employees`, and `salaries` tables. It groups the results by department name and orders them in descending order to find the department with the highest average salary"
75,"You have a table named 'orders' that contains columns `order_id`, `customer_id`, `order_date`, and `amount`. You also have a table named 'customers' with columns `customer_id` and `signup_date`. Write a SQL query to find the total order amount and the number of orders placed by customers who signed up in the last year. Sort the result by total order amount in descending order","SELECT c.customer_id, COUNT(o.order_id) AS order_count, SUM(o.amount) AS total_order_amount FROM customers c LEFT JOIN orders o ON c.customer_id = o.customer_id WHERE c.signup_date >= DATEADD(year, -1, GETDATE()) GROUP BY c.customer_id ORDER BY total_order_amount DESC",SQL,unknown,Intermediate,"[""Data Analyst"", ""Data Engineer"", ""Join"", ""Aggregate Function""]",Not Available,"This query joins the `customers` table with the `orders` table to aggregate the total order amounts and counts for customers who signed up in the last year. It filters those customers and groups the results by `customer_id`, sorting the output by the total order amount","Common mistakes include forgetting to use the correct date functions, not filtering correctly on the `signup_date`, or omitting the `LEFT JOIN` which could lead to miscounts if a customer has no orders"
76,"You are given two tables: `sales` and `employees`. The `sales` table contains data about the sales made by employees with the following columns: `sale_id`, `employee_id`, `sale_amount`, and `sale_date`. The `employees` table contains employee details with columns: `employee_id`, `employee_name`, and `department`. Write a SQL query to find the total sales amount by each employee for the year 2022, including their names and departments. Sort the result by total sales amount in descending order. Additionally, if an employee has not made any sales, they should still appear in the result with a total sales amount of 0","SELECT e.employee_id, e.employee_name, e.department, COALESCE(SUM(s.sale_amount), 0) AS total_sales FROM employees e LEFT JOIN sales s ON e.employee_id = s.employee_id AND YEAR(s.sale_date) = 2022 GROUP BY e.employee_id, e.employee_name, e.department ORDER BY total_sales DESC",SQL,unknown,Intermediate,"Data Analyst, Data Engineer, Join, Aggregate Function","SELECT e.employee_id, e.employee_name, e.department, COALESCE(SUM(s.sale_amount), 0) AS total_sales FROM employees e LEFT JOIN sales s ON e.employee_id = s.employee_id AND YEAR(s.sale_date) = 2022 GROUP BY e.employee_id, e.employee_name, e.department ORDER BY total_sales DESC",Not Available,"This SQL query uses a LEFT JOIN to combine the `employees` table with the `sales` table, ensuring that all employees are included in the output even if they have no sales during the specified year. The `COALESCE` function is used to return 0 for employees with no associated sales"
77,"Given a sales database with tables 'sales' (columns: sale_id, product_id, quantity, sale_date), 'products' (columns: product_id, product_name, category), and 'categories' (columns: category_id, category_name), write a SQL query to find the total quantity sold for each product category in the month of January 2023","SELECT c.category_name, SUM(s.quantity) AS total_quantity FROM sales s JOIN products p ON s.product_id = p.product_id JOIN categories c ON p.category = c.category_id WHERE s.sale_date BETWEEN '2023-01-01' AND '2023-01-31' GROUP BY c.category_name ORDER BY total_quantity DESC",SQL,unknown,Intermediate,"Data Analyst, JOIN, Aggregate Function","SELECT category_name, SUM(quantity) AS total_quantity FROM sales JOIN products ON sales.product_id = products.product_id JOIN categories ON products.category = categories.category_id WHERE sale_date BETWEEN '2023-01-01' AND '2023-01-31' GROUP BY category_name",Not Available,"This query aggregates the total quantity sold for each product category by joining the sales, products, and categories tables and filtering records for January 2023"
78,"Given a sales database, write a SQL query to find the average sale amount for each product across different regions, also including the product name and region. The results should be ordered by the average sale amount in descending order","SELECT p.product_name, s.region, AVG(s.sale_amount) AS avg_sale_amount FROM sales s JOIN products p ON s.product_id = p.product_id GROUP BY p.product_name, s.region ORDER BY avg_sale_amount DESC",SQL,unknown,Intermediate,"[""Data Analyst"", ""Business Intelligence"", ""Join"", ""Aggregate Function""]","SELECT p.product_name, s.region, AVG(s.sale_amount) AS avg_sale_amount FROM sales s JOIN products p ON s.product_id = p.product_id GROUP BY p.product_name, s.region ORDER BY avg_sale_amount DESC",Not Available,"This query joins the sales table with the products table to get the necessary product details and calculates the average sale amount for each product in each region, grouping the results accordingly"
79,"You are working with two tables: `employees` and `departments`. The `employees` table has columns: `employee_id`, `employee_name`, `salary`, and `department_id`. The `departments` table has `department_id` and `department_name`. Write a query to find the department name and the average salary of employees in each department. Only include departments that have more than 5 employees","SELECT d.department_name, AVG(e.salary) AS average_salary FROM departments d JOIN employees e ON d.department_id = e.department_id GROUP BY d.department_name HAVING COUNT(e.employee_id) > 5",SQL,intermediate,"Data Analyst, Join, Aggregation","SELECT d.department_name, AVG(e.salary) AS average_salary FROM departments d JOIN employees e ON d.department_id = e.department_id GROUP BY d.department_name HAVING COUNT(e.employee_id) > 5",Not Available,This query joins the `departments` and `employees` tables to calculate the average salary of employees for each department while filtering to include only those departments with more than five employees,"Candidates might forget to use `HAVING` instead of `WHERE` for filtering grouped data, or they may not use `GROUP BY` appropriately which would lead to errors"
80,"You are working with a sales database that includes two tables: 'orders' and 'customers'. The 'orders' table has columns: 'order_id', 'customer_id', 'order_date', and 'total_amount'. The 'customers' table includes 'customer_id', 'customer_name', and 'customer_since'. Write a SQL query to find the average total amount spent by customers who have been customers for more than 3 years. Include the customer's name and the average amount in the output","SELECT c.customer_name, AVG(o.total_amount) AS average_spent FROM customers c JOIN orders o ON c.customer_id = o.customer_id WHERE c.customer_since < DATEADD(year, -3, GETDATE()) GROUP BY c.customer_name",SQL,unknown,Intermediate,"Join, Aggregate Function, Data Analysis","SELECT c.customer_name, AVG(o.total_amount) AS average_spent FROM customers c JOIN orders o ON c.customer_id = o.customer_id WHERE c.customer_since < DATEADD(year, -3, GETDATE()) GROUP BY c.customer_name",Not Available,"This query joins the 'customers' and 'orders' tables to calculate the average spending on orders for customers who have been customers for over three years. It filters the 'customers' table based on the 'customer_since' date, groups the results by customer, and averages the total_amount per customer"
81,"You are given two tables: `orders` and `customers`. The `orders` table contains columns `order_id`, `customer_id`, `order_date`, and `amount`. The `customers` table includes `customer_id`, `customer_name`, and `join_date`. Write a SQL query to find the top 5 customers who have spent the most in the year 2023, along with their names and total spending. The result should be ordered by the total spending in descending order","WITH customer_spending AS ( SELECT c.customer_name, SUM(o.amount) AS total_spent FROM orders o JOIN customers c ON o.customer_id = c.customer_id WHERE YEAR(o.order_date) = 2023 GROUP BY c.customer_name ORDER BY total_spent DESC LIMIT 5 ) SELECT * FROM customer_spending",SQL,unknown,Advanced,"[""Data Analyst"", ""Business Intelligence"", ""Join"", ""Aggregate Function"", ""CTE""]",Not Available,"This query utilizes a Common Table Expression (CTE) to first calculate the total spending of each customer for the year 2023 by joining the `orders` and `customers` tables. It groups the results by customer name and orders them by the total amount spent in descending order, limiting the results to the top 5 customers","Candidates might forget to include the correct year filter, or they may misjoin the tables resulting in incorrect total calculations. They might also fail to use a CTE correctly, or forget to limit the results to just 5 rows"
82,"You are given two tables: `employees` and `department`. The `employees` table contains columns `employee_id`, `name`, `salary`, and `department_id`. The `department` table contains `department_id` and `department_name`. Write a SQL query to find the average salary of employees in each department. Also, include departments that have no employees in the result with an average salary of `NULL`","SELECT d.department_name, AVG(e.salary) AS average_salary FROM department d LEFT JOIN employees e ON d.department_id = e.department_id GROUP BY d.department_name",unknown,Intermediate,"['Join', 'Aggregate function', 'Data Analysis']",example_query,"This SQL query uses a LEFT JOIN to combine `department` and `employees`, ensuring all departments are included, even those with no employees, while using GROUP BY to calculate the average salary per department","Candidates may forget to use LEFT JOIN, resulting in excluding departments with no employees, or they might misuse aggregate functions without proper grouping","Candidates may forget to use LEFT JOIN, resulting in excluding departments with no employees, or they might misuse aggregate functions without proper grouping"
83,"Given a sales database with a 'sales' table containing 'sale_id', 'product_id', 'customer_id', 'sale_date', and 'amount', and a 'customers' table with 'customer_id', 'customer_name', and 'signup_date', write a SQL query to find the top 5 customers with the highest total sales amount in the last year, who have also signed up in the last two years","WITH total_sales AS (SELECT customer_id, SUM(amount) AS total_amount FROM sales WHERE sale_date >= DATEADD(year, -1, GETDATE()) GROUP BY customer_id) SELECT c.customer_name, ts.total_amount FROM total_sales ts JOIN customers c ON ts.customer_id = c.customer_id WHERE c.signup_date >= DATEADD(year, -2, GETDATE()) ORDER BY ts.total_amount DESC LIMIT 5",SQL,advanced,"Data Analyst, Business Analyst, Aggregate function, Join","WITH total_sales AS (SELECT customer_id, SUM(amount) AS total_amount FROM sales WHERE sale_date >= DATEADD(year, -1, GETDATE()) GROUP BY customer_id) SELECT c.customer_name, ts.total_amount FROM total_sales ts JOIN customers c ON ts.customer_id = c.customer_id WHERE c.signup_date >= DATEADD(year, -2, GETDATE()) ORDER BY ts.total_amount DESC LIMIT 5",Not Available,This query first computes total sales per customer over the last year using a Common Table Expression (CTE). It then joins this result with the customers who signed up in the past two years and orders them by total sales to find the top 5 customers,"Candidates might forget to filter sales by the last year, incorrectly calculate the total sales, or mismanage date conditions"
84,"You are working with a database containing two tables: 'sales' (with columns 'id', 'product_id', 'quantity', 'sale_date') and 'products' (with columns 'id', 'name', 'category'). Your task is to find the top 3 products by total sales quantity for each category in the year 2023. How would you write this SQL query?","WITH RankedSales AS ( SELECT p.category, p.name, SUM(s.quantity) AS total_quantity, ROW_NUMBER() OVER (PARTITION BY p.category ORDER BY SUM(s.quantity) DESC) AS rank FROM sales s JOIN products p ON s.product_id = p.id WHERE s.sale_date BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY p.category, p.name ) SELECT category, name, total_quantity FROM RankedSales WHERE rank <= 3",SQL,unknown,Advanced,"['Window Function', 'Join', 'Aggregate Function', 'CTE', 'Data Analyst']","WITH RankedSales AS ( SELECT p.category, p.name, SUM(s.quantity) AS total_quantity, ROW_NUMBER() OVER (PARTITION BY p.category ORDER BY SUM(s.quantity) DESC) AS rank FROM sales s JOIN products p ON s.product_id = p.id WHERE s.sale_date BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY p.category, p.name ) SELECT category, name, total_quantity FROM RankedSales WHERE rank <= 3",Not Available,This SQL code uses a Common Table Expression (CTE) to first rank products within each category by their total sales quantity using the ROW_NUMBER() function. The outer query then filters these results to only include the top 3 products per category for the year 2023
85,"Given a sales database with tables for `orders`, `customers`, and `products`, write a SQL query to find the top 5 customers based on total revenue generated from their orders. Assume the schema as follows: `orders (order_id, customer_id, product_id, quantity, order_date)`, `customers (customer_id, customer_name)`, and `products (product_id, product_name, price)`. You should show the customer name along with their total revenue","WITH CustomerRevenue AS (SELECT c.customer_name, SUM(o.quantity * p.price) AS total_revenue FROM orders o JOIN customers c ON o.customer_id = c.customer_id JOIN products p ON o.product_id = p.product_id GROUP BY c.customer_name) SELECT customer_name, total_revenue FROM CustomerRevenue ORDER BY total_revenue DESC LIMIT 5",SQL,unknown,Intermediate,"[""Data Analyst"", ""SQL"", ""Aggregate function"", ""Join""]","SELECT c.customer_name, SUM(o.quantity * p.price) AS total_revenue FROM orders o JOIN customers c ON o.customer_id = c.customer_id JOIN products p ON o.product_id = p.product_id GROUP BY c.customer_name ORDER BY total_revenue DESC LIMIT 5",Not Available,"The query uses a Common Table Expression (CTE) to calculate the total revenue for each customer by joining the `orders`, `customers`, and `products` tables, grouping by customer name, and then sorts the results to return the top 5 customers based on total revenue"
86,"You have two tables: 'orders' (order_id, customer_id, order_date, total_amount) and 'customers' (customer_id, customer_name, signup_date). Write a SQL query to find the top 5 customers by total orders amount, including their names and the number of orders they made. Sort the results by total amount in descending order","SELECT c.customer_name, COUNT(o.order_id) AS number_of_orders, SUM(o.total_amount) AS total_spent FROM customers c JOIN orders o ON c.customer_id = o.customer_id GROUP BY c.customer_name ORDER BY total_spent DESC LIMIT 5",SQL,unknown,Intermediate,"Data Analyst, Data Engineer, Aggregate Function, Join","SELECT c.customer_name, COUNT(o.order_id) AS number_of_orders, SUM(o.total_amount) AS total_spent FROM customers c JOIN orders o ON c.customer_id = o.customer_id GROUP BY c.customer_name ORDER BY total_spent DESC LIMIT 5",Not Available,"This query joins the 'customers' and 'orders' tables to match each customer with their orders, aggregates the total order amount and counts the number of orders per customer, and then limits the results to the top 5 customers based on total amount spent"
87,"You are given two tables: `sales` and `products`. The `sales` table contains columns `product_id`, `sale_date`, and `amount`. The `products` table contains `product_id`, `product_name`, and `category`. Write an SQL query to find the total sales amount for each product category for the year 2023. Additionally, show only categories that have total sales greater than $10,000","SELECT p.category, SUM(s.amount) AS total_sales FROM sales s JOIN products p ON s.product_id = p.product_id WHERE YEAR(s.sale_date) = 2023 GROUP BY p.category HAVING SUM(s.amount) > 10000",SQL,unknown,Intermediate,"Data Analyst, Join, Aggregate Function","SELECT p.category, SUM(s.amount) AS total_sales FROM sales s JOIN products p ON s.product_id = p.product_id WHERE YEAR(s.sale_date) = 2023 GROUP BY p.category HAVING SUM(s.amount) > 10000",Not Available,"This query uses a JOIN to combine the `sales` and `products` tables, filters the sales for the year 2023, groups by category, and calculates the total sales amount using SUM, showcasing only the categories with total sales exceeding $10,000"
88,"Given a sales database with a 'sales' table containing columns: 'id', 'product_id', 'quantity', 'date' and a 'products' table containing 'id', 'name', 'category', write a query to find the total quantity sold for each product category where the total quantity sold exceeds 100, ordered by the total quantity in descending order","WITH CategorySales AS (SELECT p.category, SUM(s.quantity) AS total_quantity FROM sales s JOIN products p ON s.product_id = p.id GROUP BY p.category) SELECT category, total_quantity FROM CategorySales WHERE total_quantity > 100 ORDER BY total_quantity DESC",SQL,unknown,Intermediate,"[""Join"", ""Aggregate function"", ""CTE""]",Not Available,"This SQL query uses a Common Table Expression (CTE) named 'CategorySales' to first calculate the total quantity sold for each category by joining the 'sales' and 'products' tables. It then filters the results to only include categories where the total quantity sold exceeds 100, and orders the results in descending order by 'total_quantity'","Candidates might incorrectly use 'HAVING' without 'GROUP BY', forget to join the tables properly, or miscalculate the sum for categories"
89,"Given a sales database with tables for Customers, Orders, and OrderDetails, write a query to find the top 5 customers by total amount spent. Include the customer's name and the total amount spent. Use appropriate joins and aggregate functions","SELECT c.CustomerName, SUM(od.Quantity * od.UnitPrice) AS TotalSpent FROM Customers c JOIN Orders o ON c.CustomerID = o.CustomerID JOIN OrderDetails od ON o.OrderID = od.OrderID GROUP BY c.CustomerName ORDER BY TotalSpent DESC LIMIT 5",SQL,unknown,Intermediate,"Data Analyst, Aggregate function, Join","SELECT c.CustomerName, SUM(od.Quantity * od.UnitPrice) AS TotalSpent FROM Customers c JOIN Orders o ON c.CustomerID = o.CustomerID JOIN OrderDetails od ON o.OrderID = od.OrderID GROUP BY c.CustomerName ORDER BY TotalSpent DESC LIMIT 5",Not Available,"This query joins the Customers, Orders, and OrderDetails tables to calculate the total amount spent by each customer by multiplying quantity by unit price, grouping results by customer name, and ordering them to show the top 5 customers"
90,"You are given two tables: `employees` (with columns: `id`, `name`, `department_id`, `salary`) and `departments` (with columns: `id`, `name`). Write a SQL query to find the average salary of employees in each department but only include departments with an average salary greater than $60,000. Return the result with department names and the average salary","SELECT d.name AS department_name, AVG(e.salary) AS average_salary FROM employees e JOIN departments d ON e.department_id = d.id GROUP BY d.name HAVING AVG(e.salary) > 60000",SQL,unknown,Intermediate,"[""Join"", ""Aggregate Function"", ""Data Analyst""]",Not Available,"This query joins `employees` and `departments` on the department ID, calculates the average salary for each department, groups the results by department name, and includes only those departments where the average salary is above $60,000","Candidates might forget to include the HAVING clause, leading to results for all departments, not just those over the salary threshold"
91,"Given a sales database with tables 'orders' (order_id, customer_id, order_total, order_date) and 'customers' (customer_id, customer_name, region), write a SQL query to find the total sales for each region and the average order total, sorted by total sales in descending order","SELECT c.region, SUM(o.order_total) AS total_sales, AVG(o.order_total) AS average_order_total FROM orders o JOIN customers c ON o.customer_id = c.customer_id GROUP BY c.region ORDER BY total_sales DESC",SQL,unknown,Intermediate,"Data Analyst, Aggregate Function, Join, Business Intelligence","SELECT c.region, SUM(o.order_total) AS total_sales, AVG(o.order_total) AS average_order_total FROM orders o JOIN customers c ON o.customer_id = c.customer_id GROUP BY c.region ORDER BY total_sales DESC",Not Available,"This SQL query joins the 'orders' and 'customers' tables based on customer_id, then aggregates sales data by region, calculating both total and average order values before sorting the results by total sales"
92,"You are given two tables: `sales` with columns `id`, `product_id`, `sale_date`, and `amount`, and `products` with columns `id`, `name`, and `category`. Write a SQL query to find the total sales amount for each product category in the month of January 2023","SELECT p.category, SUM(s.amount) AS total_sales FROM sales s JOIN products p ON s.product_id = p.id WHERE s.sale_date BETWEEN '2023-01-01' AND '2023-01-31' GROUP BY p.category",SQL,unknown,Intermediate,"Data Analyst, Aggregate function, Join","SELECT p.category, SUM(s.amount) AS total_sales FROM sales s JOIN products p ON s.product_id = p.id WHERE s.sale_date BETWEEN '2023-01-01' AND '2023-01-31' GROUP BY p.category",Not Available,"This query joins the `sales` and `products` tables on the product ID, filters sales that occurred within January 2023, and then aggregates the total sales amount by product category"
93,"Given a sales database, write a query to find the top 3 products by total sales for the last quarter. The sales data includes product_id, sale_date, and amount. Assume 'sale_date' is in 'YYYY-MM-DD' format. Use appropriate joins and aggregations to return the product_id and total_sales","WITH product_sales AS (SELECT product_id, SUM(amount) AS total_sales FROM sales WHERE sale_date >= DATE_TRUNC('quarter', CURRENT_DATE - INTERVAL '3 months') AND sale_date < DATE_TRUNC('quarter', CURRENT_DATE) GROUP BY product_id) SELECT product_id, total_sales FROM product_sales ORDER BY total_sales DESC LIMIT 3",SQL,unknown,Intermediate,"[""Data Analyst"", ""SQL"", ""Aggregate function"", ""Join""]","WITH product_sales AS (SELECT product_id, SUM(amount) AS total_sales FROM sales WHERE sale_date >= DATE_TRUNC('quarter', CURRENT_DATE - INTERVAL '3 months') AND sale_date < DATE_TRUNC('quarter', CURRENT_DATE) GROUP BY product_id) SELECT product_id, total_sales FROM product_sales ORDER BY total_sales DESC LIMIT 3",Not Available,This query first creates a Common Table Expression (CTE) called product_sales to aggregate total sales by product for the last quarter and then selects the top 3 products with the highest total sales
94,"You are working with a company database that includes a 'Sales' table recording sales transactions with columns: sale_id, product_id, amount, sale_date, and a 'Products' table with columns: product_id, product_name, category, and price. Write a query to find the total sales amount for each product category for the last year (2022), which should return the category and the total sales amount. Assume that sales data is recorded in the 'Sales' table and that today's date is in 2023","SELECT p.category, SUM(s.amount) AS total_sales 
 FROM Sales s 
 JOIN Products p ON s.product_id = p.product_id 
 WHERE s.sale_date >= '2022-01-01' AND s.sale_date < '2023-01-01' 
 GROUP BY p.category 
 ORDER BY total_sales DESC",SQL,unknown,Intermediate,"[""Data Analyst"", ""Business Intelligence"", ""Join"", ""Aggregate function""]","SELECT p.category, SUM(s.amount) AS total_sales FROM Sales s JOIN Products p ON s.product_id = p.product_id WHERE s.sale_date >= '2022-01-01' AND s.sale_date < '2023-01-01' GROUP BY p.category ORDER BY total_sales DESC",Not Available,"This query aggregates total sales by product category for the year 2022. It joins the Sales and Products tables on product_id and filters sales data to the specified date range, grouping results by category"
95,"You are given two tables: 'employees' with columns 'id', 'name', 'department_id', and 'salary', and 'departments' with columns 'id' and 'department_name'. Write a SQL query to find the average salary of employees in each department, including departments with no employees (showing an average salary of zero)","SELECT d.department_name, COALESCE(AVG(e.salary), 0) AS average_salary FROM departments d LEFT JOIN employees e ON d.id = e.department_id GROUP BY d.department_name",SQL,unknown,Intermediate,"Data Analyst, Join, Aggregate Function","SELECT d.department_name, COALESCE(AVG(e.salary), 0) AS average_salary FROM departments d LEFT JOIN employees e ON d.id = e.department_id GROUP BY d.department_name",Not Available,"This query uses a LEFT JOIN between the 'departments' and 'employees' tables to ensure that all departments are included in the result set, and it uses the COALESCE function to display '0' for departments with no employees"
96,"Given a sales database with two tables, `Sales` and `Products`, write a SQL query to find the total sales amount for each product category for the last quarter. The `Sales` table contains `sale_id`, `product_id`, `sale_date`, and `amount`, while the `Products` table contains `product_id`, `category`, and `product_name. The output should display the `category` and the corresponding `total_sales` sorted in descending order","WITH LastQuarterSales AS (SELECT amount, product_id FROM Sales WHERE sale_date >= DATEADD(quarter, -1, GETDATE())) SELECT p.category, SUM(lq.amount) AS total_sales FROM LastQuarterSales lq JOIN Products p ON lq.product_id = p.product_id GROUP BY p.category ORDER BY total_sales DESC",SQL,unknown,Intermediate,"['Join', 'Aggregate function', 'CTE']","SELECT p.category, SUM(lq.amount) AS total_sales FROM (SELECT amount, product_id FROM Sales WHERE sale_date >= DATEADD(quarter, -1, GETDATE())) lq JOIN Products p ON lq.product_id = p.product_id GROUP BY p.category ORDER BY total_sales DESC",Not Available,This SQL query uses a Common Table Expression (CTE) to create a temporary result set of sales amounts for the last quarter. It then joins this result with the `Products` table to aggregate total sales amounts per category
97,"Given two tables, `employees` (employee_id, name, department_id) and `departments` (department_id, department_name), write a SQL query to find the department that has the highest average salary. Use a third table `salaries` (employee_id, salary) to get the data. Ensure your query handles cases where employees might not have a salary record","WITH avg_salary AS (SELECT e.department_id, AVG(s.salary) as average_salary FROM employees e LEFT JOIN salaries s ON e.employee_id = s.employee_id GROUP BY e.department_id) SELECT d.department_name FROM departments d JOIN avg_salary a ON d.department_id = a.department_id ORDER BY a.average_salary DESC LIMIT 1",SQL,unknown,Advanced,"[""Data Analyst"",""Data Engineer"",""Join"",""Aggregate Function"",""CTE""]",Not Available,"This query first creates a Common Table Expression (CTE) to calculate the average salary for each department, handling the possible absence of salary records using a LEFT JOIN. Then, it selects the department with the highest average salary","Candidates might forget to use LEFT JOIN, resulting in excluding departments without employees. Additionally, they might not handle departments with no salary records appropriately"
98,"You are given two tables: 'employees' and 'departments'. The 'employees' table contains columns 'id', 'name', 'salary', and 'department_id', while the 'departments' table contains 'id' and 'department_name'. Write a SQL query to find the highest-paid employee in each department along with the department name, sorted by department name","WITH RankedEmployees AS (SELECT e.id, e.name, e.salary, d.department_name, RANK() OVER (PARTITION BY e.department_id ORDER BY e.salary DESC) as rank FROM employees e JOIN departments d ON e.department_id = d.id) SELECT id, name, salary, department_name FROM RankedEmployees WHERE rank = 1 ORDER BY department_name",SQL,unknown,Intermediate,"CTE, Join, Window Function","WITH RankedEmployees AS (SELECT e.id, e.name, e.salary, d.department_name, RANK() OVER (PARTITION BY e.department_id ORDER BY e.salary DESC) as rank FROM employees e JOIN departments d ON e.department_id = d.id) SELECT id, name, salary, department_name FROM RankedEmployees WHERE rank = 1 ORDER BY department_name",Not Available,This SQL query uses a Common Table Expression (CTE) to first rank employees within their departments based on salary. It then selects the highest-ranked employee from each department and orders the results by department name
99,"You are working with a sales database that contains two tables: 'Orders' and 'Customers'. The 'Orders' table has columns: OrderID, OrderDate, CustomerID, and Amount. The 'Customers' table has columns: CustomerID, CustomerName, and Country. Write a SQL query to find the total order amount per customer for customers located in 'USA', and return the CustomerName, OrderCount (number of orders), and TotalAmount (sum of order amounts)","SELECT c.CustomerName, COUNT(o.OrderID) AS OrderCount, SUM(o.Amount) AS TotalAmount FROM Customers c LEFT JOIN Orders o ON c.CustomerID = o.CustomerID WHERE c.Country = 'USA' GROUP BY c.CustomerName",SQL,unknown,Intermediate,"['Data Analyst', 'SQL', 'Join', 'Aggregation']","SELECT c.CustomerName, COUNT(o.OrderID) AS OrderCount, SUM(o.Amount) AS TotalAmount FROM Customers c LEFT JOIN Orders o ON c.CustomerID = o.CustomerID WHERE c.Country = 'USA' GROUP BY c.CustomerName",Not Available,"The query retrieves the CustomerName, along with the count of their orders and the total order amount for customers located in the USA, by joining the Orders and Customers tables"
100,"Given a table `sales` with columns `sale_id`, `product_id`, `sale_date`, and `amount`, and a table `products` with columns `product_id`, `product_name`, and `category`, write a SQL query to find the total sales amount for each product category for the last month. Return the category name and the total sales amount, and order the results by total sales in descending order","WITH last_month AS (SELECT * FROM sales WHERE sale_date >= DATEADD(month, -1, GETDATE())) SELECT p.category, SUM(lm.amount) AS total_sales FROM last_month lm JOIN products p ON lm.product_id = p.product_id GROUP BY p.category ORDER BY total_sales DESC",SQL,unknown,Intermediate,"Data Analyst, Aggregate Function, Join","SELECT p.category, SUM(lm.amount) AS total_sales FROM (SELECT * FROM sales WHERE sale_date >= DATEADD(month, -1, GETDATE())) lm JOIN products p ON lm.product_id = p.product_id GROUP BY p.category ORDER BY total_sales DESC",Not Available,"This query first extracts the `sales` records from the last month using a Common Table Expression (CTE), then joins it with the `products` table to calculate the total sales amount for each product category, and finally orders the results by total sales amount in descending order"
101,"Given a sales database containing customer orders and a customer table, write a query to find the total sales per customer along with the average order value, making sure to filter out customers who have placed fewer than 2 orders. Additionally, sort the results by total sales in descending order","SELECT c.customer_id, SUM(o.amount) AS total_sales, AVG(o.amount) AS average_order_value FROM customers c JOIN orders o ON c.customer_id = o.customer_id GROUP BY c.customer_id HAVING COUNT(o.order_id) >= 2 ORDER BY total_sales DESC",SQL,unknown,Intermediate,"['Data Analyst', 'Data Engineer', 'JOIN', 'Aggregate function', 'Group By']","SELECT c.customer_id, SUM(o.amount) AS total_sales, AVG(o.amount) AS average_order_value FROM customers c JOIN orders o ON c.customer_id = o.customer_id GROUP BY c.customer_id HAVING COUNT(o.order_id) >= 2 ORDER BY total_sales DESC",Not Available,"This query joins the customers and orders tables, aggregates sales data for each customer, and filters those with fewer than 2 orders, while ordering the results by the total sales"
102,"You are given two tables: 'employees' with columns (id, name, department_id, salary) and 'departments' with columns (id, department_name). Write a SQL query to find the top 3 highest-paid employees in each department along with their department name","WITH RankedSalaries AS (SELECT e.id, e.name, d.department_name, e.salary, ROW_NUMBER() OVER (PARTITION BY e.department_id ORDER BY e.salary DESC) as rn FROM employees e JOIN departments d ON e.department_id = d.id) SELECT id, name, department_name, salary FROM RankedSalaries WHERE rn <= 3 ORDER BY department_name, salary DESC",SQL,unknown,Advanced,"[""Data Analyst"", ""Data Engineer"", ""Business Intelligence"", ""Join"", ""Window Function""]","SELECT e.id, e.name, d.department_name, e.salary FROM employees e JOIN departments d ON e.department_id = d.id",Not Available,This SQL code uses a Common Table Expression (CTE) to rank employees by salary within their respective departments using the ROW_NUMBER() window function. Then it selects the top 3 employees per department based on that ranking
103,"You have two tables, 'Sales' and 'Products'. The 'Sales' table contains the columns 'SaleID', 'ProductID', 'Quantity', and 'SaleDate'. The 'Products' table contains 'ProductID', 'ProductName', and 'Price'. Write a SQL query to find the total sales amount for each product in the month of January 2023. The total sales amount should be calculated as 'Quantity * Price', and the output should include 'ProductName' and the 'TotalSalesAmount' sorted by 'TotalSalesAmount' in descending order","SELECT p.ProductName, SUM(s.Quantity * p.Price) AS TotalSalesAmount
FROM Sales s
JOIN Products p ON s.ProductID = p.ProductID
WHERE s.SaleDate >= '2023-01-01' AND s.SaleDate < '2023-02-01'
GROUP BY p.ProductName
ORDER BY TotalSalesAmount DESC",SQL,unknown,Intermediate,"['Join', 'Aggregate function', 'Data Analysis']","SELECT p.ProductName, SUM(s.Quantity * p.Price) AS TotalSalesAmount FROM Sales s JOIN Products p ON s.ProductID = p.ProductID WHERE s.SaleDate >= '2023-01-01' AND s.SaleDate < '2023-02-01' GROUP BY p.ProductName ORDER BY TotalSalesAmount DESC",Not Available,"This query joins the 'Sales' and 'Products' tables on 'ProductID' and calculates the total sales amount for each product sold in January 2023 by summing the product of 'Quantity' and 'Price', grouped by 'ProductName'"
104,"You are given two tables: 'Sales' and 'Products'. The 'Sales' table includes columns: 'sale_id', 'product_id', 'quantity_sold', and 'sale_date'. The 'Products' table includes: 'product_id', 'product_name', and 'price'. Write a SQL query to find the total revenue for each product, including the product name and the number of sales for each product, ordered by total revenue in descending order","SELECT p.product_name, SUM(s.quantity_sold * p.price) AS total_revenue, COUNT(s.sale_id) AS number_of_sales FROM Sales s JOIN Products p ON s.product_id = p.product_id GROUP BY p.product_name ORDER BY total_revenue DESC",SQL,intermediate,"[""Data Analyst"", ""Business Intelligence"", ""Join"", ""Aggregate function""]",Not Available,"The query joins the Sales and Products tables on the product_id, calculates total revenue by summing the products of quantity_sold and price, and counts the number of sales per product. It groups the results by product name and sorts them in descending order of revenue",Candidates might forget to include GROUP BY or might incorrectly aggregate without proper grouping. Some might also omit COUNT(s.sale_id) leading to incomplete results,"[""What are window functions and how would you use them?"", ""Explain how to optimize this query for large datasets."", ""How would you modify the query to list products with zero sales?""]
```"
105,"You have two tables: `orders` (with columns `order_id`, `customer_id`, `order_date`, `total_amount`) and `customers` (with columns `customer_id`, `customer_name`, `join_date`). Write a SQL query to find the top 5 customers who spent the most in total, showing their `customer_name`, total amount spent, and the year they joined the company. Also, include only those customers who joined before 2020","SELECT c.customer_name, SUM(o.total_amount) AS total_spent, EXTRACT(YEAR FROM c.join_date) AS join_year FROM customers c JOIN orders o ON c.customer_id = o.customer_id WHERE c.join_date < '2020-01-01' GROUP BY c.customer_name, c.join_date ORDER BY total_spent DESC LIMIT 5",SQL,unknown,Intermediate,"Data Analyst, Aggregate Function, Join","SELECT c.customer_name, SUM(o.total_amount) AS total_spent, EXTRACT(YEAR FROM c.join_date) AS join_year FROM customers c JOIN orders o ON c.customer_id = o.customer_id WHERE c.join_date < '2020-01-01' GROUP BY c.customer_name, c.join_date ORDER BY total_spent DESC LIMIT 5",Not Available,"This query aggregates the total spending of customers who joined before 2020 by joining the `customers` and `orders` tables on `customer_id`, then groups the results by `customer_name` and format the output to list the top 5"
106,"Given a table `employees` with columns `id`, `name`, `department_id`, and `salary`, and a `departments` table with `department_id` and `department_name`, write a query to find the department names along with the average salary of employees in each department, but only include departments that have more than 5 employees","WITH dept_avg AS (SELECT d.department_name, AVG(e.salary) AS avg_salary FROM departments d JOIN employees e ON d.department_id = e.department_id GROUP BY d.department_name HAVING COUNT(e.id) > 5) SELECT * FROM dept_avg",SQL,unknown,Intermediate,"Data Analyst, Aggregate Function, Join","WITH dept_avg AS (SELECT d.department_name, AVG(e.salary) AS avg_salary FROM departments d JOIN employees e ON d.department_id = e.department_id GROUP BY d.department_name HAVING COUNT(e.id) > 5) SELECT * FROM dept_avg",Not Available,"This query uses a Common Table Expression (CTE) to calculate the average salary per department while filtering for departments with more than 5 employees, and then selects the results from the CTE"
107,"Suppose you have two tables: `employees` and `departments`. The `employees` table contains the columns: `employee_id`, `name`, `salary`, and `department_id`. The `departments` table contains `department_id` and `department_name`. Write a SQL query to find the average salary of employees in each department and return the `department_name` along with the average salary. Additionally, show only those departments where the average salary is higher than $60,000","SELECT d.department_name, AVG(e.salary) as average_salary FROM employees e JOIN departments d ON e.department_id = d.department_id GROUP BY d.department_name HAVING AVG(e.salary) > 60000",SQL,unknown,Intermediate,"['Data Analyst', 'Data Engineer', 'Aggregate function', 'Join']","SELECT d.department_name, AVG(e.salary) as average_salary FROM employees e JOIN departments d ON e.department_id = d.department_id GROUP BY d.department_name HAVING AVG(e.salary) > 60000",Not Available,"This query joins the `employees` table with the `departments` table to calculate the average salary of employees in each department and filters the results to show only those departments where the average salary exceeds $60,000"
108,"Given a sales table with columns for order_id, product_id, quantity, price and a products table with product_id, product_name, and category, can you write an SQL query to find the total revenue (quantity * price) for each product category, only including categories where total revenue exceeds $1,000?","SELECT p.category, SUM(s.quantity * s.price) AS total_revenue FROM sales s JOIN products p ON s.product_id = p.product_id GROUP BY p.category HAVING SUM(s.quantity * s.price) > 1000",SQL,unknown,Intermediate,"Join, Aggregate Function, GROUP BY, HAVING","SELECT p.category, SUM(s.quantity * s.price) AS total_revenue FROM sales s JOIN products p ON s.product_id = p.product_id GROUP BY p.category HAVING SUM(s.quantity * s.price) > 1000",Not Available,"This query first joins the sales and products tables to combine relevant data. It then calculates the total revenue for each category by multiplying quantity by price, grouping the results by category, and filtering the groups to keep only those with total revenues greater than $1,000"
109,"You are given two tables: 'employees' and 'departments'. The 'employees' table contains employee_id, employee_name, department_id, salary, and the 'departments' table contains department_id and department_name. Write a SQL query to find the total salary paid in each department and rank the departments based on this total salary in descending order. Only include departments with a total salary greater than $50,000","WITH DepartmentSalary AS ( SELECT d.department_name, SUM(e.salary) AS total_salary FROM employees e JOIN departments d ON e.department_id = d.department_id GROUP BY d.department_name HAVING SUM(e.salary) > 50000 ) SELECT department_name, total_salary, RANK() OVER (ORDER BY total_salary DESC) AS salary_rank FROM DepartmentSalary",SQL,unknown,Intermediate,"[""Data Analyst"", ""Business Intelligence"", ""Join"", ""Aggregation"", ""Window Functions""]",Not Available,"The query uses a Common Table Expression (CTE) to first calculate the total salary per department and filters out those that do not exceed $50,000. Then it ranks the remaining departments by total salary using the RANK() window function",Candidates may forget to include the HAVING clause to filter departments or might accidentally rank the departments without summing up the salaries first
110,"You have two tables, `sales` (with columns: `sale_id`, `employee_id`, `amount`, `sale_date`) and `employees` (with columns: `employee_id`, `name`, `department_id`). Write a SQL query to find the total sales amount per employee for the year 2022, and also display each employee's name and department. If an employee made no sales in 2022, they should still appear in the results with a total sales amount of zero","SELECT e.employee_id, e.name, e.department_id, COALESCE(SUM(s.amount), 0) AS total_sales FROM employees e LEFT JOIN sales s ON e.employee_id = s.employee_id AND YEAR(s.sale_date) = 2022 GROUP BY e.employee_id, e.name, e.department_id ORDER BY total_sales DESC",SQL,unknown,Intermediate,"['LEFT JOIN', 'Aggregate function', 'Data Analysis']","SELECT e.employee_id, e.name, e.department_id, COALESCE(SUM(s.amount), 0) AS total_sales FROM employees e LEFT JOIN sales s ON e.employee_id = s.employee_id AND YEAR(s.sale_date) = 2022 GROUP BY e.employee_id, e.name, e.department_id ORDER BY total_sales DESC",Not Available,This query uses a LEFT JOIN to include all employees and calculates the total sales for each employee in 2022. The COALESCE function ensures that employees without sales in that year show a total of zero. Aggregation and group by clauses are used to summarize the sales data
111,"You are tasked with generating a report showing the total sales for each product category, including only those categories that have made sales exceeding $10,000 for the current year. The data is housed in two tables: `sales` (with columns `sale_id`, `product_id`, `amount`, `sale_date`) and `products` (with columns `product_id`, `category`). Write an SQL query to achieve this","WITH category_sales AS (SELECT p.category, SUM(s.amount) AS total_sales FROM sales s JOIN products p ON s.product_id = p.product_id WHERE YEAR(s.sale_date) = YEAR(CURRENT_DATE) GROUP BY p.category) SELECT category, total_sales FROM category_sales WHERE total_sales > 10000",SQL,unknown,Advanced,"Data Analyst, Business Intelligence, Aggregate function, Join, CTE","WITH category_sales AS (SELECT p.category, SUM(s.amount) AS total_sales FROM sales s JOIN products p ON s.product_id = p.product_id WHERE YEAR(s.sale_date) = YEAR(CURRENT_DATE) GROUP BY p.category) SELECT category, total_sales FROM category_sales WHERE total_sales > 10000",Not Available,"This query uses a Common Table Expression (CTE) to first calculate the total sales per category for the current year and then filters the results to include only those categories with total sales exceeding $10,000"
112,"You are given two tables: 'employees' (with columns 'employee_id', 'name', 'department_id', and 'salary') and 'departments' (with 'department_id' and 'department_name'). Write a SQL query to find the average salary of employees for each department, and only include departments where the average salary is above 50,000. Order the results by average salary in descending order","SELECT d.department_name, AVG(e.salary) AS average_salary FROM employees e JOIN departments d ON e.department_id = d.department_id GROUP BY d.department_name HAVING AVG(e.salary) > 50000 ORDER BY average_salary DESC",SQL,unknown,Intermediate,"Data Analyst, Aggregate function, Join","SELECT d.department_name, AVG(e.salary) AS average_salary FROM employees e JOIN departments d ON e.department_id = d.department_id GROUP BY d.department_name HAVING AVG(e.salary) > 50000 ORDER BY average_salary DESC",Not Available,"This query joins the 'employees' and 'departments' tables on 'department_id', calculates the average salary per department, filters the results to only include departments with an average salary greater than 50,000, and orders the results by average salary in descending order"
113,"You are tasked with analyzing sales data from a company's database. Consider two tables: `sales` (with columns: `sale_id`, `product_id`, `quantity`, `sale_date`) and `products` (with columns: `product_id`, `product_name`, `category`, `price`). Write a SQL query to find the total revenue generated for each product category in the year 2022. Additionally, list the product categories in descending order of total revenue","SELECT p.category, SUM(s.quantity * p.price) AS total_revenue FROM sales s JOIN products p ON s.product_id = p.product_id WHERE YEAR(s.sale_date) = 2022 GROUP BY p.category ORDER BY total_revenue DESC",SQL,unknown,Intermediate,"Data Analyst, Join, Aggregate function","SELECT p.category, SUM(s.quantity * p.price) AS total_revenue FROM sales s JOIN products p ON s.product_id = p.product_id WHERE YEAR(s.sale_date) = 2022 GROUP BY p.category ORDER BY total_revenue DESC",Not Available,"The query joins the `sales` and `products` tables on `product_id`, calculates the total revenue for each category by multiplying `quantity` by `price`, and filters the results for sales occurring in 2022 before grouping by category and ordering the results in descending order of total revenue"
114,"You have a database with two tables: 'sales' and 'products'. The 'sales' table contains information about product sales, including 'sale_id', 'product_id', 'quantity', and 'sale_date'. The 'products' table includes 'product_id', 'product_name', and 'price'. Write a SQL query to find the total revenue generated from each product in the year 2022, and return the product name along with the total revenue, sorted by total revenue in descending order","SELECT p.product_name, SUM(s.quantity * p.price) AS total_revenue FROM sales s JOIN products p ON s.product_id = p.product_id WHERE YEAR(s.sale_date) = 2022 GROUP BY p.product_name ORDER BY total_revenue DESC",SQL,unknown,Intermediate,"Data Analyst, Join, Aggregation","SELECT p.product_name, SUM(s.quantity * p.price) AS total_revenue FROM sales s JOIN products p ON s.product_id = p.product_id WHERE YEAR(s.sale_date) = 2022 GROUP BY p.product_name ORDER BY total_revenue DESC",Not Available,"The query calculates total revenue by multiplying the quantity sold by the price of each product for sales occurring in 2022, grouping the results by product name, and ordering them in descending order of revenue"
115,"You are tasked with analyzing employee salaries across different departments of a company. The dataset consists of two tables: 'employees' (with columns 'id', 'name', 'department_id', 'salary') and 'departments' (with columns 'id', 'department_name'). Write an SQL query that finds the average salary by department, showing the department name and the average salary, but only for departments where the average salary exceeds 70000. Sort the result by average salary in descending order","SELECT d.department_name, AVG(e.salary) AS average_salary FROM employees e JOIN departments d ON e.department_id = d.id GROUP BY d.department_name HAVING AVG(e.salary) > 70000 ORDER BY average_salary DESC",SQL,unknown,Intermediate,"Join, Aggregate function, Group By, Having","SELECT d.department_name, AVG(e.salary) AS average_salary FROM employees e JOIN departments d ON e.department_id = d.id GROUP BY d.department_name HAVING AVG(e.salary) > 70000 ORDER BY average_salary DESC",Not Available,"This query calculates the average salary per department by joining the 'employees' and 'departments' tables, groups the results by department name, filters departments with an average salary greater than 70,000 using the HAVING clause, and orders the results by average salary descending"
116,"You are tasked with analyzing sales data from an e-commerce platform. You have two tables: `Orders` with columns `OrderID`, `CustomerID`, `OrderDate`, and `TotalAmount`, and `Customers` with columns `CustomerID`, `CustomerName`, and `JoinDate`. Write an SQL query to find the total sales amount per customer as well as the first order date for each customer. Additionally, only include customers who joined before '2023-01-01' and have made at least 3 orders","SELECT c.CustomerID, c.CustomerName, SUM(o.TotalAmount) AS TotalSales, MIN(o.OrderDate) AS FirstOrderDate
FROM Customers c
JOIN Orders o ON c.CustomerID = o.CustomerID
WHERE c.JoinDate < '2023-01-01'
GROUP BY c.CustomerID, c.CustomerName
HAVING COUNT(o.OrderID) >= 3",SQL,unknown,Intermediate,"Data Analyst, Aggregate functions, Join","SELECT c.CustomerID, c.CustomerName, SUM(o.TotalAmount) AS TotalSales, MIN(o.OrderDate) AS FirstOrderDate FROM Customers c JOIN Orders o ON c.CustomerID = o.CustomerID WHERE c.JoinDate < '2023-01-01' GROUP BY c.CustomerID, c.CustomerName HAVING COUNT(o.OrderID) >= 3",Not Available,"This query joins the `Customers` and `Orders` tables to retrieve total sales and the first order date per customer, filtered by joining conditions and aggregate functions"
117,"You have two tables: 'employees' (with columns: id, name, department_id) and 'departments' (with columns: id, department_name). Write a query to find the number of employees in each department, showing the department name and the employee count, and ensure departments with no employees are also listed","SELECT d.department_name, COUNT(e.id) AS employee_count FROM departments d LEFT JOIN employees e ON d.id = e.department_id GROUP BY d.department_name",SQL,unknown,Intermediate,"['Join', 'Aggregate function', 'LEFT JOIN']","SELECT d.department_name, COUNT(e.id) AS employee_count FROM departments d LEFT JOIN employees e ON d.id = e.department_id GROUP BY d.department_name",Not Available,"This query uses a LEFT JOIN to connect the 'departments' table with the 'employees' table, allowing us to count employees in each department while still including departments that have no employees, thus returning a complete list of departments"
118,"You are given two tables: 'Employees' (with columns: EmployeeID, Name, DepartmentID, Salary) and 'Departments' (with columns: DepartmentID, DepartmentName). Write a SQL query to find the average salary of employees in each department, but only for departments that have more than 3 employees","SELECT d.DepartmentName, AVG(e.Salary) AS AverageSalary FROM Employees e JOIN Departments d ON e.DepartmentID = d.DepartmentID GROUP BY d.DepartmentName HAVING COUNT(e.EmployeeID) > 3",SQL,unknown,Intermediate,"['Join', 'Aggregate Function', 'Group By', 'Having']","SELECT d.DepartmentName, AVG(e.Salary) AS AverageSalary FROM Employees e JOIN Departments d ON e.DepartmentID = d.DepartmentID GROUP BY d.DepartmentName HAVING COUNT(e.EmployeeID) > 3",Not Available,"This query joins the Employees and Departments tables, groups the results by department name, and calculates the average salary for each department. The HAVING clause filters the groups to include only those with more than 3 employees"
119,"You are given two tables: `employees` (with columns `employee_id`, `name`, `department_id`, and `salary`) and `departments` (with columns `department_id` and `department_name`). Write a SQL query to find the average salary of employees in each department, and return the department name along with the average salary. Only include departments that have more than 5 employees","SELECT d.department_name, AVG(e.salary) AS avg_salary FROM departments d JOIN employees e ON d.department_id = e.department_id GROUP BY d.department_name HAVING COUNT(e.employee_id) > 5",SQL,unknown,Intermediate,"[""Join"", ""Aggregate function"", ""GROUP BY"", ""HAVING""]",Not Available,"This query joins the `departments` and `employees` tables, calculates the average salary per department, and filters for departments with more than 5 employees using the HAVING clause",Candidates might forget to use `COUNT` in the `HAVING` clause or may not properly join the tables
120,"Given a table named 'sales' with the columns 'order_id', 'customer_id', 'order_date', and 'amount', and a table named 'customers' with 'customer_id', 'customer_name', and 'customer_since', write an SQL query to find the total sales amount for each customer, along with their name, and filter out customers whose total sales amount is less than $1000. Sort the results by total sales amount in descending order","SELECT c.customer_name, SUM(s.amount) AS total_sales FROM customers c JOIN sales s ON c.customer_id = s.customer_id GROUP BY c.customer_name HAVING SUM(s.amount) >= 1000 ORDER BY total_sales DESC",SQL,unknown,Intermediate,"Data Analyst, Join, Aggregate function","SELECT customer_name, SUM(amount) AS total_sales FROM customers JOIN sales ON customers.customer_id = sales.customer_id GROUP BY customer_name HAVING SUM(amount) >= 1000 ORDER BY total_sales DESC",Not Available,"This query first joins the 'customers' and 'sales' tables on the 'customer_id' field, calculates the total sales for each customer, and filters results to include only those with total sales of $1000 or more, after which it sorts the results by total sales in descending order"
121,"You are given two tables: `employees` (with columns `id`, `name`, and `department_id`) and `departments` (with columns `id` and `department_name`). Write a SQL query to find the total number of employees in each department, including departments without any employees, and sort the results by the department name","SELECT d.department_name, COUNT(e.id) AS employee_count FROM departments d LEFT JOIN employees e ON d.id = e.department_id GROUP BY d.department_name ORDER BY d.department_name",SQL,intermediate,"['Join', 'Aggregate function', 'Data Analysis']","SELECT d.department_name, COUNT(e.id) AS employee_count FROM departments d LEFT JOIN employees e ON d.id = e.department_id GROUP BY d.department_name ORDER BY d.department_name",Not Available,"This query uses a LEFT JOIN to ensure that all departments are included, even those without employees. It then groups the results by department name and counts the number of employees in each","Candidates may forget to use COUNT with a condition (e.g., COUNT(*) instead of COUNT(e.id)), leading to incorrect totals, or they could forget the LEFT JOIN, which would exclude departments with no employees"
122,"You are given two tables: `employees` (columns: `id`, `name`, `manager_id`) and `sales` (columns: `employee_id`, `sale_amount`). Write an SQL query to find the total sales made by each manager, including those managers who have not made any sales, along with their names","SELECT e.manager_id, e.name, COALESCE(SUM(s.sale_amount), 0) AS total_sales FROM employees e LEFT JOIN sales s ON e.id = s.employee_id GROUP BY e.manager_id, e.name",SQL,unknown,Intermediate,"Data Analyst, SQL, Join, Aggregate function","SELECT e.manager_id, e.name, COALESCE(SUM(s.sale_amount), 0) AS total_sales FROM employees e LEFT JOIN sales s ON e.id = s.employee_id GROUP BY e.manager_id, e.name",Not Available,The query uses a LEFT JOIN to ensure that we get all managers from the `employees` table even if they have no sales associated with them. The COALESCE function is used to replace NULL values from the sales calculation with 0
123,"You are given two tables: `employees` and `departments`. The `employees` table contains columns: `id`, `name`, `salary`, `department_id`, while the `departments` table includes `id`, `department_name`. Write a SQL query to find the department name and the average salary of employees in each department. Exclude any departments with an average salary below $50,000","SELECT d.department_name, AVG(e.salary) AS average_salary FROM employees e JOIN departments d ON e.department_id = d.id GROUP BY d.department_name HAVING AVG(e.salary) >= 50000",SQL,unknown,Intermediate,"['Join', 'Aggregate function', 'Data Analyst', 'Business Intelligence']","SELECT d.department_name, AVG(e.salary) AS average_salary FROM employees e JOIN departments d ON e.department_id = d.id GROUP BY d.department_name HAVING AVG(e.salary) >= 50000",Not Available,"This query joins the `employees` and `departments` tables on the department ID and calculates the average salary for each department while filtering out those departments where the average is below $50,000"
124,"Given two tables, `employees` and `departments`, where `employees` includes `id`, `name`, `department_id`, and `salary` and `departments` includes `id` and `name`, write a query to find the average salary of employees in each department along with the department name. Only include departments that have more than 5 employees","SELECT d.name AS department_name, AVG(e.salary) AS average_salary FROM employees e JOIN departments d ON e.department_id = d.id GROUP BY d.name HAVING COUNT(e.id) > 5",SQL,unknown,Intermediate,"['Join', 'Aggregate function', 'HAVING']","SELECT d.name AS department_name, AVG(e.salary) AS average_salary FROM employees e JOIN departments d ON e.department_id = d.id GROUP BY d.name HAVING COUNT(e.id) > 5",Not Available,"This query joins the `employees` and `departments` tables on the department ID, then calculates the average salary for each department while ensuring that only departments with more than 5 employees are included by using the `HAVING` clause after grouping the results by department name"
125,"You are given two tables: `sales` (with columns `sale_id`, `product_id`, `amount`, `sale_date`) and `products` (with columns `product_id`, `product_name`, `category`). Write a SQL query to find the total sales amount for each product category for the year 2023, and display the category name along with the total sales amount, sorted in descending order of sales amount","SELECT p.category, SUM(s.amount) AS total_sales FROM sales s JOIN products p ON s.product_id = p.product_id WHERE YEAR(s.sale_date) = 2023 GROUP BY p.category ORDER BY total_sales DESC",SQL,intermediate,"[""Data Analyst"", ""Business Intelligence"", ""Join"", ""Aggregate function""]",Not Available,"This SQL query joins the `sales` and `products` tables to filter sales records from the year 2023, groups them by product category, and sums the sales amount for each category, sorting them in descending order","Common mistakes include: forgetting to join the tables correctly, not grouping by category, or making errors in the date filter function",What are the sales trends over several years?
126,"Given a sales database with two tables, `sales` (columns: `id`, `product_id`, `quantity`, `sale_date`) and `products` (columns: `id`, `name`, `category`, `price`), write a query to find the total revenue generated from each product category for the year 2023","SELECT p.category, SUM(s.quantity * p.price) AS total_revenue FROM sales s JOIN products p ON s.product_id = p.id WHERE YEAR(s.sale_date) = 2023 GROUP BY p.category",SQL,unknown,Intermediate,"Data Analyst, SQL, Join, Aggregate function","SELECT p.category, SUM(s.quantity * p.price) AS total_revenue FROM sales s JOIN products p ON s.product_id = p.id WHERE YEAR(s.sale_date) = 2023 GROUP BY p.category",Not Available,"This query joins the `sales` and `products` tables on `product_id`, filters for sales in 2023, and aggregates the revenue by product category"
127,"Given a sales database, which includes 'orders' (order_id, customer_id, order_date, total) and 'customers' (customer_id, customer_name, join_date), write a SQL query to find the top 5 customers by total order amount, and also, provide their join date sorted by the total order amount in descending order. If two customers have the same total order amount, order them by their join date in ascending order","SELECT c.customer_id, c.customer_name, c.join_date, SUM(o.total) AS total_order_amount FROM customers c JOIN orders o ON c.customer_id = o.customer_id GROUP BY c.customer_id, c.customer_name, c.join_date ORDER BY total_order_amount DESC, c.join_date ASC LIMIT 5",SQL,unknown,Intermediate,"Data Analyst, SQL, Join, Aggregate Function","SELECT c.customer_id, c.customer_name, c.join_date, SUM(o.total) AS total_order_amount FROM customers c JOIN orders o ON c.customer_id = o.customer_id GROUP BY c.customer_id, c.customer_name, c.join_date ORDER BY total_order_amount DESC, c.join_date ASC LIMIT 5",Not Available,"This SQL query selects customer details and their total order amounts from a sales database. It performs a join between the 'customers' and 'orders' tables, aggregates order totals for each customer, and then orders the results to find the top 5 customers based on total order amount. The join date is also factored into the ordering if totals are tied"
128,"Given two tables: `employees` (employee_id, name, department_id, salary) and `departments` (department_id, department_name), write a query to find the highest paid employee in each department","WITH max_salaries AS (SELECT department_id, MAX(salary) AS max_salary FROM employees GROUP BY department_id) SELECT e.name, d.department_name, e.salary FROM employees e JOIN departments d ON e.department_id = d.department_id JOIN max_salaries m ON e.department_id = m.department_id AND e.salary = m.max_salary",SQL,unknown,Intermediate,"Data Analyst, Join, Aggregate function, CTE","WITH max_salaries AS (SELECT department_id, MAX(salary) AS max_salary FROM employees GROUP BY department_id) SELECT e.name, d.department_name, e.salary FROM employees e JOIN departments d ON e.department_id = d.department_id JOIN max_salaries m ON e.department_id = m.department_id AND e.salary = m.max_salary",Not Available,This query creates a Common Table Expression (CTE) to determine the maximum salary in each department and then joins this data back to the employees and departments tables to extract the relevant employee names and department names
129,"You have a `sales` table that records the `order_id`, `product_id`, `customer_id`, `order_date`, and `amount`. You also have a `customers` table, which contains `customer_id`, `customer_name`, and `signup_date`. Write a SQL query to find the total amount spent by each customer who signed up in the last year, along with their names","WITH recent_customers AS ( SELECT customer_id FROM customers WHERE signup_date >= DATEADD(YEAR, -1, GETDATE()) ) SELECT c.customer_name, SUM(s.amount) AS total_spent FROM recent_customers rc INNER JOIN sales s ON rc.customer_id = s.customer_id INNER JOIN customers c ON rc.customer_id = c.customer_id GROUP BY c.customer_name",SQL,unknown,Intermediate,"Data Analyst, Aggregate Function, Join, CTE","SELECT c.customer_name, SUM(s.amount) AS total_spent FROM recent_customers rc INNER JOIN sales s ON rc.customer_id = s.customer_id INNER JOIN customers c ON rc.customer_id = c.customer_id GROUP BY c.customer_name",Not Available,This SQL query uses a Common Table Expression (CTE) to first identify recent customers who signed up within the last year. It then joins this result with the sales and customer tables to aggregate total spending by these customers
130,"You are given two tables: 'employees' with columns 'id', 'name', and 'manager_id' (where 'manager_id' points to the 'id' of another employee), and 'sales' with columns 'employee_id', 'sale_date', and 'amount'. Write a SQL query to find the total sales amount made by each employee, including their manager's name, sorted by total sales in descending order","SELECT e.name AS employee_name, e.manager_id, m.name AS manager_name, SUM(s.amount) AS total_sales FROM employees e LEFT JOIN employees m ON e.manager_id = m.id LEFT JOIN sales s ON e.id = s.employee_id GROUP BY e.name, e.manager_id, m.name ORDER BY total_sales DESC",SQL,unknown,Intermediate,"Data Analyst, SQL, Join, Aggregation","SELECT e.name AS employee_name, e.manager_id, m.name AS manager_name, SUM(s.amount) AS total_sales FROM employees e LEFT JOIN employees m ON e.manager_id = m.id LEFT JOIN sales s ON e.id = s.employee_id GROUP BY e.name, e.manager_id, m.name ORDER BY total_sales DESC",Not Available,"This query calculates the total sales for each employee, joins the 'employees' table with itself for accessing manager names and further joins with the 'sales' table to sum up the sales amounts. It groups the results by employee and manager names and orders by total sales in descending order"
131,"You are given two tables: `employees` (with columns `id`, `name`, `department_id`, and `salary`) and `departments` (with columns `id` and `department_name`). Write an SQL query to find the department with the highest average salary. If there are ties, return all departments with the highest average salary","WITH DepartmentAverage AS (SELECT d.department_name, AVG(e.salary) AS avg_salary FROM departments d JOIN employees e ON d.id = e.department_id GROUP BY d.department_name) SELECT department_name FROM DepartmentAverage WHERE avg_salary = (SELECT MAX(avg_salary) FROM DepartmentAverage)",SQL,unknown,Advanced,"Join, Aggregate function, CTE","WITH DepartmentAverage AS (SELECT d.department_name, AVG(e.salary) AS avg_salary FROM departments d JOIN employees e ON d.id = e.department_id GROUP BY d.department_name) SELECT department_name FROM DepartmentAverage WHERE avg_salary = (SELECT MAX(avg_salary) FROM DepartmentAverage)",Not Available,The query first calculates the average salary for each department using a Common Table Expression (CTE). It then selects the department(s) that have the maximum average salary by comparing it to the maximum found in the CTE
132,"You have a sales database with two tables: `sales` (containing `sale_id`, `product_id`, `sale_date`, `amount`) and `products` (containing `product_id`, `product_name`, `category`). Write a SQL query to find the total sales amount for each product category for the year 2023, and return the category name and the total sales amount ordered from highest to lowest","SELECT p.category, SUM(s.amount) AS total_sales FROM sales s JOIN products p ON s.product_id = p.product_id WHERE YEAR(s.sale_date) = 2023 GROUP BY p.category ORDER BY total_sales DESC",SQL,unknown,Intermediate,"Data Analyst, Aggregate function, Join","SELECT p.category, SUM(s.amount) AS total_sales FROM sales s JOIN products p ON s.product_id = p.product_id WHERE YEAR(s.sale_date) = 2023 GROUP BY p.category ORDER BY total_sales DESC",Not Available,"This query joins the `sales` and `products` tables on `product_id`, filters the sales for the year 2023, groups the results by product category, and sums the amounts to find total sales for each category, finally ordering the results by total sales amount"
133,"Given two tables, 'Employees' and 'Departments', you need to find the total number of employees in each department along with the department name, but only for departments that have more than five employees. How would you achieve this?","SELECT d.department_name, COUNT(e.employee_id) AS total_employees
FROM Departments d
JOIN Employees e ON d.department_id = e.department_id
GROUP BY d.department_name
HAVING COUNT(e.employee_id) > 5",SQL,unknown,Intermediate,"Data Analyst, Join, Aggregate function, Group By","SELECT d.department_name, COUNT(e.employee_id) AS total_employees FROM Departments d JOIN Employees e ON d.department_id = e.department_id GROUP BY d.department_name HAVING COUNT(e.employee_id) > 5",Not Available,"This SQL query joins the two tables 'Employees' and 'Departments', counts the number of employees in each department, groups the results by department name, and filters the results to include only those departments with more than five employees"
134,"You are tasked with analyzing sales data from two tables: 'orders' and 'customers'. The 'orders' table contains columns 'order_id', 'customer_id', 'amount', and 'order_date'. The 'customers' table includes 'customer_id', 'customer_name', and 'customer_region'. Write a SQL query that returns the total sales amount grouped by customer region and sorted in descending order of sales. Additionally, only include regions that have total sales greater than $10,000","SELECT c.customer_region, SUM(o.amount) AS total_sales FROM orders o JOIN customers c ON o.customer_id = c.customer_id GROUP BY c.customer_region HAVING SUM(o.amount) > 10000 ORDER BY total_sales DESC",SQL,unknown,Intermediate,"['JOIN', 'Aggregation', 'GROUP BY', 'HAVING']","SELECT customer_region, SUM(amount) AS total_sales FROM orders JOIN customers ON orders.customer_id = customers.customer_id GROUP BY customer_region HAVING SUM(amount) > 10000 ORDER BY total_sales DESC",Not Available,"This query joins the 'orders' and 'customers' tables on 'customer_id', groups the data by customer region, calculates the total sales for each region, filters regions with total sales over $10,000, and orders the result by total sales in descending order"
135,"You are given two tables: `employees` and `departments`. The `employees` table contains the columns `id`, `name`, `salary`, and `department_id`. The `departments` table includes `id` and `department_name`. Write a query to find the average salary of each department, but only include those departments where the average salary is above the overall average salary of all employees","WITH DepartmentAverages AS (SELECT d.department_name, AVG(e.salary) AS avg_salary FROM employees e JOIN departments d ON e.department_id = d.id GROUP BY d.department_name) SELECT department_name, avg_salary FROM DepartmentAverages WHERE avg_salary > (SELECT AVG(salary) FROM employees)",SQL,unknown,Intermediate,"Data Analyst, SQL, Aggregate function, Join","SELECT department_name, AVG(salary) AS avg_salary FROM employees e JOIN departments d ON e.department_id = d.id GROUP BY d.department_name HAVING avg_salary > (SELECT AVG(salary) FROM employees)",Not Available,"The query first computes the average salary of each department and stores it in a Common Table Expression (CTE). It then retrieves the department names and their average salaries where these are above the overall average salary of all employees, retrieved using a subquery"
136,"You are tasked with analyzing the sales data for a retail company. You need to create a report that shows the total sales per product category for each year, along with the percentage change compared to the previous year. The data is located in two tables: `sales` (fields: `sale_id`, `product_id`, `sale_amount`, `sale_date`) and `products` (fields: `product_id`, `category_id`, `product_name`). The `categories` table contains `category_id` and `category_name`. How would you write an SQL query to achieve this?","WITH yearly_sales AS ( SELECT p.category_id, YEAR(s.sale_date) AS year, SUM(s.sale_amount) AS total_sales FROM sales s JOIN products p ON s.product_id = p.product_id GROUP BY p.category_id, YEAR(s.sale_date) ) SELECT ys.year, c.category_name, ys.total_sales, LAG(ys.total_sales) OVER (PARTITION BY ys.category_id ORDER BY ys.year) AS previous_year_sales, (ys.total_sales - LAG(ys.total_sales) OVER (PARTITION BY ys.category_id ORDER BY ys.year)) / NULLIF(LAG(ys.total_sales) OVER (PARTITION BY ys.category_id ORDER BY ys.year), 0) * 100 AS percentage_change FROM yearly_sales ys JOIN categories c ON ys.category_id = c.category_id ORDER BY ys.year, c.category_name",SQL,unknown,Advanced,"[""""Data Analyst"""", """"Data Engineer"""", """"Aggregate function"""", """"Window function"""", """"Join""""]","SELECT p.category_id, YEAR(s.sale_date) AS year, SUM(s.sale_amount) AS total_sales FROM sales s JOIN products p ON s.product_id = p.product_id GROUP BY p.category_id, YEAR(s.sale_date)",Not Available,"This SQL query uses Common Table Expressions (CTE) to first aggregate the total sales by category and year, then it computes the percentage change from the previous year using the `LAG` window function. It joins the `yearly_sales` with the `categories` table to include meaningful category names in the final output"
137,"You have two tables - 'Employees' and 'Sales'. The 'Employees' table contains 'EmployeeID', 'Name', and 'Department'. The 'Sales' table contains 'SaleID', 'EmployeeID', 'SaleDate', and 'Amount'. Write a SQL query to find the total sales amount for each department, showing the department name and the total sales amount arranged in descending order of total sales","SELECT e.Department, SUM(s.Amount) AS TotalSales FROM Employees e JOIN Sales s ON e.EmployeeID = s.EmployeeID GROUP BY e.Department ORDER BY TotalSales DESC",SQL,unknown,Intermediate,"[""Join"", ""Aggregate Function"", ""Data Analysis""]","SELECT e.Department, SUM(s.Amount) AS TotalSales FROM Employees e JOIN Sales s ON e.EmployeeID = s.EmployeeID GROUP BY e.Department ORDER BY TotalSales DESC",Not Available,"This query joins the 'Employees' and 'Sales' tables on 'EmployeeID', aggregates the sales amount for each department using SUM, and orders the result set by total sales in descending order"
138,"You are given two tables: `employees` (with fields: `id`, `name`, `department_id`) and `departments` (with fields: `id`, `name`, `location`). Write a query to find the department name and average salary of employees in each department. Assume there is a `salary` field in the `employees` table","SELECT d.name AS department_name, AVG(e.salary) AS average_salary FROM employees e JOIN departments d ON e.department_id = d.id GROUP BY d.name",SQL,unknown,Intermediate,"Data Analyst, Data Engineer, Join, Aggregate Function","SELECT d.name AS department_name, AVG(e.salary) AS average_salary FROM employees e JOIN departments d ON e.department_id = d.id GROUP BY d.name",Not Available,"The query joins the `employees` table with the `departments` table on the department ID, and calculates the average salary for the employees in each department using the AVG function, grouped by department"
139,"You have two tables: 'sales' (columns: sale_id, product_id, sale_date, quantity) and 'products' (columns: product_id, product_name, category). Write a SQL query to get the total quantity sold for each product in the 'Electronics' category for the year 2023. Include the product name in the result","SELECT p.product_name, SUM(s.quantity) AS total_quantity_sold FROM sales s JOIN products p ON s.product_id = p.product_id WHERE p.category = 'Electronics' AND YEAR(s.sale_date) = 2023 GROUP BY p.product_name",SQL,unknown,Intermediate,"[""Join"", ""Aggregate Function"", ""Data Analysis""]","SELECT p.product_name, SUM(s.quantity) AS total_quantity_sold FROM sales s JOIN products p ON s.product_id = p.product_id WHERE p.category = 'Electronics' AND YEAR(s.sale_date) = 2023 GROUP BY p.product_name",Not Available,This query joins the 'sales' and 'products' tables to filter sales for products in the 'Electronics' category for the year 2023 and aggregates the total quantity sold per product
140,"You have two tables: `employees` and `departments`. The `employees` table includes columns `id`, `name`, `salary`, and `department_id`. The `departments` table includes columns `id` and `department_name`. Write a SQL query to find the department names which have an average employee salary greater than $70,000, and list them in descending order of their average salary","WITH DeptAvgSalary AS (SELECT d.department_name, AVG(e.salary) AS avg_salary FROM employees e JOIN departments d ON e.department_id = d.id GROUP BY d.department_name) SELECT department_name FROM DeptAvgSalary WHERE avg_salary > 70000 ORDER BY avg_salary DESC",SQL,unknown,Advanced,"[""Join"",""Aggregate function"",""CTE"",""Data Analysis""]",Not Available,"This query uses a Common Table Expression (CTE) to first calculate the average salary for each department and then filters to find departments with an average salary greater than $70,000, ordering the results by average salary in descending order","Candidates might forget to use GROUP BY, leading to SQL syntax errors, or they might misplace the filtering for average salary either before or inside the CTE"
141,"Given two tables, `employees` (with columns `id`, `name`, `department_id`, and `salary`) and `departments` (with columns `id` and `department_name`), write a SQL query to find the average salary of employees in each department along with the department name, and sort the result by average salary in descending order","SELECT d.department_name, AVG(e.salary) AS average_salary FROM employees e JOIN departments d ON e.department_id = d.id GROUP BY d.department_name ORDER BY average_salary DESC",SQL,unknown,Intermediate,"Data Analyst, Join, Aggregate Function","SELECT d.department_name, AVG(e.salary) AS average_salary FROM employees e JOIN departments d ON e.department_id = d.id GROUP BY d.department_name ORDER BY average_salary DESC",Not Available,"This query joins the `employees` and `departments` tables on the department ID, calculates the average salary of employees grouped by department, and sorts the results in descending order based on average salary"
142,"You are given two tables: `employees` (which contains `employee_id`, `name`, and `department_id`) and `departments` (which contains `department_id` and `department_name`). Write a SQL query to return the names of departments that have more than 5 employees along with the count of employees per department","SELECT d.department_name, COUNT(e.employee_id) AS employee_count FROM departments d JOIN employees e ON d.department_id = e.department_id GROUP BY d.department_name HAVING COUNT(e.employee_id) > 5",SQL,unknown,Intermediate,"Data Analyst, Data Engineer, Join, Aggregate function","SELECT d.department_name, COUNT(e.employee_id) AS employee_count FROM departments d JOIN employees e ON d.department_id = e.department_id GROUP BY d.department_name HAVING COUNT(e.employee_id) > 5",Not Available,"The query uses a JOIN to link employees and departments, groups the results by department, counts the employees per department, and filters groups with more than 5 employees using HAVING"
143,"You have two tables: `employees` and `departments`. The `employees` table has columns `id`, `name`, `salary`, and `department_id`. The `departments` table has columns `id` and `name`. Write a SQL query to find the average salary of employees in each department. Order the results by department name","SELECT d.name AS department_name, AVG(e.salary) AS average_salary FROM departments d LEFT JOIN employees e ON d.id = e.department_id GROUP BY d.name ORDER BY d.name",SQL,unknown,Intermediate,"Data Analyst, SQL, Join, Aggregate function","SELECT d.name AS department_name, AVG(e.salary) AS average_salary FROM departments d LEFT JOIN employees e ON d.id = e.department_id GROUP BY d.name ORDER BY d.name",Not Available,This query calculates the average salary of employees grouped by their respective departments while also ensuring departments without any employees are included in the result using a LEFT JOIN
144,"Suppose you work for a retail company and have two tables: `Sales` and `Products`. The `Sales` table records each sale, including `sale_id`, `product_id`, `quantity`, and `sale_date`. The `Products` table contains `product_id`, `product_name`, and `price`. Write a SQL query to find the total revenue generated from each product for the last month (assuming the current date is '2023-10-31'). Order the result by total revenue in descending order","WITH MonthlySales AS (SELECT product_id, SUM(quantity * price) AS total_revenue FROM Sales S JOIN Products P ON S.product_id = P.product_id WHERE S.sale_date >= DATEADD(month, -1, '2023-10-31') GROUP BY S.product_id) SELECT P.product_name, MS.total_revenue FROM MonthlySales MS JOIN Products P ON MS.product_id = P.product_id ORDER BY MS.total_revenue DESC",SQL,unknown,Intermediate,"[""Join"",""Aggregation"",""CTE""]",Not Available,"This query uses a Common Table Expression (CTE) to first calculate total revenue per product over the last month and then selects the product names corresponding to those revenues, ordering the results by revenue in descending order","Candidates might forget to join the `Sales` and `Products` tables correctly, potentially leading to missing or incorrect total revenue calculations. They could also forget to filter sales by the specified date range"
145,"Given a sales database with two tables, `sales` (columns: `id`, `amount`, `date`, `customer_id`) and `customers` (columns: `customer_id`, `customer_name`, `city`), write a query to find the total sales amount by each city, and also rank the cities based on their total sales amount in descending order","WITH CitySales AS ( SELECT c.city, SUM(s.amount) AS total_sales FROM sales s JOIN customers c ON s.customer_id = c.customer_id GROUP BY c.city ) SELECT city, total_sales, RANK() OVER (ORDER BY total_sales DESC) AS rank FROM CitySales",SQL,unknown,Intermediate,"Data Analyst, Data Engineer, Business Intelligence","Aggregate function, Join, CTE, Window Function","WITH CitySales AS ( SELECT c.city, SUM(s.amount) AS total_sales FROM sales s JOIN customers c ON s.customer_id = c.customer_id GROUP BY c.city ) SELECT city, total_sales, RANK() OVER (ORDER BY total_sales DESC) AS rank FROM CitySales",Not Available
146,"You are given two tables: `Employees` (columns: `EmployeeID`, `EmployeeName`, `DepartmentID`, `Salary`) and `Departments` (columns: `DepartmentID`, `DepartmentName`, `Location`). Write a SQL query to find the total salary expenditure of each department and the number of employees in each department, sorted by total salary expenditure in descending order","SELECT d.DepartmentName, SUM(e.Salary) AS TotalSalaryExpenditure, COUNT(e.EmployeeID) AS NumberOfEmployees FROM Employees e JOIN Departments d ON e.DepartmentID = d.DepartmentID GROUP BY d.DepartmentName ORDER BY TotalSalaryExpenditure DESC",SQL,unknown,Intermediate,"Data Analyst, Data Engineer, Aggregate function, Join","SELECT d.DepartmentName, SUM(e.Salary) AS TotalSalaryExpenditure, COUNT(e.EmployeeID) AS NumberOfEmployees FROM Employees e JOIN Departments d ON e.DepartmentID = d.DepartmentID GROUP BY d.DepartmentName ORDER BY TotalSalaryExpenditure DESC",Not Available,"This SQL query joins the `Employees` and `Departments` tables on the `DepartmentID`, then computes the total salary expenditure and the number of employees per department by using SUM and COUNT functions, and finally sorts the results by total salary expenditure in descending order"
147,"You have two tables: `employees` (with columns: `id`, `name`, `department_id`, `salary`) and `departments` (with columns: `id`, `department_name`). Write a SQL query to find the department name and the average salary of employees in each department, but only include those departments with an average salary greater than $50,000","SELECT d.department_name, AVG(e.salary) AS average_salary FROM employees e JOIN departments d ON e.department_id = d.id GROUP BY d.department_name HAVING AVG(e.salary) > 50000",SQL,unknown,Intermediate,"['Join', 'Aggregate function', 'Group By', 'HAVING']","Example: SELECT d.department_name, AVG(e.salary) AS average_salary FROM employees e JOIN departments d ON e.department_id = d.id GROUP BY d.department_name HAVING AVG(e.salary) > 50000",Not Available,"This query uses a JOIN to combine data from the employees and departments tables, then it calculates the average salary per department and filters out departments with an average salary less than or equal to $50,000 using the HAVING clause"
148,"Given two tables, `sales` and `products`, the `sales` table includes columns `product_id`, `quantity_sold`, and `sale_date`, while the `products` table includes `product_id`, `product_name`, and `category`. Write a SQL query to find the total quantity sold for each product in the category 'Electronics' for the last 30 days, ordered by the total quantity sold in descending order","WITH recent_sales AS (SELECT product_id, SUM(quantity_sold) AS total_quantity FROM sales WHERE sale_date >= CURRENT_DATE - INTERVAL '30 days' GROUP BY product_id) SELECT p.product_name, rs.total_quantity FROM recent_sales rs JOIN products p ON rs.product_id = p.product_id WHERE p.category = 'Electronics' ORDER BY rs.total_quantity DESC",SQL,unknown,Intermediate,"['Join', 'Aggregate function', 'CTE', 'Data Analysis']","SELECT product_name, total_quantity FROM (SELECT product_id, SUM(quantity_sold) AS total_quantity FROM sales WHERE sale_date >= CURRENT_DATE - INTERVAL '30 days' GROUP BY product_id) AS recent_sales JOIN products ON recent_sales.product_id = products.product_id WHERE products.category = 'Electronics' ORDER BY total_quantity DESC",Not Available,"This query uses a Common Table Expression (CTE) to first determine the total quantity sold for each product over the past 30 days, then joins this result with the `products` table to filter by the Electronics category and finally orders the results by total quantity sold"
149,"You are working as a Data Analyst for an e-commerce company and need to analyze the monthly sales trends. Given the 'sales' table with columns 'id', 'product_id', 'sale_date', 'amount' and a 'products' table with 'product_id' and 'category', write a query to find the total sales amount for each category for the last three months. The output should include the category name and total sales amount","WITH MonthlySales AS (SELECT p.category, SUM(s.amount) AS total_sales FROM sales s JOIN products p ON s.product_id = p.product_id WHERE s.sale_date >= DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '3 months' GROUP BY p.category) SELECT category, total_sales FROM MonthlySales",SQL,unknown,Intermediate,"[""Data Analyst"", ""Aggregate function"", ""Join"", ""CTE""]","WITH MonthlySales AS (SELECT p.category, SUM(s.amount) AS total_sales FROM sales s JOIN products p ON s.product_id = p.product_id WHERE s.sale_date >= DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '3 months' GROUP BY p.category) SELECT category, total_sales FROM MonthlySales",Not Available,This query calculates the total sales for each product category over the last three months by first filtering the sales records and then aggregating the sales amounts using a Common Table Expression (CTE)
150,"You are given two tables: 'sales' (containing columns: sale_id, product_id, customer_id, sale_amount, sale_date) and 'products' (containing columns: product_id, product_name, category_id). Write a SQL query to find the total sales amount for each product along with the product name and the category ID. Sort the results by total sales amount in descending order","SELECT p.product_name, p.category_id, SUM(s.sale_amount) AS total_sales_amount FROM sales s JOIN products p ON s.product_id = p.product_id GROUP BY p.product_name, p.category_id ORDER BY total_sales_amount DESC",SQL,unknown,Intermediate,"Data Analyst, Data Engineer, Join, Aggregation","SELECT p.product_name, p.category_id, SUM(s.sale_amount) AS total_sales_amount FROM sales s JOIN products p ON s.product_id = p.product_id GROUP BY p.product_name, p.category_id ORDER BY total_sales_amount DESC",Not Available,"The query joins the 'sales' table with the 'products' table on the 'product_id' column, aggregating the sales amounts for each product and sorting by the total sales amount in descending order"
151,"Given the following tables: `employees (id, name, department_id)`, `departments (id, department_name)`, `salaries (employee_id, salary_amount, effective_date)`, write a SQL query to find the average salary for each department that has more than 5 employees and the department name for those departments","WITH DepartmentEmployeeCount AS ( SELECT d.id AS department_id, d.department_name, COUNT(e.id) AS employee_count FROM departments d JOIN employees e ON d.id = e.department_id GROUP BY d.id HAVING COUNT(e.id) > 5 ), AverageSalaries AS ( SELECT d.department_id, AVG(s.salary_amount) AS average_salary FROM salaries s JOIN employees e ON s.employee_id = e.id JOIN DepartmentEmployeeCount dec ON e.department_id = dec.department_id GROUP BY d.department_id ) SELECT dec.department_name, avg_s.average_salary FROM DepartmentEmployeeCount dec JOIN AverageSalaries avg_s ON dec.department_id = avg_s.department_id",SQL,unknown,Intermediate,"Data Analyst, Data Engineer, Join, Aggregate Function, CTE","SELECT d.department_name, AVG(s.salary_amount) AS average_salary FROM departments d JOIN employees e ON d.id = e.department_id JOIN salaries s ON e.id = s.employee_id GROUP BY d.department_name HAVING COUNT(e.id) > 5",Not Available,The query uses Common Table Expressions (CTEs) to first calculate the count of employees in each department and filter out departments with less than or equal to 5 employees. It then calculates the average salary for the remaining departments
152,"You are given two tables: `sales` and `products`. The `sales` table contains columns `sale_id`, `product_id`, `quantity`, and `sale_date`. The `products` table has `product_id`, `product_name`, and `category`. Write a SQL query to find the total quantity sold for each product category in the year 2022, and display the category along with its total quantity sold, ordered by the total quantity in descending order","SELECT p.category, SUM(s.quantity) AS total_quantity_sold FROM sales s JOIN products p ON s.product_id = p.product_id WHERE YEAR(s.sale_date) = 2022 GROUP BY p.category ORDER BY total_quantity_sold DESC",SQL,unknown,Intermediate,"'[""Data Analyst"", ""Data Engineer"", ""Aggregate function"", ""Join""]'","SELECT p.category, SUM(s.quantity) AS total_quantity_sold FROM sales s JOIN products p ON s.product_id = p.product_id WHERE YEAR(s.sale_date) = 2022 GROUP BY p.category ORDER BY total_quantity_sold DESC",Not Available,"This query joins the `sales` and `products` tables on the `product_id`, filters for sales in 2022, groups the results by product category, and sums the quantity sold for each category, ordering the results by the total quantity sold"
153,"Given a sales database with the tables 'sales' (id, product_id, amount, sale_date) and 'products' (id, category, price), write a query to find the total sales amount for each product category over the last 30 days, and sort the results by total sales in descending order. Additionally, include the average price of products in each category","SELECT p.category, SUM(s.amount) AS total_sales, AVG(p.price) AS average_price FROM sales s JOIN products p ON s.product_id = p.id WHERE s.sale_date >= NOW() - INTERVAL '30 days' GROUP BY p.category ORDER BY total_sales DESC",SQL,unknown,Intermediate,"Data Analyst, Aggregate function, Join","SELECT p.category, SUM(s.amount) AS total_sales, AVG(p.price) AS average_price FROM sales s JOIN products p ON s.product_id = p.id WHERE s.sale_date >= NOW() - INTERVAL '30 days' GROUP BY p.category ORDER BY total_sales DESC",Not Available,"The query joins the 'sales' table with the 'products' table on the product_id. It filters the sales within the last 30 days, groups the result by product category, calculates the total sales amount and average price per category, and sorts the result by total sales in descending order"
154,"Given a customer orders table and a products table, write an SQL query to find the top 5 products by total sales revenue for the year 2023. Include product name and total revenue in the result. Products with no sales should not appear in the result","WITH Revenue AS (SELECT p.product_name, SUM(o.order_amount) AS total_revenue FROM orders o JOIN products p ON o.product_id = p.product_id WHERE YEAR(o.order_date) = 2023 GROUP BY p.product_name) SELECT product_name, total_revenue FROM Revenue ORDER BY total_revenue DESC LIMIT 5",SQL,unknown,Intermediate,"Data Analyst, Aggregate function, Join","SELECT p.product_name, SUM(o.order_amount) AS total_revenue FROM orders o JOIN products p ON o.product_id = p.product_id WHERE YEAR(o.order_date) = 2023 GROUP BY p.product_name ORDER BY total_revenue DESC LIMIT 5",Not Available,"This SQL query uses a Common Table Expression (CTE) to first calculate the total revenue for each product in 2023, grouping by product name. The outer query then selects the top 5 products based on the total revenue"
155,"You are tasked with generating a report that shows the total sales made by each salesperson in the last year, along with the average sales per month and the total number of sales transactions they completed. You have two tables: 'sales' and 'salespersons'. The 'sales' table contains columns: 'sale_id', 'salesperson_id', 'sale_amount', and 'sale_date'. The 'salespersons' table contains 'salesperson_id' and 'salesperson_name'. Write an SQL query to achieve this","SELECT sp.salesperson_name, 
                         COUNT(s.sale_id) AS total_transactions,
                         SUM(s.sale_amount) AS total_sales,
                         AVG(s.sale_amount) AS avg_sales_per_month
                  FROM sales s
                  JOIN salespersons sp ON s.salesperson_id = sp.salesperson_id
                  WHERE s.sale_date >= DATEADD(year, -1, GETDATE())
                  GROUP BY sp.salesperson_name",SQL,unknown,Intermediate,"['Join', 'Aggregate function', 'Group by']","SELECT salesperson_name, 
                         COUNT(sale_id) AS total_transactions,
                         SUM(sale_amount) AS total_sales,
                         AVG(sale_amount) AS avg_sales_per_month
                  FROM sales s
                  JOIN salespersons sp ON s.salesperson_id = sp.salesperson_id
                  WHERE sale_date >= DATEADD(year, -1, GETDATE())
                  GROUP BY salesperson_name",Not Available,"This query joins the 'sales' and 'salespersons' tables to aggregate sales data for each salesperson. It filters sales within the last year and groups the results by salesperson, calculating total transactions, total sales, and average sales per month"
156,"You are analyzing a company's sales data and need to identify the top 3 products by sales for each region. Each sale is recorded in a 'sales' table with the columns 'product_id', 'region', 'sale_amount', and there is a 'products' table with 'product_id' and 'product_name'. Write a SQL query to achieve this","WITH RankedSales AS (SELECT p.product_name, s.region, s.sale_amount, RANK() OVER (PARTITION BY s.region ORDER BY s.sale_amount DESC) as sales_rank FROM sales s JOIN products p ON s.product_id = p.product_id) SELECT product_name, region, sale_amount FROM RankedSales WHERE sales_rank <= 3",SQL,unknown,Intermediate,"Window Function, Join, Aggregate Function","WITH RankedSales AS (SELECT p.product_name, s.region, s.sale_amount, RANK() OVER (PARTITION BY s.region ORDER BY s.sale_amount DESC) as sales_rank FROM sales s JOIN products p ON s.product_id = p.product_id) SELECT product_name, region, sale_amount FROM RankedSales WHERE sales_rank <= 3",Not Available,This query uses a Common Table Expression (CTE) to first rank products by their sales amount per region using the RANK() window function. It then filters this ranked data to return only the top 3 products for each region
157,"Given a table `sales` with columns `id`, `sales_person`, `region`, `amount`, and a table `sales_targets` with columns `sales_person`, `target`, write a query to find each sales person's total amount and whether they met their target ('Yes' or 'No')","SELECT s.sales_person, SUM(s.amount) AS total_sales, CASE WHEN SUM(s.amount) >= st.target THEN 'Yes' ELSE 'No' END AS met_target FROM sales s JOIN sales_targets st ON s.sales_person = st.sales_person GROUP BY s.sales_person",SQL,unknown,Intermediate,"['Data Analyst', 'Sales Analysis', 'Join', 'Aggregate Function']","SELECT sales_person, SUM(amount) FROM sales GROUP BY sales_person",Not Available,"This query joins the `sales` and `sales_targets` tables on the `sales_person` column, aggregates the sales amounts, and uses a CASE statement to determine if each sales person met their target"
158,"Given two tables, `employees` (id, name, department_id) and `departments` (id, department_name), write a SQL query to find the number of employees in each department along with the department name. If a department has no employees, it should still be included in the results","SELECT d.department_name, COUNT(e.id) AS employee_count FROM departments d LEFT JOIN employees e ON d.id = e.department_id GROUP BY d.department_name ORDER BY d.department_name",SQL,unknown,Intermediate,"['Join', 'Aggregate Function', 'Data Analysis']","SELECT d.department_name, COUNT(e.id) AS employee_count FROM departments d LEFT JOIN employees e ON d.id = e.department_id GROUP BY d.department_name ORDER BY d.department_name",Not Available,"This query uses a LEFT JOIN to combine the departments and employees tables, allowing departments with no employees to be included in the results. The COUNT function counts employees and the results are grouped by department name to provide the desired aggregate"
159,"You have a sales database with two tables: `sales` and `employees`. The `sales` table contains columns `id`, `amount`, `employee_id`, and `sale_date`. The `employees` table contains `id`, `name`, and `hire_date`. Write a query to find the total sales amount by each employee who has sold more than $10,000 in total sales since their hire date, and display it with their name and hire date","WITH EmployeeSales AS (SELECT e.id, e.name, e.hire_date, SUM(s.amount) AS total_sales FROM employees e JOIN sales s ON e.id = s.employee_id WHERE s.sale_date >= e.hire_date GROUP BY e.id, e.name, e.hire_date) SELECT name, hire_date, total_sales FROM EmployeeSales WHERE total_sales > 10000",SQL,unknown,Advanced,"CTE, Join, Aggregate function, Data Analysis","WITH EmployeeSales AS (SELECT e.id, e.name, e.hire_date, SUM(s.amount) AS total_sales FROM employees e JOIN sales s ON e.id = s.employee_id WHERE s.sale_date >= e.hire_date GROUP BY e.id, e.name, e.hire_date) SELECT name, hire_date, total_sales FROM EmployeeSales WHERE total_sales > 10000",Not Available,"This SQL code uses a Common Table Expression (CTE) to first calculate total sales for each employee since their hire date, then filters to return only those with sales over 10,000"
160,"Given a sales table with columns: order_id, product_id, customer_id, order_date, and order_amount, and a products table with columns: product_id, product_name, and category, write a query to find the top 3 customers with highest total order amounts in each product category","WITH CustomerTotals AS ( SELECT c.customer_id, p.category, SUM(s.order_amount) AS total_order_amount FROM sales s JOIN products p ON s.product_id = p.product_id JOIN customers c ON s.customer_id = c.customer_id GROUP BY c.customer_id, p.category ) SELECT category, customer_id, total_order_amount FROM ( SELECT category, customer_id, total_order_amount, ROW_NUMBER() OVER (PARTITION BY category ORDER BY total_order_amount DESC) as rank FROM CustomerTotals ) ranked WHERE rank <= 3 ORDER BY category, total_order_amount DESC",SQL,unknown,Advanced,"['SQL', 'Window Function', 'Join', 'Aggregation']","WITH CustomerTotals AS ( SELECT c.customer_id, p.category, SUM(s.order_amount) AS total_order_amount FROM sales s JOIN products p ON s.product_id = p.product_id JOIN customers c ON s.customer_id = c.customer_id GROUP BY c.customer_id, p.category ) SELECT category, customer_id, total_order_amount FROM ( SELECT category, customer_id, total_order_amount, ROW_NUMBER() OVER (PARTITION BY category ORDER BY total_order_amount DESC) as rank FROM CustomerTotals ) ranked WHERE rank <= 3 ORDER BY category, total_order_amount DESC",Not Available,"This query first calculates the total order amounts for each customer within each product category, then uses a window function to assign a rank to each customer within their category based on the total order amount, finally filtering to show only the top 3 customers for each category"
161,"Suppose you have two tables: `employees` and `departments`. The `employees` table contains the columns: `employee_id`, `name`, `department_id`, and `salary`. The `departments` table contains the columns: `department_id` and `department_name`. Write a SQL query to find the department name and the average salary of employees in each department, where the average salary is greater than $50,000, ordered by the average salary in descending order","SELECT d.department_name, AVG(e.salary) AS average_salary FROM employees e JOIN departments d ON e.department_id = d.department_id GROUP BY d.department_name HAVING AVG(e.salary) > 50000 ORDER BY average_salary DESC",SQL,intermediate,"[""Data Analyst"",""Data Engineer"",""Join"",""Aggregate function""]",Not Available,"This query joins the `employees` and `departments` tables on the department ID, calculates the average salary per department, filters out those with an average salary greater than $50,000, and sorts the result by average salary in descending order","Candidates might forget to use the `HAVING` clause after the `GROUP BY`, confuse `WHERE` with `HAVING`, or neglect to include the `ORDER BY` clause","What could be the impact of changing the threshold salary from $50,000 to $60,000?"
162,"You are given two tables: `employees` (with columns `id`, `name`, `department_id`, `salary`) and `departments` (with columns `id`, `department_name`). Write a SQL query to find the average salary of employees in each department and list the department name alongside it. If a department has no employees, it should still be included in the output with an average salary of NULL","SELECT d.department_name, AVG(e.salary) AS average_salary  
FROM departments d  
LEFT JOIN employees e ON d.id = e.department_id  
GROUP BY d.department_name",SQL,unknown,Intermediate,"['Join', 'Aggregate function', 'Data Analysis']","SELECT d.department_name, AVG(e.salary) AS average_salary FROM departments d LEFT JOIN employees e ON d.id = e.department_id GROUP BY d.department_name",Not Available,"This query uses a LEFT JOIN to include all departments from the `departments` table, while calculating the average salary from the `employees` table. If no employees are in a specific department, the average salary will be NULL"
163,"Suppose you have two tables: `employees` (employee_id, name, department_id, salary) and `departments` (department_id, department_name). Write a SQL query to find the average salary of employees in each department, but only include departments with an average salary greater than 50000. Additionally, sort the results by the department name in ascending order","WITH department_salaries AS (SELECT d.department_name, AVG(e.salary) AS avg_salary FROM employees e JOIN departments d ON e.department_id = d.department_id GROUP BY d.department_name) SELECT department_name, avg_salary FROM department_salaries WHERE avg_salary > 50000 ORDER BY department_name ASC",SQL,unknown,Intermediate,"[""Data Analyst"",""Data Engineer"",""Aggregate Function"",""Join""]",Not Available,"This query uses a Common Table Expression (CTE) to first calculate the average salary for each department and then filters out those with an average salary of more than 50,000. Finally, it sorts the results by department name",Candidates may forget to use the GROUP BY clause properly or misplace the filter for average salary
164,"Given the sales data of a retail store stored in a table named 'sales', which contains columns like 'sale_id', 'product_id', 'store_id', 'sale_date', and 'amount', as well as a 'products' table with 'product_id', 'product_name', and 'category', write a SQL query that retrieves the total sales amount for each product category for the last month, including only categories that have total sales exceeding $5,000. Use a subquery to filter the categories","SELECT p.category, SUM(s.amount) AS total_sales FROM sales s JOIN products p ON s.product_id = p.product_id WHERE s.sale_date >= DATEADD(MONTH, -1, GETDATE()) GROUP BY p.category HAVING SUM(s.amount) > 5000",SQL,unknown,Intermediate,"Data Analyst, Aggregate function, Join, Subquery","SELECT p.category, SUM(s.amount) AS total_sales FROM sales s JOIN products p ON s.product_id = p.product_id WHERE s.sale_date >= DATEADD(MONTH, -1, GETDATE()) GROUP BY p.category HAVING SUM(s.amount) > 5000",Not Available,"This query joins the 'sales' and 'products' tables to aggregate total sales amount by product category for the last month, filtering categories with total sales over $5,000 using the HAVING clause"
165,"You are given two tables, `employees` (with columns `id`, `name`, `department_id`, and `salary`) and `departments` (with columns `id` and `department_name`). Write a SQL query to find the highest-paid employee in each department and the corresponding department name","WITH ranked_employees AS (SELECT e.name, d.department_name, e.salary, ROW_NUMBER() OVER (PARTITION BY e.department_id ORDER BY e.salary DESC) as rank FROM employees e JOIN departments d ON e.department_id = d.id) SELECT name, department_name, salary FROM ranked_employees WHERE rank = 1",SQL,unknown,Intermediate,"Data Analyst, Data Engineer, Business Intelligence, Window Functions, Join",Not Available,This query uses a Common Table Expression (CTE) to first rank the employees by salary within their respective departments. It then filters for the highest-ranked employee in each department,"Common mistakes include: not correctly using the PARTITION BY clause, forgetting to join the tables properly, or misunderstanding the ROW_NUMBER function's operations"
166,"You are given two tables: `employees` (with columns `employee_id`, `department_id`, `salary`) and `departments` (with columns `department_id`, `department_name`). Write a SQL query to find the average salary of employees in each department along with the department name. Sort the results by the average salary in descending order","SELECT d.department_name, AVG(e.salary) AS average_salary FROM employees e JOIN departments d ON e.department_id = d.department_id GROUP BY d.department_name ORDER BY average_salary DESC",SQL,unknown,Intermediate,"Join, Aggregate Function, Group By","SELECT d.department_name, AVG(e.salary) AS average_salary FROM employees e JOIN departments d ON e.department_id = d.department_id GROUP BY d.department_name ORDER BY average_salary DESC",Not Available,"This query joins the `employees` and `departments` tables on the `department_id`, calculates the average salary per department using the `AVG()` function, groups the results by department name, and sorts them in descending order of average salary"
167,"Consider a scenario where you have two tables: `orders` and `customers`. The `orders` table contains columns `order_id`, `customer_id`, and `order_amount`, while the `customers` table has `customer_id`, `customer_name`, and `signup_date`. Write a SQL query to fetch the total order amount for each customer who signed up in the last year and sort the result by the total order amount in descending order","WITH recent_customers AS (SELECT customer_id FROM customers WHERE signup_date >= DATEADD(year, -1, GETDATE())) SELECT c.customer_name, SUM(o.order_amount) AS total_order_amount FROM orders o JOIN recent_customers rc ON o.customer_id = rc.customer_id JOIN customers c ON rc.customer_id = c.customer_id GROUP BY c.customer_name ORDER BY total_order_amount DESC",SQL,unknown,Intermediate,"Data Analyst, Aggregate Function, Join","SELECT c.customer_name, SUM(o.order_amount) AS total_order_amount FROM orders o JOIN customers c ON o.customer_id = c.customer_id WHERE c.signup_date >= DATEADD(year, -1, GETDATE()) GROUP BY c.customer_name ORDER BY total_order_amount DESC",Not Available,"We first identify customers who signed up in the last year using a Common Table Expression (CTE), then join this information with the orders to calculate the total order amount for each customer and finally sort the results by the total order amount"
168,"You are tasked with analyzing the sales performance of various products over time. You have two tables: `sales` and `products`. The `sales` table contains columns for `sale_id`, `product_id`, `sale_date`, and `amount`. The `products` table contains `product_id` and `product_name`. Write a SQL query that calculates the total sales amount for each product on a monthly basis for the year 2023, listing the product names alongside their total sales","WITH monthly_sales AS ( SELECT p.product_name, DATE_TRUNC('month', s.sale_date) AS sale_month, SUM(s.amount) AS total_sales FROM sales s JOIN products p ON s.product_id = p.product_id WHERE s.sale_date >= '2023-01-01' AND s.sale_date < '2024-01-01' GROUP BY p.product_name, sale_month ) SELECT product_name, sale_month, total_sales FROM monthly_sales ORDER BY sale_month, product_name",SQL,unknown,Advanced,"[""Aggregate Function"", ""Join"", ""CTE"", ""Data Analysis""]","WITH monthly_sales AS ( SELECT p.product_name, DATE_TRUNC('month', s.sale_date) AS sale_month, SUM(s.amount) AS total_sales FROM sales s JOIN products p ON s.product_id = p.product_id WHERE s.sale_date >= '2023-01-01' AND s.sale_date < '2024-01-01' GROUP BY p.product_name, sale_month ) SELECT product_name, sale_month, total_sales FROM monthly_sales ORDER BY sale_month, product_name",Not Available,"This query uses a Common Table Expression (CTE) to first calculate total sales per product per month for the year 2023. The main query then selects from this CTE to present the results in a readable format, ordered by month and product name"
169,"Given a sales database with tables `orders` (order_id, customer_id, order_date, total_amount) and `customers` (customer_id, customer_name, join_date), write a SQL query to find the top 5 customers by total spending in the last year, along with their total amount spent and the date they joined","WITH last_year_orders AS ( SELECT c.customer_id, SUM(o.total_amount) AS total_spent FROM orders o JOIN customers c ON o.customer_id = c.customer_id WHERE o.order_date >= DATEADD(year, -1, GETDATE()) GROUP BY c.customer_id ) SELECT TOP 5 c.customer_name, l.total_spent, c.join_date FROM last_year_orders l JOIN customers c ON l.customer_id = c.customer_id ORDER BY l.total_spent DESC",SQL,unknown,Intermediate,"Data Analyst, Aggregate function, Join, CTE","SELECT c.customer_name, c.join_date, SUM(o.total_amount) AS total_spent FROM customers c JOIN orders o ON c.customer_id = o.customer_id WHERE o.order_date >= DATEADD(year, -1, GETDATE()) GROUP BY c.customer_name, c.join_date ORDER BY total_spent DESC LIMIT 5",Not Available,This query first creates a Common Table Expression (CTE) that calculates the total amount spent by each customer in the last year. It then selects the top 5 customers based on the total amount spent and retrieves their names and join dates
170,"You are analyzing sales data for a retail company that stores customer purchases in a table named `sales`, which includes the columns `customer_id`, `product_id`, `sales_date`, and `amount`. Additionally, there is a `customers` table with `customer_id`, `customer_name`, and `signup_date`. Write a SQL query to find the top three customers by total purchase amount in the last year, including their total purchases, and display their customer names along with the respective total purchase amounts","WITH last_year_sales AS ( SELECT customer_id, SUM(amount) AS total_amount FROM sales WHERE sales_date >= DATEADD(year, -1, GETDATE()) GROUP BY customer_id ) SELECT c.customer_name, l.total_amount FROM last_year_sales l JOIN customers c ON l.customer_id = c.customer_id ORDER BY l.total_amount DESC OFFSET 0 ROWS FETCH NEXT 3 ROWS ONLY",SQL,unknown,Advanced,"Data Analyst, SQL, Aggregate Function, Join, CTE","WITH last_year_sales AS ( SELECT customer_id, SUM(amount) AS total_amount FROM sales WHERE sales_date >= DATEADD(year, -1, GETDATE()) GROUP BY customer_id ) SELECT c.customer_name, l.total_amount FROM last_year_sales l JOIN customers c ON l.customer_id = c.customer_id ORDER BY l.total_amount DESC OFFSET 0 ROWS FETCH NEXT 3 ROWS ONLY",Not Available,The SQL code uses a Common Table Expression (CTE) to calculate the total purchase amount for each customer in the last year. It then joins this result with the `customers` table to get customer names and retrieves the top three customers sorted by total purchases
171,"You have two tables: `orders` (order_id, customer_id, order_date, total_amount) and `customers` (customer_id, customer_name, country). Write a SQL query to find the total number of orders and total amount spent by each customer, and also the country they are from, for customers who have placed more than 5 orders. Order the results by total_amount in descending order","SELECT c.customer_id, c.customer_name, c.country, COUNT(o.order_id) AS total_orders, SUM(o.total_amount) AS total_spent FROM customers c JOIN orders o ON c.customer_id = o.customer_id GROUP BY c.customer_id, c.customer_name, c.country HAVING COUNT(o.order_id) > 5 ORDER BY total_spent DESC",SQL,unknown,Intermediate,"[""Data Analyst"", ""Business Analyst"", ""Join"", ""Aggregate function""]",Not Available,"The query joins the `customers` and `orders` tables on the common `customer_id`, groups the results by customer details, counts the number of orders per customer, calculates the total amount spent, filters those with more than 5 orders using HAVING, and finally orders the results by the total spent amount in descending order","Candidates might forget to group by all selected non-aggregated columns, misuse HAVING instead of WHERE, or incorrectly calculate totals"
172,"You are tasked with finding the top three products with the highest total sales for each month from a sales table that includes order date, product id, and sales amount. How would you write a SQL query to achieve this?","WITH MonthlySales AS (SELECT PRODUCT_ID, DATE_TRUNC('month', ORDER_DATE) AS Order_Month, SUM(SALES_AMOUNT) AS Total_Sales FROM Sales GROUP BY PRODUCT_ID, Order_Month) SELECT Order_Month, PRODUCT_ID, Total_Sales FROM (SELECT Order_Month, PRODUCT_ID, Total_Sales, ROW_NUMBER() OVER (PARTITION BY Order_Month ORDER BY Total_Sales DESC) AS Sales_Rank FROM MonthlySales) AS RankedSales WHERE Sales_Rank <= 3 ORDER BY Order_Month, Sales_Rank",SQL,unknown,Advanced,"['Data Analyst', 'Data Engineer', 'Aggregate function', 'Window function', 'CTE']","WITH MonthlySales AS (SELECT PRODUCT_ID, DATE_TRUNC('month', ORDER_DATE) AS Order_Month, SUM(SALES_AMOUNT) AS Total_Sales FROM Sales GROUP BY PRODUCT_ID, Order_Month) SELECT Order_Month, PRODUCT_ID, Total_Sales FROM (SELECT Order_Month, PRODUCT_ID, Total_Sales, ROW_NUMBER() OVER (PARTITION BY Order_Month ORDER BY Total_Sales DESC) AS Sales_Rank FROM MonthlySales) AS RankedSales WHERE Sales_Rank <= 3 ORDER BY Order_Month, Sales_Rank",Not Available,"This query first calculates total sales for each product grouped by month using a Common Table Expression (CTE). Then, it ranks the products based on their total sales for each month using the ROW_NUMBER() window function, filtering to include only the top three ranked products for each month"
173,"You are given two tables, `employees` and `departments`. The `employees` table has the columns: `employee_id`, `name`, `salary`, `department_id`, and the `departments` table has `department_id` and `department_name`. Write a SQL query to find the department name and the average salary of employees in each department, but only include departments with an average salary greater than 50000. Order the results by average salary in descending order","SELECT d.department_name, AVG(e.salary) AS average_salary FROM employees e JOIN departments d ON e.department_id = d.department_id GROUP BY d.department_name HAVING AVG(e.salary) > 50000 ORDER BY average_salary DESC",SQL,unknown,Intermediate,"['Join', 'Aggregate function', 'Group By', 'Having']","SELECT d.department_name, AVG(e.salary) AS average_salary FROM employees e JOIN departments d ON e.department_id = d.department_id GROUP BY d.department_name HAVING AVG(e.salary) > 50000 ORDER BY average_salary DESC",Not Available,"This query joins the two tables based on the department ID, calculates the average salary for each department using `AVG()`, filters the results with `HAVING` to include only those with an average salary over 50000, and orders the results by average salary in descending order"
174,"You are provided with two tables: 'employees' (id, name, department_id, salary) and 'departments' (id, department_name). Write a SQL query to find the average salary of employees for each department and the department names. If a department has no employees, it should still be included in the results with an average salary of NULL. Sort the results by department name","SELECT d.department_name, AVG(e.salary) AS average_salary FROM departments d LEFT JOIN employees e ON d.id = e.department_id GROUP BY d.department_name ORDER BY d.department_name",SQL,unknown,Intermediate,"Join, Aggregate function, NULL handling","SELECT d.department_name, AVG(e.salary) AS average_salary FROM departments d LEFT JOIN employees e ON d.id = e.department_id GROUP BY d.department_name ORDER BY d.department_name",Not Available,"This query performs a LEFT JOIN between the 'departments' and 'employees' tables to include all departments, even those without employees. It groups the results by department name and calculates the average salary, returning NULL for departments without employees"
175,"You are working with two tables: `orders` and `customers`. The `orders` table contains `order_id`, `customer_id`, and `total_amount`. The `customers` table contains `customer_id`, `customer_name`, and `country`. Write a SQL query to find the total order amount for each customer along with their name sorted by the total amount in descending order. If a customer has not placed any orders, include the customer in the results with a total_order_amount of 0","SELECT c.customer_name, COALESCE(SUM(o.total_amount), 0) AS total_order_amount FROM customers c LEFT JOIN orders o ON c.customer_id = o.customer_id GROUP BY c.customer_name ORDER BY total_order_amount DESC",SQL,unknown,Intermediate,"Data Analyst, Aggregate Function, Joins","SELECT c.customer_name, COALESCE(SUM(o.total_amount), 0) AS total_order_amount FROM customers c LEFT JOIN orders o ON c.customer_id = o.customer_id GROUP BY c.customer_name ORDER BY total_order_amount DESC",Not Available,"This query uses a LEFT JOIN to link the `customers` table with the `orders` table, ensuring that all customers are listed, even those without orders. The `COALESCE` function is used to substitute NULL values with 0 for customers without orders, and the result is grouped by customer name and ordered by total order amount in descending order"
176,"You have a table named 'employees' with columns 'employee_id', 'name', 'department_id', and 'salary'. There's another table named 'departments' with columns 'department_id' and 'department_name'. Write a SQL query that retrieves the total salary paid out in each department along with the department name, but only include departments where the total salary is above $250,000","SELECT d.department_name, SUM(e.salary) AS total_salary FROM employees e JOIN departments d ON e.department_id = d.department_id GROUP BY d.department_name HAVING SUM(e.salary) > 250000",SQL,unknown,Intermediate,"Join, Aggregate function, Group By, Having","SELECT d.department_name, SUM(e.salary) AS total_salary FROM employees e JOIN departments d ON e.department_id = d.department_id GROUP BY d.department_name HAVING SUM(e.salary) > 250000",Not Available,"This query joins the 'employees' table to the 'departments' table on 'department_id', sums the salaries grouped by department, and filters the results to only include departments where the total salary exceeds $250,000"
177,"Given a 'sales' table with columns 'sales_id', 'product_id', 'amount', and a 'products' table with 'product_id' and 'category', write a SQL query to find the total sales amount for each product category in the last quarter. Sort the results by the total sales amount in descending order","SELECT p.category, SUM(s.amount) AS total_sales FROM sales s JOIN products p ON s.product_id = p.product_id WHERE s.sale_date >= DATEADD(QUARTER, -1, GETDATE()) GROUP BY p.category ORDER BY total_sales DESC",SQL,unknown,Intermediate,"Data Analyst, Aggregate Function, Join","SELECT p.category, SUM(s.amount) AS total_sales FROM sales s JOIN products p ON s.product_id = p.product_id WHERE s.sale_date >= DATEADD(QUARTER, -1, GETDATE()) GROUP BY p.category ORDER BY total_sales DESC",Not Available,"This SQL query joins the 'sales' and 'products' tables on 'product_id', filters the sales data for the last quarter, groups the results by product category, and calculates the total sales amount for each category, sorting them in descending order"
178,"Given a sales database with two tables, 'sales' and 'customers', write an SQL query to find the total sales amount for each customer along with the customer's name, and rank them in descending order of total sales. Include only customers who have made purchases greater than $500. The 'sales' table has columns: sale_id, customer_id, amount, and sale_date. The 'customers' table has columns: customer_id, customer_name","WITH CustomerSales AS (SELECT c.customer_name, SUM(s.amount) AS total_sales FROM customers c JOIN sales s ON c.customer_id = s.customer_id GROUP BY c.customer_name HAVING SUM(s.amount) > 500) SELECT customer_name, total_sales, RANK() OVER (ORDER BY total_sales DESC) AS sales_rank FROM CustomerSales",SQL,unknown,Advanced,"Data Analyst, Aggregate Function, CTE, Window Function","WITH CustomerSales AS (SELECT c.customer_name, SUM(s.amount) AS total_sales FROM customers c JOIN sales s ON c.customer_id = s.customer_id GROUP BY c.customer_name HAVING SUM(s.amount) > 500) SELECT customer_name, total_sales, RANK() OVER (ORDER BY total_sales DESC) AS sales_rank FROM CustomerSales",Not Available,"This query first creates a common table expression (CTE) named CustomerSales that calculates the total sales for each customer, filtering those with total sales greater than $500. The main SELECT query then ranks the customers based on their total sales in descending order"
179,"Given a sales database with tables `orders` (order_id, customer_id, order_date, total_amount) and `customers` (customer_id, name, join_date), write a SQL query to find the top 5 customers who have spent the most in total over all their orders. Include the total amount spent and the customer's name","SELECT c.name, SUM(o.total_amount) AS total_spent FROM customers c JOIN orders o ON c.customer_id = o.customer_id GROUP BY c.name ORDER BY total_spent DESC LIMIT 5",SQL,intermediate,"{Data Analyst, Data Engineer, Aggregate function, Join}","SELECT c.name, SUM(o.total_amount) AS total_spent FROM customers c JOIN orders o ON c.customer_id = o.customer_id GROUP BY c.name ORDER BY total_spent DESC LIMIT 5",Not Available,"This query joins the customers and orders tables on customer_id, aggregates the total amount spent by each customer using SUM, groups the results by customer name, orders them by total spent in descending order, and limits the output to the top 5","Common mistakes could include forgetting to join the tables correctly, using wrong aggregation functions, or omitting the GROUP BY clause leading to errors"
180,"You have two tables: `Customers` (CustomerID, CustomerName, Country) and `Orders` (OrderID, CustomerID, OrderDate, Amount). Write a SQL query to find the total order amount for each customer from the 'USA' and display their names sorted by total amount in descending order","SELECT C.CustomerName, SUM(O.Amount) AS TotalAmount FROM Customers C JOIN Orders O ON C.CustomerID = O.CustomerID WHERE C.Country = 'USA' GROUP BY C.CustomerName ORDER BY TotalAmount DESC",SQL,unknown,Intermediate,"['Join', 'Aggregate Function', 'Data Analysis']","SELECT C.CustomerName, SUM(O.Amount) AS TotalAmount FROM Customers C JOIN Orders O ON C.CustomerID = O.CustomerID WHERE C.Country = 'USA' GROUP BY C.CustomerName ORDER BY TotalAmount DESC",Not Available,"This query joins the `Customers` and `Orders` tables on `CustomerID`, filters for customers in the USA, groups the results by customer name, and calculates the total order amount for each customer, sorted in descending order"
181,"You are working with two tables: `employees` (with columns: `id`, `name`, `department_id`, `salary`) and `departments` (with columns: `id`, `department_name`). Write a query to find the average salary of employees for each department, and also include the department name. The result should show department names along with their respective average salaries. Sort the results by average salary in descending order","SELECT d.department_name, AVG(e.salary) AS average_salary FROM employees e JOIN departments d ON e.department_id = d.id GROUP BY d.department_name ORDER BY average_salary DESC",SQL,unknown,Intermediate,"Data Analyst, Join, Aggregate function","SELECT d.department_name, AVG(e.salary) AS average_salary FROM employees e JOIN departments d ON e.department_id = d.id GROUP BY d.department_name ORDER BY average_salary DESC",Not Available,"This query joins the `employees` and `departments` tables, calculates the average salary for each department, groups by department name, and sorts the results by average salary in descending order"
182,"You are given two tables: `employees` (with columns `employee_id`, `name`, and `department_id`) and `departments` (with columns `department_id` and `department_name`). Write a SQL query to find the total number of employees in each department, including departments with no employees, and order the results by the department name","SELECT d.department_name, COUNT(e.employee_id) AS total_employees FROM departments d LEFT JOIN employees e ON d.department_id = e.department_id GROUP BY d.department_name ORDER BY d.department_name",SQL,unknown,Intermediate,"[""Join"", ""Aggregate Function"", ""Data Analysis""]","SELECT d.department_name, COUNT(e.employee_id) AS total_employees FROM departments d LEFT JOIN employees e ON d.department_id = e.department_id GROUP BY d.department_name ORDER BY d.department_name",Not Available,"This query uses a LEFT JOIN to include all departments, even those without employees, and counts employees grouped by department name"
183,"Consider a database with two tables: 'employees' (employee_id, employee_name, department_id) and 'salaries' (employee_id, salary, effective_date). Write a SQL query to find the highest salary of each department along with the corresponding employee names","WITH DepartmentSalaries AS ( SELECT e.department_id, e.employee_name, s.salary, ROW_NUMBER() OVER (PARTITION BY e.department_id ORDER BY s.salary DESC) AS rank FROM employees e JOIN salaries s ON e.employee_id = s.employee_id ) SELECT department_id, employee_name, salary FROM DepartmentSalaries WHERE rank = 1",SQL,unknown,Advanced,"[""Data Analyst"", ""Data Engineer"", ""Aggregate Function"", ""Window Function""]","WITH DepartmentSalaries AS ( SELECT e.department_id, e.employee_name, s.salary, ROW_NUMBER() OVER (PARTITION BY e.department_id ORDER BY s.salary DESC) AS rank FROM employees e JOIN salaries s ON e.employee_id = s.employee_id ) SELECT department_id, employee_name, salary FROM DepartmentSalaries WHERE rank = 1",Not Available,"This SQL query uses a Common Table Expression (CTE) to first rank salaries within each department using the ROW_NUMBER() window function. It then selects only those records where the rank equals 1, which corresponds to the highest salary in each department"
184,"You are given two tables: `employees` (employee_id, name, department_id, salary) and `departments` (department_id, department_name). Write a query to find the average salary of employees in each department, but only include those departments where the average salary is greater than the overall average salary across all employees","WITH DepartmentAvg AS ( SELECT d.department_name, AVG(e.salary) AS avg_salary FROM employees e JOIN departments d ON e.department_id = d.department_id GROUP BY d.department_name ) SELECT department_name, avg_salary FROM DepartmentAvg WHERE avg_salary > (SELECT AVG(salary) FROM employees)",SQL,unknown,Intermediate,"['Join', 'Aggregate function', 'CTE']","SELECT d.department_name, AVG(e.salary) AS avg_salary FROM employees e JOIN departments d ON e.department_id = d.department_id GROUP BY d.department_name HAVING AVG(e.salary) > (SELECT AVG(salary) FROM employees)",Not Available,"This query first calculates the average salary for each department using a common table expression (CTE) called `DepartmentAvg`, then filters for those departments where the average salary exceeds the overall average salary computed from the `employees` table"
185,"You are given two tables: `sales` (with columns `id`, `product_id`, `amount`, `sale_date`) and `products` (with columns `id`, `name`, `category_id`). Write an SQL query to find the total sales amount for each product along with the product name and category, making sure to include products with no sales as well","SELECT p.id, p.name, COALESCE(SUM(s.amount), 0) AS total_sales FROM products p LEFT JOIN sales s ON p.id = s.product_id GROUP BY p.id, p.name ORDER BY total_sales DESC",SQL,unknown,Intermediate,"Data Analyst, Join, Aggregate Function","SELECT p.id, p.name, COALESCE(SUM(s.amount), 0) AS total_sales FROM products p LEFT JOIN sales s ON p.id = s.product_id GROUP BY p.id, p.name ORDER BY total_sales DESC",Not Available,"This query uses a LEFT JOIN to include all products from the `products` table, regardless of whether they have any corresponding sales in the `sales` table. The COALESCE function ensures that products without sales show a total sales amount of 0, while GROUP BY aggregates the sales by product"
186,"You are tasked with analyzing sales data from a retail company. The company has two tables: `sales` (containing fields: `sale_id`, `customer_id`, `product_id`, `amount`, `sale_date`) and `customers` (containing fields: `customer_id`, `customer_name`, `signup_date`). Your job is to generate a report listing each customer along with their total sales amount and the first sale date, only for those customers who have made at least one sale. The report should be sorted by total sales in descending order","WITH customer_sales AS ( SELECT c.customer_id, c.customer_name, SUM(s.amount) AS total_sales, MIN(s.sale_date) AS first_sale_date FROM customers c JOIN sales s ON c.customer_id = s.customer_id GROUP BY c.customer_id, c.customer_name ) SELECT customer_id, customer_name, total_sales, first_sale_date FROM customer_sales WHERE total_sales > 0 ORDER BY total_sales DESC",SQL,unknown,Intermediate,"['Data Analyst', 'Data Engineer', 'Join', 'Aggregate function', 'CTE']","WITH customer_sales AS ( SELECT c.customer_id, c.customer_name, SUM(s.amount) AS total_sales, MIN(s.sale_date) AS first_sale_date FROM customers c JOIN sales s ON c.customer_id = s.customer_id GROUP BY c.customer_id, c.customer_name ) SELECT customer_id, customer_name, total_sales, first_sale_date FROM customer_sales WHERE total_sales > 0 ORDER BY total_sales DESC",Not Available,"The query uses a Common Table Expression (CTE) to first aggregate sales data by customer, calculating both the total sales amount and the date of the first sale. It uses the JOIN operation to combine data from the `customers` and `sales` tables and filters for customers who have made sales. Finally, it sorts the results by total sales amount in descending order"
187,"You have a sales database with two tables: 'orders' and 'customers'. The 'orders' table includes fields: order_id, customer_id, order_date, and total_amount. The 'customers' table includes fields: customer_id, customer_name, and region. Write a SQL query to find the total sales amount for each customer by region, along with the customer name and region. The result should only include customers with total sales greater than $500","SELECT c.customer_name, c.region, SUM(o.total_amount) AS total_sales FROM customers c JOIN orders o ON c.customer_id = o.customer_id GROUP BY c.customer_name, c.region HAVING SUM(o.total_amount) > 500",SQL,unknown,Intermediate,"['Join', 'Aggregate function', 'Group By']","SELECT c.customer_name, c.region, SUM(o.total_amount) AS total_sales FROM customers c JOIN orders o ON c.customer_id = o.customer_id GROUP BY c.customer_name, c.region HAVING SUM(o.total_amount) > 500",Not Available,"This query joins the customers and orders tables on customer_id, groups the results by customer name and region, calculates the total sales amount using SUM, and filters the results using HAVING to show only those with sales greater than $500"
188,"Suppose you work for an e-commerce company, and you need to analyze the sales data. You have two tables: 'orders' (with columns 'order_id', 'customer_id', 'order_date', and 'total_amount') and 'customers' (with columns 'customer_id', 'customer_name', and 'customer_since'). Write a SQL query to find the total sales amount for each customer who made more than 5 orders, along with their names and the year they became a customer. Sort the results by total sales in descending order","SELECT c.customer_name, YEAR(c.customer_since) AS customer_since_year, SUM(o.total_amount) AS total_sales FROM customers c JOIN orders o ON c.customer_id = o.customer_id GROUP BY c.customer_id, c.customer_name, c.customer_since HAVING COUNT(o.order_id) > 5 ORDER BY total_sales DESC",SQL,unknown,Intermediate,"[""Join"", ""Aggregate function"", ""Group By""]",Not Available,"This query joins the 'customers' and 'orders' tables on 'customer_id', aggregates the total sales for each customer, and filters out customers with 5 or fewer orders. The results are sorted by total sales amount",Candidates might forget to include the COUNT in the HAVING clause or might miss grouping by all required columns
189,"Given two tables: `customers` (customer_id, name, country) and `orders` (order_id, customer_id, order_date, total_amount), write an SQL query to find the top 3 customers who spent the most in total across all their orders. Include their names and total spend amount","SELECT c.name, SUM(o.total_amount) AS total_spent FROM customers c JOIN orders o ON c.customer_id = o.customer_id GROUP BY c.customer_id ORDER BY total_spent DESC LIMIT 3",SQL,intermediate,"Data Analyst, Join, Aggregate function","SELECT c.name, SUM(o.total_amount) AS total_spent FROM customers c JOIN orders o ON c.customer_id = o.customer_id GROUP BY c.customer_id ORDER BY total_spent DESC LIMIT 3",Not Available,"This query joins the `customers` table with the `orders` table on the `customer_id`, then it aggregates the total orders for each customer using `SUM()`, groups the resulting data by `customer_id`, orders it in descending order of spending, and finally limits the result to the top 3 customers","Candidates might forget to include the `GROUP BY` clause or mistakenly sum the wrong column, leading to incorrect totals. They may also forget to use `LIMIT` to restrict the number of results"
190,"How can you find the top 3 products by sales in each category from the 'products' and 'sales' tables, and what are the total sales for these products?","WITH RankedProducts AS (SELECT p.product_id, p.product_name, p.category_id, SUM(s.amount) AS total_sales, ROW_NUMBER() OVER (PARTITION BY p.category_id ORDER BY SUM(s.amount) DESC) AS rank FROM products p JOIN sales s ON p.product_id = s.product_id GROUP BY p.product_id, p.product_name, p.category_id) SELECT product_id, product_name, category_id, total_sales FROM RankedProducts WHERE rank <= 3",SQL,unknown,Intermediate,"Data Analyst, Business Intelligence, Aggregate function, Window function","WITH RankedProducts AS (SELECT p.product_id, p.product_name, p.category_id, SUM(s.amount) AS total_sales, ROW_NUMBER() OVER (PARTITION BY p.category_id ORDER BY SUM(s.amount) DESC) AS rank FROM products p JOIN sales s ON p.product_id = s.product_id GROUP BY p.product_id, p.product_name, p.category_id) SELECT product_id, product_name, category_id, total_sales FROM RankedProducts WHERE rank <= 3",Not Available,The query uses a Common Table Expression (CTE) to first rank the products based on their total sales within each category using the ROW_NUMBER() function. It then selects the top 3 products by sales from this ranked result set while grouping by product details
191,"You are working with a sales database that contains a `customers` table, an `orders` table, and an `order_items` table. Write a SQL query to find the top 3 customers by total order amount in the last year. The tables are structured as follows: `customers` (customer_id, name), `orders` (order_id, customer_id, order_date), and `order_items` (order_item_id, order_id, product_id, quantity, price)","SELECT c.name, SUM(oi.quantity * oi.price) AS total_order_amount FROM customers c JOIN orders o ON c.customer_id = o.customer_id JOIN order_items oi ON o.order_id = oi.order_id WHERE o.order_date >= DATEADD(year, -1, GETDATE()) GROUP BY c.customer_id, c.name ORDER BY total_order_amount DESC LIMIT 3",SQL,unknown,Advanced,"['SQL', 'Join', 'Aggregation', 'Data Analysis']","SELECT c.name, SUM(oi.quantity * oi.price) AS total_order_amount FROM customers c JOIN orders o ON c.customer_id = o.customer_id JOIN order_items oi ON o.order_id = oi.order_id WHERE o.order_date >= DATEADD(year, -1, GETDATE()) GROUP BY c.customer_id, c.name ORDER BY total_order_amount DESC LIMIT 3",Not Available,"This query joins the three tables to match customers with their respective orders and order items. It filters for orders from the last year, groups the results by customer, calculates the total order amounts, sorts them in descending order, and selects the top three customers"
192,"You are given two tables: 'Sales' (with columns: 'sales_id', 'product_id', 'amount', 'sale_date') and 'Products' (with columns: 'product_id', 'product_name', 'category'). Write a SQL query to find the total sales amount and the number of sales for each product category for the year 2023. Sort the results by total sales amount in descending order","SELECT p.category, COUNT(s.sales_id) AS total_sales, SUM(s.amount) AS total_amount FROM Sales s JOIN Products p ON s.product_id = p.product_id WHERE YEAR(s.sale_date) = 2023 GROUP BY p.category ORDER BY total_amount DESC",SQL,unknown,Intermediate,"Data Analyst, Join, Aggregate function","SELECT p.category, COUNT(s.sales_id) AS total_sales, SUM(s.amount) AS total_amount FROM Sales s JOIN Products p ON s.product_id = p.product_id WHERE YEAR(s.sale_date) = 2023 GROUP BY p.category ORDER BY total_amount DESC",Not Available,"This query joins the 'Sales' table with the 'Products' table to aggregate total sales and count of sales for each product category for the year 2023, using GROUP BY and ORDER BY"
193,"You are working at a retail company, and you need to analyze customer purchase behavior. You have two tables: `customers` (with fields `customer_id`, `customer_name`, `signup_date`, and `country`) and `purchases` (with fields `purchase_id`, `customer_id`, `purchase_date`, and `amount`). Write a SQL query to find the total spending of each customer who signed up in the year 2020, along with their name and the number of purchases they made. Sort the results by total spending in descending order","SELECT c.customer_name, SUM(p.amount) AS total_spending, COUNT(p.purchase_id) AS purchase_count FROM customers AS c LEFT JOIN purchases AS p ON c.customer_id = p.customer_id WHERE YEAR(c.signup_date) = 2020 GROUP BY c.customer_id ORDER BY total_spending DESC",SQL,unknown,Intermediate,"[""Data Analyst"", ""Join"", ""Aggregate function""]",Not Available,"This SQL query retrieves customer names, their total spending, and the count of their purchases for those who signed up in 2020. It uses a LEFT JOIN to connect `customers` and `purchases`, filtering by signup date and grouping results to calculate total spending and purchase count","Candidates might forget to include the filtering condition for signup year or might use an INNER JOIN instead of a LEFT JOIN, potentially excluding customers with no purchases"
194,"You are given two tables: `employees` and `salaries`. The `employees` table contains the columns: `employee_id`, `first_name`, `last_name`, and `department_id`. The `salaries` table contains the columns: `employee_id`, `salary`, and `effective_date`. Write a SQL query to find the average salary of employees by department, considering only the most recent salary for each employee","WITH latest_salaries AS (SELECT employee_id, salary, RANK() OVER (PARTITION BY employee_id ORDER BY effective_date DESC) as rnk FROM salaries) SELECT e.department_id, AVG(ls.salary) as average_salary FROM employees e JOIN latest_salaries ls ON e.employee_id = ls.employee_id WHERE ls.rnk = 1 GROUP BY e.department_id",SQL,unknown,Advanced,"[""Data Analyst"", ""Data Engineer"", ""Aggregate function"", ""CTE"", ""Join""]",Not Available,This query first creates a Common Table Expression (CTE) called `latest_salaries` to identify the most recent salary for each employee using a window function. It then joins this CTE with the `employees` table to calculate the average salary by department while filtering to only include the latest salary record,"Candidates might forget to partition by `employee_id` in the `RANK()` function, leading to incorrect results, or forget to filter on `rnk = 1`, which may include outdated salary records"
195,"You are given two tables: `employees` (with columns `employee_id`, `name`, `department_id`) and `departments` (with columns `department_id`, `department_name`, `manager_id`). Write an SQL query to find the names of employees who work in departments managed by managers whose names start with the letter 'J'",SELECT e.name FROM employees e INNER JOIN departments d ON e.department_id = d.department_id INNER JOIN employees m ON d.manager_id = m.employee_id WHERE m.name LIKE 'J%',SQL,unknown,Intermediate,"['Join', 'Data Analysis', 'Subquery']",SELECT e.name FROM employees e INNER JOIN departments d ON e.department_id = d.department_id INNER JOIN employees m ON d.manager_id = m.employee_id WHERE m.name LIKE 'J%',Not Available,This query uses INNER JOINs to join the `employees` table with the `departments` table and then again joins it with the `employees` table to find managers. The WHERE clause filters those managers whose names start with 'J'
196,"You are given two tables: `employees` (employee_id, department_id, salary) and `departments` (department_id, department_name). Write a SQL query to find the average salary for each department, but only include departments where the average salary exceeds $50,000. Sort the results by average salary in descending order","SELECT d.department_name, AVG(e.salary) AS average_salary
FROM employees e
JOIN departments d ON e.department_id = d.department_id
GROUP BY d.department_name
HAVING AVG(e.salary) > 50000
ORDER BY average_salary DESC",SQL,unknown,Intermediate,"['Join', 'Aggregate function', 'Group By']","SELECT d.department_name, AVG(e.salary) AS average_salary FROM employees e JOIN departments d ON e.department_id = d.department_id GROUP BY d.department_name HAVING AVG(e.salary) > 50000 ORDER BY average_salary DESC",Not Available,"This query calculates the average salary for each department by joining the `employees` and `departments` tables. It groups the results by department name and filters out departments with an average salary of $50,000 or less"
197,"Given a sales database with two tables: `sales` (with columns `id`, `amount`, `date`, and `customer_id`) and `customers` (with columns `id`, `name`, and `join_date`), write a SQL query to find the names of customers who spent more than the average amount on sales in the last quarter of 2023. Consider their total spending only if they joined before 2023",SELECT c.name FROM customers c JOIN sales s ON c.id = s.customer_id WHERE s.date >= '2023-10-01' AND s.date < '2024-01-01' AND c.join_date < '2023-01-01' GROUP BY c.id HAVING SUM(s.amount) > (SELECT AVG(amount) FROM sales WHERE date >= '2023-10-01' AND date < '2024-01-01'),SQL,unknown,Advanced,"[""Data Analyst"", ""Data Engineer"", ""Join"", ""Aggregate function""]",SELECT c.name FROM customers c JOIN sales s ON c.id = s.customer_id WHERE s.date >= '2023-10-01' AND s.date < '2024-01-01' AND c.join_date < '2023-01-01' GROUP BY c.id HAVING SUM(s.amount) > (SELECT AVG(amount) FROM sales WHERE date >= '2023-10-01' AND date < '2024-01-01'),Not Available,"This query first joins the `customers` and `sales` tables, filters sales to the last quarter of 2023, ensures customers joined before 2023, then groups results by customer ID. It applies a HAVING clause to filter those whose total sales exceed the calculated average of sales during that period"
198,"You have two tables, 'orders' and 'customers'. The 'orders' table contains columns `order_id`, `customer_id`, `order_date`, and `amount`. The 'customers' table contains `customer_id`, `customer_name`, and `customer_since`. Write an SQL query to find the total order amount made by each customer since the year 2020, along with their names, and display the results in descending order of the total amount","SELECT c.customer_name, SUM(o.amount) AS total_order_amount FROM customers c JOIN orders o ON c.customer_id = o.customer_id WHERE o.order_date >= '2020-01-01' GROUP BY c.customer_name ORDER BY total_order_amount DESC",SQL,unknown,Intermediate,"['Join', 'Aggregation', 'Data Analysis']","SELECT c.customer_name, SUM(o.amount) AS total_order_amount FROM customers c JOIN orders o ON c.customer_id = o.customer_id WHERE o.order_date >= '2020-01-01' GROUP BY c.customer_name ORDER BY total_order_amount DESC",Not Available,"This query joins the 'customers' and 'orders' tables based on the `customer_id`, filters the orders dated from 2020 onwards, aggregates the total order amount per customer, and orders the results in descending order of the total amount"
199,"You are given two tables: `Employees (EmployeeID, Name, DepartmentID, Salary)` and `Departments (DepartmentID, DepartmentName)`. Write a SQL query to find the highest-paid employee in each department along with their department name. In case of a tie in salaries, return all employees who have the highest salary in that department","WITH RankedSalaries AS ( SELECT e.Name, e.Salary, d.DepartmentName, RANK() OVER (PARTITION BY e.DepartmentID ORDER BY e.Salary DESC) AS SalaryRank FROM Employees e JOIN Departments d ON e.DepartmentID = d.DepartmentID ) SELECT Name, DepartmentName, Salary FROM RankedSalaries WHERE SalaryRank = 1",SQL,unknown,Advanced,"[""Data Analyst"", ""Data Engineer"", ""Business Intelligence"", ""Window Function""]",Not Available,"This query uses a Common Table Expression (CTE) to rank employees by salary within their departments, then selects those employees who have the highest salary (rank = 1)","Candidates might incorrectly use `ROW_NUMBER()` instead of `RANK()` which would exclude ties, or may forget to include the department information causing incomplete results"
200,"You are given two tables: `employees` with columns `employee_id`, `name`, `manager_id` and `salaries` with columns `employee_id`, `salary`, `effective_date`. Write a SQL query to find the names of employees who earn more than their managers as of the latest effective date",SELECT e.name FROM employees e JOIN salaries s ON e.employee_id = s.employee_id JOIN salaries s_mgr ON e.manager_id = s_mgr.employee_id WHERE s.salary > s_mgr.salary AND s.effective_date = (SELECT MAX(effective_date) FROM salaries),SQL,unknown,Advanced,"[""Data Analyst"", ""Data Engineer"", ""Join"", ""Aggregate function""]",SELECT e.name FROM employees e JOIN salaries s ON e.employee_id = s.employee_id JOIN salaries s_mgr ON e.manager_id = s_mgr.employee_id WHERE s.salary > s_mgr.salary AND s.effective_date = (SELECT MAX(effective_date) FROM salaries),Not Available,This query retrieves the names of employees whose salaries exceed their manager's salary on the most recent salary effective date. It does this by performing a self-join on the `salaries` table to compare employee salaries against their corresponding managers' salaries
201,"You are given two tables: 'Sales' (containing fields: 'sale_id', 'product_id', 'amount', and 'sale_date') and 'Products' (with 'product_id', 'product_name', and 'category'). Write a SQL query to find the total sales amount for each product category over the last month, displaying the category name and total sales amount, and only include categories with total sales over $1000","SELECT P.category, SUM(S.amount) AS total_sales FROM Sales S JOIN Products P ON S.product_id = P.product_id WHERE S.sale_date >= DATEADD(MONTH, -1, GETDATE()) GROUP BY P.category HAVING SUM(S.amount) > 1000",SQL,unknown,Intermediate,"[""Data Analyst"", ""Aggregate Function"", ""Join""]","SELECT P.category, SUM(S.amount) AS total_sales FROM Sales S JOIN Products P ON S.product_id = P.product_id WHERE S.sale_date >= DATEADD(MONTH, -1, GETDATE()) GROUP BY P.category HAVING SUM(S.amount) > 1000",Not Available,This query joins the Sales and Products tables on product_id to aggregate sales data by category. It filters for sales from the last month and returns only categories with total sales exceeding $1000
202,"You are given two tables: 'employees' and 'departments'. The 'employees' table contains employee_ID, name, department_ID, and salary. The 'departments' table contains department_ID and department_name. Write a SQL query to find the average salary of employees in each department, including departments with no employees, and sort the results by department name","SELECT d.department_name, COALESCE(AVG(e.salary), 0) AS average_salary FROM departments d LEFT JOIN employees e ON d.department_ID = e.department_ID GROUP BY d.department_name ORDER BY d.department_name",SQL,unknown,Intermediate,"['Join', 'Aggregate Function', 'Left Join']","SELECT d.department_name, COALESCE(AVG(e.salary), 0) AS average_salary FROM departments d LEFT JOIN employees e ON d.department_ID = e.department_ID GROUP BY d.department_name ORDER BY d.department_name",Not Available,"This query joins the 'departments' table with the 'employees' table using a LEFT JOIN to ensure that even departments with no employees are included. The COALESCE function is used to replace NULL values with 0 for departments without employees, and the results are grouped by department name, then sorted"
203,"You have two tables: 'Employees' (EmployeeID, Name, DepartmentID) and 'Departments' (DepartmentID, DepartmentName). Write a SQL query to find the total number of employees in each department along with the department name. If a department has no employees, it should still be included in the results","SELECT d.DepartmentName, COUNT(e.EmployeeID) AS TotalEmployees FROM Departments d LEFT JOIN Employees e ON d.DepartmentID = e.DepartmentID GROUP BY d.DepartmentName",SQL,unknown,Intermediate,"Data Analyst, Join, Aggregate Function","SELECT d.DepartmentName, COUNT(e.EmployeeID) AS TotalEmployees FROM Departments d LEFT JOIN Employees e ON d.DepartmentID = e.DepartmentID GROUP BY d.DepartmentName",Not Available,"This query uses a LEFT JOIN to combine the 'Departments' table with the 'Employees' table, counting the number of employees per department. Departments without employees are included due to the nature of the LEFT JOIN"
204,"In a company database, you have two tables: 'employees' (with columns 'employee_id', 'department_id', 'salary') and 'departments' (with columns 'department_id', 'department_name', 'location'). Write a SQL query to find the average salary of employees for each department, along with the department name. Sort the results by average salary in descending order","SELECT d.department_name, AVG(e.salary) AS average_salary FROM employees e JOIN departments d ON e.department_id = d.department_id GROUP BY d.department_name ORDER BY average_salary DESC",SQL,unknown,Intermediate,"Data Analyst, Aggregate Function, Join","SELECT d.department_name, AVG(e.salary) AS average_salary FROM employees e JOIN departments d ON e.department_id = d.department_id GROUP BY d.department_name ORDER BY average_salary DESC",Not Available,"This query uses a JOIN to combine the 'employees' and 'departments' tables, then calculates the average salary for each department while grouping results by department name. Finally, results are ordered by average salary in descending order"
205,"Suppose you work for an e-commerce company and you have two tables: 'orders' which stores order information including 'order_id', 'customer_id', 'order_date', and 'amount', and 'customers' which includes 'customer_id', 'customer_name', and 'join_date'. Write a SQL query to find the top 5 customers who spent the most in the last quarter, along with their total spend and the number of orders","WITH monthly_spending AS (SELECT c.customer_id, c.customer_name, SUM(o.amount) AS total_spent, COUNT(o.order_id) AS order_count FROM customers c JOIN orders o ON c.customer_id = o.customer_id WHERE o.order_date >= DATE_TRUNC('quarter', CURRENT_DATE - INTERVAL '1 quarter') AND o.order_date < DATE_TRUNC('quarter', CURRENT_DATE) GROUP BY c.customer_id, c.customer_name) SELECT customer_id, customer_name, total_spent, order_count FROM monthly_spending ORDER BY total_spent DESC LIMIT 5",SQL,unknown,Advanced,"Data Analyst, Data Engineer, Join, Aggregate Function, CTE","WITH monthly_spending AS (SELECT c.customer_id, c.customer_name, SUM(o.amount) AS total_spent, COUNT(o.order_id) AS order_count FROM customers c JOIN orders o ON c.customer_id = o.customer_id WHERE o.order_date >= DATE_TRUNC('quarter', CURRENT_DATE - INTERVAL '1 quarter') AND o.order_date < DATE_TRUNC('quarter', CURRENT_DATE) GROUP BY c.customer_id, c.customer_name) SELECT customer_id, customer_name, total_spent, order_count FROM monthly_spending ORDER BY total_spent DESC LIMIT 5",Not Available,This SQL query uses a Common Table Expression (CTE) to calculate the total spending and number of orders for each customer in the last quarter. It couples JOINs to combine customer data with orders and utilizes GROUP BY to aggregate the data before sorting to find the top 5 customers by spend
206,"You are given two tables: 'employees' with columns (id, name, department_id, salary) and 'departments' with columns (id, department_name). Write a SQL query to find the average salary for each department, and include the department name in the result. Sort the results by average salary in descending order","SELECT d.department_name, AVG(e.salary) AS average_salary FROM employees e JOIN departments d ON e.department_id = d.id GROUP BY d.department_name ORDER BY average_salary DESC",SQL,unknown,Intermediate,"Data Analyst, Join, Aggregate function","SELECT d.department_name, AVG(e.salary) AS average_salary FROM employees e JOIN departments d ON e.department_id = d.id GROUP BY d.department_name ORDER BY average_salary DESC",Not Available,"This query joins the employees and departments tables on the department_id, calculates the average salary for each department, groups by the department name, and orders the results by average salary in descending order"
207,"Given a sales database with tables for `orders`, `customers`, and `products`, write a SQL query to find the top 5 customers who have made the highest total purchase amount in the last quarter. The query should return each customer’s ID, name, and total purchase amount","WITH CustomerPurchases AS ( SELECT c.customer_id, c.customer_name, SUM(o.order_amount) AS total_purchase FROM customers c JOIN orders o ON c.customer_id = o.customer_id WHERE o.order_date >= DATEADD(quarter, -1, GETDATE()) GROUP BY c.customer_id, c.customer_name ) SELECT TOP 5 customer_id, customer_name, total_purchase FROM CustomerPurchases ORDER BY total_purchase DESC",SQL,unknown,Intermediate,"Data Analyst, Aggregation, Join, CTE",SELECT * FROM CustomerPurchases WHERE customer_id IN (SELECT TOP 5 customer_id FROM CustomerPurchases ORDER BY total_purchase DESC),Not Available,"The query first calculates the total purchase amount for each customer in the last quarter using a Common Table Expression (CTE). It then selects the top 5 customers based on their total purchase amounts. The query uses a join to link the `customers` and `orders` tables, and date functions to filter the order dates"
208,"Given two tables, `Employees` (id, name, department_id) and `Departments` (id, department_name), write a SQL query to find the department with the highest average employee salary. If there's a tie, return all tied departments. The `Employees` table has a `salary` field as well","WITH DepartmentAvg AS (SELECT d.department_name, AVG(e.salary) AS average_salary FROM Employees e JOIN Departments d ON e.department_id = d.id GROUP BY d.department_name), MaxAvg AS (SELECT MAX(average_salary) AS max_salary FROM DepartmentAvg) SELECT department_name FROM DepartmentAvg WHERE average_salary = (SELECT max_salary FROM MaxAvg)",SQL,unknown,Intermediate,"Data Analyst, Data Engineer, Join, Aggregate function","WITH DepartmentAvg AS (SELECT d.department_name, AVG(e.salary) AS average_salary FROM Employees e JOIN Departments d ON e.department_id = d.id GROUP BY d.department_name), MaxAvg AS (SELECT MAX(average_salary) AS max_salary FROM DepartmentAvg) SELECT department_name FROM DepartmentAvg WHERE average_salary = (SELECT max_salary FROM MaxAvg)",Not Available,This SQL code first creates a Common Table Expression (CTE) to calculate the average salary for each department. Then it identifies the maximum average salary and selects departments that have this average
209,"You are given two tables: 'Customers' with columns 'CustomerID', 'CustomerName' and 'Region', and 'Orders' with columns 'OrderID', 'CustomerID', 'OrderDate', and 'OrderAmount'. Write a SQL query to find the total order amount for each region, along with the customer name who placed the maximum order in that region. If a region has multiple customers with the same maximum order amount, return all of them. Sort the result by region and then by order amount in descending order","WITH MaxOrders AS ( SELECT Region, CustomerName, MAX(OrderAmount) AS MaxOrderAmount FROM Customers C JOIN Orders O ON C.CustomerID = O.CustomerID GROUP BY Region, CustomerName ) SELECT C.Region, C.CustomerName, SUM(O.OrderAmount) AS TotalOrderAmount FROM Customers C JOIN Orders O ON C.CustomerID = O.CustomerID JOIN MaxOrders M ON C.Region = M.Region AND O.OrderAmount = M.MaxOrderAmount GROUP BY C.Region, C.CustomerName ORDER BY C.Region ASC, TotalOrderAmount DESC",SQL,unknown,Advanced,"Data Analyst, Data Engineer, Aggregate function, Join, CTE","WITH MaxOrders AS ( SELECT Region, CustomerName, MAX(OrderAmount) AS MaxOrderAmount FROM Customers C JOIN Orders O ON C.CustomerID = O.CustomerID GROUP BY Region, CustomerName ) SELECT C.Region, C.CustomerName, SUM(O.OrderAmount) AS TotalOrderAmount FROM Customers C JOIN Orders O ON C.CustomerID = O.CustomerID JOIN MaxOrders M ON C.Region = M.Region AND O.OrderAmount = M.MaxOrderAmount GROUP BY C.Region, C.CustomerName ORDER BY C.Region ASC, TotalOrderAmount DESC",Not Available,"This query uses a Common Table Expression (CTE) to find the maximum order amount per region, then joins this result back to the original tables to calculate the total order per region and customer while ensuring that we only include customers whose order amounts match the maximum"
210,"You are given two tables: 'employees' and 'departments'. The 'employees' table contains employee records with columns 'id', 'name', 'salary', and 'department_id'. The 'departments' table contains department records with columns 'id' and 'department_name'. Write a SQL query to find the average salary of employees in each department and list only those departments where the average salary is above $50,000. Include the department name in your result","SELECT d.department_name, AVG(e.salary) AS average_salary 
 FROM employees e 
 JOIN departments d ON e.department_id = d.id 
 GROUP BY d.department_name 
 HAVING AVG(e.salary) > 50000",SQL,unknown,Intermediate,"[""Data Analyst"", ""Data Engineer"", ""Join"", ""Aggregate Function""]","SELECT d.department_name, AVG(e.salary) AS average_salary FROM employees e JOIN departments d ON e.department_id = d.id GROUP BY d.department_name HAVING AVG(e.salary) > 50000",Not Available,"This SQL query calculates the average salary of employees within each department by using the JOIN clause to combine the 'employees' and 'departments' tables. It groups the results by department name and applies the HAVING clause to filter out departments with an average salary of $50,000 or less"
211,"You are working for a retail company and have two tables: `sales` and `products`. The `sales` table contains records of all transactions with columns `sale_id`, `product_id`, `sale_date`, and `amount`. The `products` table contains details about the products with columns `product_id`, `product_name`, and `category`. Write a SQL query to find the total sales amount for each product category for the month of January 2023","SELECT p.category, SUM(s.amount) as total_sales FROM sales s JOIN products p ON s.product_id = p.product_id WHERE s.sale_date >= '2023-01-01' AND s.sale_date < '2023-02-01' GROUP BY p.category",SQL,unknown,Intermediate,"Data Analyst, SQL, Join, Aggregate function","SELECT p.category, SUM(s.amount) as total_sales FROM sales s JOIN products p ON s.product_id = p.product_id WHERE s.sale_date >= '2023-01-01' AND s.sale_date < '2023-02-01' GROUP BY p.category",Not Available,"The query joins the `sales` and `products` tables on `product_id`, filters sales within January 2023, and groups the results by category to compute the total sales for each category"
212,"You are given two tables: `employees` (id, name, department_id, salary) and `departments` (id, department_name). Write a SQL query to find the average salary of employees for each department, displaying the department name alongside its average salary, and only include departments that have an average salary greater than 50000","SELECT d.department_name, AVG(e.salary) AS average_salary FROM employees e JOIN departments d ON e.department_id = d.id GROUP BY d.department_name HAVING AVG(e.salary) > 50000",SQL,unknown,Intermediate,"[""Join"", ""Aggregate function"", ""Data Analyst""]","SELECT d.department_name, AVG(e.salary) AS average_salary FROM employees e JOIN departments d ON e.department_id = d.id GROUP BY d.department_name HAVING AVG(e.salary) > 50000",Not Available,"This SQL query joins the `employees` and `departments` tables, calculates the average salary per department, and filters the results to show only those departments with an average salary greater than 50000"
213,"Given the following tables: 'sales' (columns: id, product_id, amount, sale_date) and 'products' (columns: id, name, category), write a SQL query that returns the total sales amount for each product category for the month of January 2023","SELECT p.category, SUM(s.amount) AS total_sales FROM sales s JOIN products p ON s.product_id = p.id WHERE s.sale_date >= '2023-01-01' AND s.sale_date < '2023-02-01' GROUP BY p.category",SQL,unknown,Intermediate,"Data Analyst, Aggregate function, Join","SELECT p.category, SUM(s.amount) AS total_sales FROM sales s JOIN products p ON s.product_id = p.id WHERE s.sale_date >= '2023-01-01' AND s.sale_date < '2023-02-01' GROUP BY p.category",Not Available,"This query joins the 'sales' and 'products' tables on their product IDs, filters the sales records to only include those from January 2023, and then aggregates the total sales amount by product category"
214,"You are given two tables: `customers` (customer_id, name, created_at) and `orders` (order_id, customer_id, order_date, amount). Write a SQL query to find the top 3 customers by total order amount in the last year, including their name and total order amount","SELECT c.name, SUM(o.amount) AS total_order_amount 
 FROM customers c 
 JOIN orders o ON c.customer_id = o.customer_id 
 WHERE o.order_date >= DATEADD(year, -1, GETDATE()) 
 GROUP BY c.name 
 ORDER BY total_order_amount DESC 
 LIMIT 3",SQL,unknown,Intermediate,"[""Data Analyst"", ""Business Analyst"", ""Join"", ""Aggregate function""]","SELECT c.name, SUM(o.amount) AS total_order_amount 
 FROM customers c 
 JOIN orders o ON c.customer_id = o.customer_id 
 WHERE o.order_date >= DATEADD(year, -1, GETDATE()) 
 GROUP BY c.name 
 ORDER BY total_order_amount DESC 
 LIMIT 3",Not Available,"This query joins the `customers` and `orders` tables on `customer_id`, filters for orders made in the last year, groups by customer name, sums the order amounts, orders the results by total, and limits the output to the top 3 customers"
215,"Given a sales table with columns: sale_id, product_id, customer_id, sale_date, and amount, write a query to find the top 3 products by total sales amount and include their total sales amount. Additionally, return the names of the products which can be found in a product table with columns: product_id and product_name. Order the results by total sales in descending order","WITH total_sales AS (SELECT product_id, SUM(amount) as total_amount FROM sales GROUP BY product_id) SELECT p.product_name, ts.total_amount FROM total_sales ts JOIN products p ON ts.product_id = p.product_id ORDER BY ts.total_amount DESC LIMIT 3",SQL,unknown,Intermediate,"Join, Aggregate function, CTE","WITH total_sales AS (SELECT product_id, SUM(amount) as total_amount FROM sales GROUP BY product_id) SELECT p.product_name, ts.total_amount FROM total_sales ts JOIN products p ON ts.product_id = p.product_id ORDER BY ts.total_amount DESC LIMIT 3",Not Available,"The query uses a Common Table Expression (CTE) to first calculate the total sales amount per product by aggregating the sales amounts grouped by product_id. It then joins the results with the products table to fetch the product names and orders the combined results by total sales in descending order, limiting the output to the top 3 results"
216,"You are given two tables: `customers` and `orders`. The `customers` table contains information about customers, including `customer_id`, `customer_name`, and `signup_date`. The `orders` table contains `order_id`, `customer_id`, `order_date`, and `total_amount`. Write a SQL query to find the total amount spent by each customer after their signup date. Sort the results by the total amount spent in descending order","WITH TotalSpent AS ( SELECT o.customer_id, SUM(o.total_amount) AS total_amount_spent FROM orders o JOIN customers c ON o.customer_id = c.customer_id WHERE o.order_date > c.signup_date GROUP BY o.customer_id ) SELECT c.customer_name, ts.total_amount_spent FROM TotalSpent ts JOIN customers c ON ts.customer_id = c.customer_id ORDER BY ts.total_amount_spent DESC",SQL,unknown,Intermediate,"[""SQL"", ""Join"", ""Aggregate function"", ""CTE""]",Not Available,"This query uses a Common Table Expression (CTE) named `TotalSpent` to calculate the total amount spent by each customer on orders placed after their signup date. The final selection retrieves the customer name alongside their total spending, sorted in descending order","Candidates might forget to consider the signup date when filtering orders, potentially resulting in incorrect totals. They might also confuse the order of JOINs or incorrectly aggregate data"
217,"You are given two tables: `customers` and `orders`. The `customers` table contains information about customers, including `customer_id`, `customer_name`, and `country`. The `orders` table contains details of orders placed, with `order_id`, `customer_id`, `order_date`, and `total_amount`. Write a SQL query to find the top 5 customers by total order amount who are from 'USA'. Order the results by total amount in descending order","WITH customer_totals AS ( SELECT c.customer_id, c.customer_name, SUM(o.total_amount) AS total_order_amount FROM customers c JOIN orders o ON c.customer_id = o.customer_id WHERE c.country = 'USA' GROUP BY c.customer_id, c.customer_name ) SELECT customer_id, customer_name, total_order_amount FROM customer_totals ORDER BY total_order_amount DESC LIMIT 5",SQL,intermediate,"Data Analyst, Aggregation, Join, CTE","SELECT * FROM ( SELECT c.customer_id, c.customer_name, SUM(o.total_amount) AS total_order_amount FROM customers c JOIN orders o ON c.customer_id = o.customer_id WHERE c.country = 'USA' GROUP BY c.customer_id, c.customer_name ) AS customer_totals ORDER BY total_order_amount DESC LIMIT 5",Not Available,This query uses a Common Table Expression (CTE) to first calculate the total amount spent by each customer from the USA by joining the two tables. It then selects the top 5 customers based on their total order amount,"Common mistakes include forgetting to filter by country in the initial join, not using a CTE or subquery properly, or misordering the final results. Candidates may also mistakenly use GROUP BY incorrectly or fail to aggregate correctly"
218,"You have two tables: 'employees' (with columns 'employee_id', 'name', 'manager_id') and 'sales' (with columns 'employee_id', 'sale_amount', 'sale_date'). Write a SQL query to find the total sales made by each manager, including managers who have no sales by their employees. The output should include the manager's name and their total sales amount","SELECT e.name AS manager_name, COALESCE(SUM(s.sale_amount), 0) AS total_sales FROM employees e LEFT JOIN sales s ON e.employee_id = s.employee_id WHERE e.manager_id IS NULL GROUP BY e.name",SQL,unknown,Intermediate,"Data Analyst, Data Engineer, Join, Aggregate function","SELECT e.name AS manager_name, COALESCE(SUM(s.sale_amount), 0) AS total_sales FROM employees e LEFT JOIN sales s ON e.employee_id = s.employee_id WHERE e.manager_id IS NULL GROUP BY e.name",Not Available,"The query uses a LEFT JOIN to ensure that all managers are listed, even those without sales, and aggregates the sales amounts using SUM. COALESCE is used to handle cases where the total sales are NULL (i.e., no sales records for that manager)"
219,"You are given two tables: 'orders' and 'customers'. The 'orders' table includes 'order_id', 'customer_id', 'order_date', and 'amount'. The 'customers' table includes 'customer_id', 'customer_name', and 'signup_date'. Write an SQL query to find the total spend (sum of 'amount') from each customer who signed up for the service more than a year ago and display their 'customer_name', total spend, and the date of their last order","SELECT c.customer_name, SUM(o.amount) AS total_spend, MAX(o.order_date) AS last_order_date FROM customers c JOIN orders o ON c.customer_id = o.customer_id WHERE c.signup_date < DATEADD(year, -1, GETDATE()) GROUP BY c.customer_name HAVING total_spend > 0 ORDER BY total_spend DESC",SQL,unknown,Intermediate,"[""Join"", ""Aggregate function"", ""Data Analysis""]",Not Available,"This query joins the 'customers' and 'orders' tables on 'customer_id', filters customers who signed up more than a year ago, aggregates their total spend, and retrieves the date of their last order","Candidates may forget to use aggregate functions properly or incorrectly filter or group the results, leading to syntax errors or logical errors in the output"
220,"You are given two tables: `employees` (id, name, department_id, salary) and `departments` (id, department_name). Write a SQL query to find the average salary for each department and the difference between each employee's salary and the average salary of their respective department. Include the employee's name and department name in the results","WITH AvgDeptSalary AS ( SELECT department_id, AVG(salary) AS avg_salary FROM employees GROUP BY department_id ) SELECT e.name, d.department_name, e.salary, ads.avg_salary, (e.salary - ads.avg_salary) AS salary_difference FROM employees e JOIN departments d ON e.department_id = d.id JOIN AvgDeptSalary ads ON e.department_id = ads.department_id",SQL,unknown,Intermediate,"[""SQL"", ""Join"", ""Aggregate function"", ""CTE"", ""Data Analyst""]",Not Available,This query first calculates the average salary for each department using a Common Table Expression (CTE). It then joins the `employees` and `departments` tables along with the CTE to fetch the required fields and calculates the salary difference for each employee from their department's average salary,Common mistakes include: 1. Forgetting to join the CTE with the main query. 2. Incorrectly calculating the average salary or not grouping by department_id. 3. Misunderstanding the salary difference calculation
221,"Given a sales database with a table `sales` containing sales records (`sale_id`, `product_id`, `quantity`, `sale_date`) and a table `products` containing product data (`product_id`, `product_name`, `price`), write a SQL query to find the top 3 best-selling products in terms of total revenue generated. Total revenue is defined as the sum of price times quantity sold for each product","WITH Revenue AS ( SELECT p.product_id, p.product_name, SUM(s.quantity * p.price) AS total_revenue FROM products p JOIN sales s ON p.product_id = s.product_id GROUP BY p.product_id, p.product_name ) SELECT product_id, product_name, total_revenue FROM Revenue ORDER BY total_revenue DESC LIMIT 3",SQL,unknown,Intermediate,"[""""Data Analyst"""", """"Aggregate function"""", """"Join""""]","SELECT p.product_id, p.product_name, SUM(s.quantity * p.price) AS total_revenue FROM products p JOIN sales s ON p.product_id = s.product_id GROUP BY p.product_id, p.product_name ORDER BY total_revenue DESC LIMIT 3",Not Available,"This query uses a Common Table Expression (CTE) to calculate total revenue per product by joining the `products` and `sales` tables, then selects the top 3 products based on total revenue"
222,"You have a sales database with two tables: 'sales' (columns: sale_id, product_id, quantity, sale_date) and 'products' (columns: product_id, product_name, price). Write a SQL query to find the total revenue generated from each product in the last month. The output should include product_id, product_name, total_revenue, and it should order the results by total_revenue in descending order","SELECT p.product_id, p.product_name, SUM(s.quantity * p.price) AS total_revenue 
 FROM sales s 
 JOIN products p ON s.product_id = p.product_id 
 WHERE s.sale_date >= DATEADD(MONTH, -1, GETDATE()) 
 GROUP BY p.product_id, p.product_name 
 ORDER BY total_revenue DESC",SQL,unknown,Intermediate,"[""Data Analyst"", ""Data Engineer"", ""Business Intelligence"", ""Aggregate function"", ""Join""]","SELECT p.product_id, p.product_name, SUM(s.quantity * p.price) AS total_revenue 
 FROM sales s 
 JOIN products p ON s.product_id = p.product_id 
 WHERE s.sale_date >= DATEADD(MONTH, -1, GETDATE()) 
 GROUP BY p.product_id, p.product_name 
 ORDER BY total_revenue DESC",Not Available,"This query computes the total revenue for each product sold in the last month by joining the sales data with product information, calculating revenue using the product price, and aggregating the results"
223,"You are working for an e-commerce company that tracks customer orders. You have two tables: `customers` (with fields `customer_id`, `customer_name`, `registration_date`) and `orders` (with fields `order_id`, `customer_id`, `order_date`, `Total_Amount`). Write a SQL query to find the total amount spent by each customer, including customers who have not made any purchases, and order the result by the highest amount spent","SELECT c.customer_id, c.customer_name, COALESCE(SUM(o.Total_Amount), 0) AS total_spent FROM customers c LEFT JOIN orders o ON c.customer_id = o.customer_id GROUP BY c.customer_id, c.customer_name ORDER BY total_spent DESC",SQL,unknown,Intermediate,"['Data Analyst', 'SQL', 'Join', 'Aggregation']","SELECT c.customer_id, c.customer_name, COALESCE(SUM(o.Total_Amount), 0) AS total_spent FROM customers c LEFT JOIN orders o ON c.customer_id = o.customer_id GROUP BY c.customer_id, c.customer_name ORDER BY total_spent DESC",Not Available,"This query joins the `customers` table with the `orders` table using a LEFT JOIN to ensure all customers are included, regardless of their purchase status. It uses the COALESCE function to replace NULL values with 0 for those customers without orders and groups the result by customer to get the total amount spent"
224,"Consider a database with two tables: `employees` (id, name, department_id, salary) and `departments` (id, department_name). Write an SQL query to find the average salary of employees in each department and list the departments that have an average salary greater than $50,000. Make sure to include all departments, even those with no employees","SELECT d.department_name, AVG(e.salary) AS average_salary FROM departments d LEFT JOIN employees e ON d.id = e.department_id GROUP BY d.department_name HAVING AVG(e.salary) > 50000",SQL,intermediate,"['Data Analyst', 'SQL', 'Join', 'Aggregate function']","SELECT d.department_name, AVG(e.salary) AS average_salary FROM departments d LEFT JOIN employees e ON d.id = e.department_id GROUP BY d.department_name HAVING AVG(e.salary) > 50000",Not Available,"This query uses a LEFT JOIN to include all departments, computes the average salary using the AVG() function, and filters the results using HAVING to only include departments with an average salary greater than $50,000","Candidates might forget to use the LEFT JOIN, which would exclude departments without employees, or incorrectly place the AVG function in the WHERE clause instead of HAVING"
225,"You are tasked with analyzing a company's sales performance across different regions. You have two tables: 'sales' (with columns: sale_id, region, salesperson_id, sale_amount, sale_date) and 'salespeople' (with columns: salesperson_id, name, hire_date). Write a SQL query to determine the total sales amount for each salesperson who has made sales this year, along with their hiring date, sorted by total sales in descending order. Additionally, include only those salespeople who have been hired for at least one year","WITH TotalSales AS ( SELECT salesperson_id, SUM(sale_amount) AS total_sales FROM sales WHERE sale_date >= DATE_TRUNC('year', CURRENT_DATE) GROUP BY salesperson_id ) SELECT sp.name, ts.total_sales, sp.hire_date FROM salespeople sp JOIN TotalSales ts ON sp.salesperson_id = ts.salesperson_id WHERE sp.hire_date <= DATE_TRUNC('year', CURRENT_DATE) - INTERVAL '1 year' ORDER BY ts.total_sales DESC",SQL,unknown,Intermediate,"Join, Aggregate function, CTE","CREATE TABLE sales (sale_id SERIAL PRIMARY KEY, region VARCHAR(50), salesperson_id INT, sale_amount DECIMAL, sale_date DATE)","CREATE TABLE salespeople (salesperson_id SERIAL PRIMARY KEY, name VARCHAR(100), hire_date DATE)",Not Available
226,"Suppose you have two tables: `employees` which contains information about employees (id, name, department_id) and `departments` which contains department details (id, department_name, budget). Write an SQL query to find the total budget for each department along with the number of employees in that department. If a department has no employees, it should still be included in the results with a count of 0","SELECT d.department_name, COUNT(e.id) AS employee_count, d.budget FROM departments d LEFT JOIN employees e ON d.id = e.department_id GROUP BY d.department_name, d.budget",SQL,unknown,Intermediate,"Data Analyst, SQL, Join","SELECT d.department_name, COUNT(e.id) AS employee_count, d.budget FROM departments d LEFT JOIN employees e ON d.id = e.department_id GROUP BY d.department_name, d.budget",Not Available,"This query uses a LEFT JOIN to include all departments from the `departments` table along with the number of employees from the `employees` table. The COUNT aggregate function counts the number of employee IDs and returns 0 for departments with no employees due to the nature of the LEFT JOIN, while the GROUP BY clause ensures results are grouped by department name and budget"
227,"You are provided with two tables: `employees` (with `id`, `name`, `department_id`) and `departments` (with `id`, `department_name`, `location`). Write a SQL query to find the department name and the total number of employees in each department, only including departments with more than 5 employees","SELECT d.department_name, COUNT(e.id) AS total_employees FROM departments d JOIN employees e ON d.id = e.department_id GROUP BY d.department_name HAVING COUNT(e.id) > 5",SQL,unknown,Intermediate,"{Data Analyst, Data Engineer, SQL, Join, Aggregate function}","SELECT d.department_name, COUNT(e.id) AS total_employees FROM departments d JOIN employees e ON d.id = e.department_id GROUP BY d.department_name HAVING COUNT(e.id) > 5",Not Available,"This query performs an inner join between the `departments` and `employees` tables, counts the employees in each department, and filters out departments with 5 or fewer employees using the HAVING clause"
228,"You are working with a sales database that includes the following three tables: 'customers', 'orders', and 'products'. Each customer can place multiple orders, and each order can contain multiple products. Write a SQL query to find the top 5 customers who have spent the most in total. Return their customer ID, total spent, and the number of orders they have made","SELECT c.customer_id, SUM(p.price * oi.quantity) AS total_spent, COUNT(DISTINCT o.order_id) AS total_orders FROM customers c JOIN orders o ON c.customer_id = o.customer_id JOIN order_items oi ON o.order_id = oi.order_id JOIN products p ON oi.product_id = p.product_id GROUP BY c.customer_id ORDER BY total_spent DESC LIMIT 5",SQL,unknown,Advanced,"[""Data Analyst"", ""Data Engineer"", ""Join"", ""Aggregate function""]",Not Available,"This query calculates the total amount spent by each customer by summing the price of the products multiplied by their quantity in the order items. It counts the distinct orders for each customer and orders the results by total spent in descending order, limiting the output to the top 5 customers","Common mistakes include not correctly joining the tables, forgetting to group by customer ID, or mistakenly using COUNT instead of COUNT(DISTINCT) which can lead to inflated order counts"
229,"Given a sales database with tables 'sales' (columns: id, product_id, amount, sale_date) and 'products' (columns: id, name, category), write a SQL query to find the total sales amount for each product category for the last year and display the results in descending order of total sales","WITH LastYearSales AS ( SELECT p.category, SUM(s.amount) AS total_sales FROM sales s INNER JOIN products p ON s.product_id = p.id WHERE s.sale_date >= DATEADD(YEAR, -1, GETDATE()) GROUP BY p.category ) SELECT category, total_sales FROM LastYearSales ORDER BY total_sales DESC",SQL,unknown,Intermediate,"['Join', 'Aggregate Function', 'CTE']","WITH LastYearSales AS ( SELECT p.category, SUM(s.amount) AS total_sales FROM sales s INNER JOIN products p ON s.product_id = p.id WHERE s.sale_date >= DATEADD(YEAR, -1, GETDATE()) GROUP BY p.category ) SELECT category, total_sales FROM LastYearSales ORDER BY total_sales DESC",Not Available,The query uses a Common Table Expression (CTE) to first calculate the total sales for each product category over the last year by joining the 'sales' and 'products' tables and filtering the records accordingly. It then selects from this CTE and orders the results by total sales in descending order
230,"You have two tables: `employees` (id, name, department_id) and `departments` (id, department_name). Write a SQL query to find the department name and the count of employees in each department, including departments with zero employees","SELECT d.department_name, COUNT(e.id) AS employee_count FROM departments d LEFT JOIN employees e ON d.id = e.department_id GROUP BY d.department_name",SQL,unknown,Intermediate,"Data Analyst, Data Engineer, Join, Aggregate function","SELECT d.department_name, COUNT(e.id) AS employee_count FROM departments d LEFT JOIN employees e ON d.id = e.department_id GROUP BY d.department_name",Not Available,"This query uses a LEFT JOIN to combine the departments table with the employees table, ensuring that all departments are included, even those without employees. It then counts the number of employees per department"
231,"You are given two tables: `sales` and `products`. The `sales` table contains the columns: `id`, `product_id`, `quantity`, and `sale_date`, while the `products` table includes `id`, `name`, and `category`. Write a SQL query to find the total quantity sold for each product category for the year 2022, and return the category name along with the total quantity sold, ordered by the total quantity in descending order","SELECT p.category, SUM(s.quantity) AS total_quantity FROM sales s JOIN products p ON s.product_id = p.id WHERE YEAR(s.sale_date) = 2022 GROUP BY p.category ORDER BY total_quantity DESC",SQL,unknown,Intermediate,"Data Analyst, Join, Aggregation","SELECT p.category, SUM(s.quantity) AS total_quantity FROM sales s JOIN products p ON s.product_id = p.id WHERE YEAR(s.sale_date) = 2022 GROUP BY p.category ORDER BY total_quantity DESC",Not Available,"This query joins the `sales` table with the `products` table on the product ID, filters sales from the year 2022, groups the results by product category, and calculates the total quantity sold for each category, ordering the results by quantity sold in descending order"
232,"You are given two tables: `employees` with columns `id`, `name`, `department_id`, and `salary`, and `departments` with columns `id` and `department_name`. Write a SQL query to find the average salary of employees in each department along with the department name, and display only those departments having an average salary greater than 50000","SELECT d.department_name, AVG(e.salary) AS average_salary FROM employees e JOIN departments d ON e.department_id = d.id GROUP BY d.department_name HAVING AVG(e.salary) > 50000",SQL,unknown,Intermediate,"Data Analyst, Join, Aggregate function","SELECT d.department_name, AVG(e.salary) AS average_salary FROM employees e JOIN departments d ON e.department_id = d.id GROUP BY d.department_name HAVING AVG(e.salary) > 50000",Not Available,"This query performs a join between the `employees` and `departments` tables, calculates the average salary for each department, and filters the results to show only departments where the average salary exceeds 50,000"
233,"You are given two tables: `orders` and `customers`. The `orders` table contains columns `order_id`, `customer_id`, `order_date`, and `total_amount`. The `customers` table has `customer_id`, `customer_name`, and `join_date`. Write an SQL query to find the total spend of customers who joined in the year 2020, grouped by customer name, and ordered by total spend in descending order","SELECT c.customer_name, SUM(o.total_amount) AS total_spend FROM customers c JOIN orders o ON c.customer_id = o.customer_id WHERE c.join_date BETWEEN '2020-01-01' AND '2020-12-31' GROUP BY c.customer_name ORDER BY total_spend DESC",SQL,unknown,Intermediate,"Data Analyst, Join, Aggregate function",Not Available,"This query joins the `customers` and `orders` tables on `customer_id`, filters customers who joined in 2020, sums their total spending, groups the results by customer name, and orders them in descending order of total spend",Candidates may forget to use the correct date format or may improperly group by the wrong field
234,"Given a sales database with tables `orders (order_id, customer_id, order_date, total_amount)` and `customers (customer_id, customer_name, country)`, write a query to find the total sales amount and the number of orders for each country, sorted by total sales in descending order. Include countries with no sales","SELECT c.country, COALESCE(SUM(o.total_amount), 0) AS total_sales, COALESCE(COUNT(o.order_id), 0) AS order_count FROM customers c LEFT JOIN orders o ON c.customer_id = o.customer_id GROUP BY c.country ORDER BY total_sales DESC",SQL,unknown,Intermediate,"[""Aggregate function"",""Join"",""Data Analysis""]",Not Available,"This SQL query uses a LEFT JOIN to combine the `customers` and `orders` tables, ensuring that all countries are listed, even if they have no sales. The use of COALESCE ensures that countries with no corresponding orders show total sales and order count as zero. The results are grouped by country and ordered by the total sales amount in descending order","Candidates might forget to use `LEFT JOIN`, which would exclude countries with no orders from the results. Additionally, they might not use `COALESCE` correctly, leading to null values instead of zeros"
235,"You are given two tables: `employees` (id, name, department_id, salary) and `departments` (id, name). Write a SQL query to retrieve the name of each department along with the average salary of its employees, only including departments that have at least 3 employees","SELECT d.name AS department_name, AVG(e.salary) AS average_salary FROM departments d JOIN employees e ON d.id = e.department_id GROUP BY d.name HAVING COUNT(e.id) >= 3",SQL,unknown,Intermediate,"Data Analyst, Join, Aggregate function","SELECT d.name AS department_name, AVG(e.salary) AS average_salary FROM departments d JOIN employees e ON d.id = e.department_id GROUP BY d.name HAVING COUNT(e.id) >= 3",Not Available,"This query joins the `departments` and `employees` tables on `department_id`, calculates the average salary grouped by department name, and filters to only include departments with 3 or more employees using the HAVING clause"
236,"You are given two tables: `employees` (columns: `employee_id`, `name`, `department_id`) and `departments` (columns: `department_id`, `department_name`). Write a SQL query to find the number of employees in each department, including departments that have no employees. Sort the result by the number of employees in descending order and by department name in ascending order","SELECT d.department_name, COUNT(e.employee_id) AS employee_count FROM departments d LEFT JOIN employees e ON d.department_id = e.department_id GROUP BY d.department_name ORDER BY employee_count DESC, d.department_name ASC",SQL,unknown,Intermediate,"Data Analyst, Join, Aggregation","SELECT d.department_name, COUNT(e.employee_id) AS employee_count FROM departments d LEFT JOIN employees e ON d.department_id = e.department_id GROUP BY d.department_name ORDER BY employee_count DESC, d.department_name ASC",Not Available,"This query uses a LEFT JOIN to include all departments regardless of whether they have employees. It groups the results by department name and counts the number of employees in each department, ensuring that departments with no employees still appear in the results with a count of zero"
237,"Consider a database with two tables: 'orders' and 'customers'. The 'orders' table contains 'order_id', 'customer_id', 'order_total', and 'order_date'. The 'customers' table contains 'customer_id' and 'customer_name'. Write a SQL query to find the top 3 customers who have placed the highest total value of orders in the last year, displaying their names and total order values","WITH LastYearOrders AS (SELECT customer_id, SUM(order_total) AS total_order_value FROM orders WHERE order_date >= DATEADD(year, -1, GETDATE()) GROUP BY customer_id) SELECT c.customer_name, lo.total_order_value FROM LastYearOrders lo JOIN customers c ON lo.customer_id = c.customer_id ORDER BY lo.total_order_value DESC LIMIT 3",SQL,unknown,Intermediate,"[""Join"", ""Aggregate Function"", ""CTE"", ""Data Analysis""]",Not Available,"This SQL query first creates a Common Table Expression (CTE) called LastYearOrders, which calculates the total order value per customer for the last year. It then joins this CTE with the customers table to get the customer names and orders the result to display the top 3 customers based on their total order values","Candidates may forget to filter the orders within the last year, leading to incorrect totals. They might also overlook the need for a JOIN between the CTE and the customers table"
238,"You are given two tables, `sales` and `products`. The `sales` table contains the following columns: `sale_id`, `product_id`, `sale_date`, and `quantity_sold`. The `products` table contains `product_id`, `product_name`, and `category`. Write a SQL query to find the total quantity sold for each product in the 'Electronics' category for the year 2022. The result should include the `product_name` and the total `quantity_sold` for the specified condition","SELECT p.product_name, SUM(s.quantity_sold) AS total_quantity_sold FROM sales s JOIN products p ON s.product_id = p.product_id WHERE p.category = 'Electronics' AND YEAR(s.sale_date) = 2022 GROUP BY p.product_name",SQL,unknown,Intermediate,"[""Join"", ""Aggregate function"", ""Data Analysis""]",Not Available,"This query joins the `sales` and `products` tables on `product_id`, filters by the 'Electronics' category and the year 2022, and groups the results by `product_name` to calculate the total quantity sold using the `SUM` aggregate function","Common mistakes include forgetting to filter on the year, not using the correct join condition, or neglecting to use `GROUP BY` to aggregate results properly"
239,"Consider a database with two tables: `employees` (id, name, department_id, salary) and `departments` (id, department_name). Write a SQL query to find the average salary of employees in each department along with the department name, and include departments that have no employees","SELECT d.department_name, COALESCE(AVG(e.salary), 0) AS average_salary FROM departments d LEFT JOIN employees e ON d.id = e.department_id GROUP BY d.department_name",SQL,unknown,Intermediate,"['SQL', 'Join', 'Aggregate function']","SELECT d.department_name, COALESCE(AVG(e.salary), 0) AS average_salary FROM departments d LEFT JOIN employees e ON d.id = e.department_id GROUP BY d.department_name",Not Available,"This SQL query uses a LEFT JOIN to combine the `departments` and `employees` tables, allowing it to show all departments even if there are no corresponding employees. The COALESCE function is used to replace NULL average salaries with 0 for departments with no employees"
240,"You are given two tables: `employees` (with columns `id`, `name`, `department_id`, `salary`) and `departments` (with columns `id`, `department_name`). Write a SQL query to find the top 3 employees with the highest salaries in each department","WITH RankedSalaries AS (SELECT e.name, e.salary, d.department_name, RANK() OVER (PARTITION BY d.id ORDER BY e.salary DESC) AS salary_rank FROM employees e JOIN departments d ON e.department_id = d.id) SELECT name, salary, department_name FROM RankedSalaries WHERE salary_rank <= 3",SQL,unknown,Advanced,"[""Data Analyst"", ""Data Engineer"", ""Business Intelligence"", ""SQL"", ""Window Functions""]","SELECT e.name, e.salary, d.department_name FROM employees e JOIN departments d ON e.department_id = d.id WHERE e.salary = (SELECT MAX(salary) FROM employees WHERE department_id = e.department_id)",Not Available,"The query utilizes a Common Table Expression (CTE) to first rank employees by salary within their respective departments, and then selects those whose rank is 3 or less, effectively giving us the top 3 earners in each department"
241,"Suppose you have two tables: 'sales' and 'products'. The 'sales' table has columns 'sale_id', 'product_id', 'quantity', and 'sale_date'. The 'products' table has columns 'product_id' and 'product_name'. Write a SQL query to find the total quantity sold for each product over the last month, including the product name","SELECT p.product_name, SUM(s.quantity) AS total_quantity_sold FROM sales AS s JOIN products AS p ON s.product_id = p.product_id WHERE s.sale_date >= DATEADD(MONTH, -1, GETDATE()) GROUP BY p.product_name",SQL,unknown,Intermediate,"Data Analyst, Aggregate function, Join","SELECT p.product_name, SUM(s.quantity) AS total_quantity_sold FROM sales AS s JOIN products AS p ON s.product_id = p.product_id WHERE s.sale_date >= DATEADD(MONTH, -1, GETDATE()) GROUP BY p.product_name",Not Available,"This SQL query joins the 'sales' and 'products' tables on 'product_id' and calculates the total quantity sold for each product in the last month using the SUM() function, grouping the results by 'product_name'"
242,"You are working for an e-commerce company and you need to analyze customer purchase behavior. Write a query to find the total number of orders and the total value of orders placed by each customer, sorted by the total value of orders in descending order. Consider that you have two tables: 'customers' (with fields 'customer_id', 'customer_name') and 'orders' (with fields 'order_id', 'customer_id', 'order_value')","SELECT c.customer_id, c.customer_name, COUNT(o.order_id) AS total_orders, SUM(o.order_value) AS total_value FROM customers c JOIN orders o ON c.customer_id = o.customer_id GROUP BY c.customer_id, c.customer_name ORDER BY total_value DESC",SQL,intermediate,"Data Analyst, Join, Aggregate Function","SELECT c.customer_id, c.customer_name, COUNT(o.order_id) AS total_orders, SUM(o.order_value) AS total_value FROM customers c JOIN orders o ON c.customer_id = o.customer_id GROUP BY c.customer_id, c.customer_name ORDER BY total_value DESC","This query joins the 'customers' and 'orders' tables on 'customer_id', groups the results by customer, and calculates the count of orders and the sum of order values for each customer. Finally, it sorts the results by total value in descending order","Common mistakes include forgetting to group by all selected columns that are not aggregated, not using the correct join, or neglecting to sort the results",What if we want to include customers who have not placed any orders? How would the query change? What additional insights could you derive from analyzing average order value per customer?
243,"You are given two tables: 'employees' (columns: employee_id, name, department_id, salary) and 'departments' (columns: department_id, department_name). Write a SQL query to find the top 3 highest-paid employees in each department along with their department names","WITH ranked_employees AS ( SELECT e.name, d.department_name, e.salary, ROW_NUMBER() OVER (PARTITION BY e.department_id ORDER BY e.salary DESC) as rank FROM employees e JOIN departments d ON e.department_id = d.department_id ) SELECT name, department_name, salary FROM ranked_employees WHERE rank <= 3",SQL,unknown,Advanced,"[""Data Analyst"", ""Data Engineer"", ""Business Intelligence"", ""Window Function"", ""Join""]","WITH ranked_employees AS ( SELECT e.name, d.department_name, e.salary, ROW_NUMBER() OVER (PARTITION BY e.department_id ORDER BY e.salary DESC) as rank FROM employees e JOIN departments d ON e.department_id = d.department_id ) SELECT name, department_name, salary FROM ranked_employees WHERE rank <= 3",Not Available,This query uses a Common Table Expression (CTE) to first rank employees within each department based on their salary using the ROW_NUMBER() window function. It then filters to retrieve only the top 3 highest-paid employees in each department
244,"Given a sales database with tables 'sales' (columns: sale_id, product_id, customer_id, sale_date, amount) and 'products' (columns: product_id, product_name, category, price), write a SQL query to find the total sales amount for each product category for the last year. Show the output as category, total_sales and sort by total_sales in descending order","WITH total_sales AS (SELECT p.category, SUM(s.amount) AS sales_amount FROM sales s JOIN products p ON s.product_id = p.product_id WHERE s.sale_date >= DATEADD(year, -1, GETDATE()) GROUP BY p.category) SELECT category, sales_amount AS total_sales FROM total_sales ORDER BY total_sales DESC",SQL,unknown,Intermediate,"Data Analyst, Aggregate function, Join","WITH total_sales AS (SELECT p.category, SUM(s.amount) AS sales_amount FROM sales s JOIN products p ON s.product_id = p.product_id WHERE s.sale_date >= DATEADD(year, -1, GETDATE()) GROUP BY p.category) SELECT category, sales_amount AS total_sales FROM total_sales ORDER BY total_sales DESC",Not Available,"This query uses a Common Table Expression (CTE) to first calculate the total sales for each category in the last year, then selects from this CTE to format and order the output"
245,"You are given two tables: `employees` (with columns `employee_id`, `name`, `department_id`, `salary`) and `departments` (with columns `department_id`, `department_name`). Write a SQL query to find the department with the highest average salary and return the department name along with the average salary","WITH avg_salaries AS (SELECT d.department_name, AVG(e.salary) AS avg_salary FROM employees e JOIN departments d ON e.department_id = d.department_id GROUP BY d.department_name) SELECT department_name, avg_salary FROM avg_salaries WHERE avg_salary = (SELECT MAX(avg_salary) FROM avg_salaries)",SQL,unknown,Intermediate,"['Join', 'Aggregate function', 'CTE']","SELECT d.department_name, AVG(e.salary) AS avg_salary FROM employees e JOIN departments d ON e.department_id = d.department_id GROUP BY d.department_name HAVING AVG(e.salary) = (SELECT MAX(AVG(salary)) FROM employees GROUP BY department_id)",Not Available,This query first calculates the average salary per department using a Common Table Expression (CTE) called `avg_salaries`. It then selects the department with the maximum average salary from this CTE
246,"Given two tables, `employees` (with columns `employee_id`, `name`, `department_id`) and `departments` (with columns `department_id`, `department_name`, and `budget`), write a SQL query to find the average budget of departments where the average salary of their employees is above 70,000. Assume there is a `salaries` table (with columns `employee_id` and `salary`) that contains the salary information. List the `department_name` and its `average_budget`","WITH DeptAvgSalary AS (SELECT e.department_id, AVG(s.salary) AS avg_salary FROM employees e JOIN salaries s ON e.employee_id = s.employee_id GROUP BY e.department_id HAVING AVG(s.salary) > 70000), DeptAvgBudget AS (SELECT d.department_name, AVG(d.budget) AS average_budget FROM departments d JOIN DeptAvgSalary das ON d.department_id = das.department_id GROUP BY d.department_name) SELECT department_name, average_budget FROM DeptAvgBudget",SQL,unknown,Intermediate,"Data Analyst, Business Intelligence, CTE, Join, Aggregate function","WITH DeptAvgSalary AS (SELECT e.department_id, AVG(s.salary) AS avg_salary FROM employees e JOIN salaries s ON e.employee_id = s.employee_id GROUP BY e.department_id HAVING AVG(s.salary) > 70000) SELECT d.department_name, AVG(d.budget) AS average_budget FROM departments d JOIN DeptAvgSalary das ON d.department_id = das.department_id GROUP BY d.department_name",Not Available,"This SQL query first calculates the average salary of each department. It filters the results for departments where the average salary exceeds 70,000 using a CTE. Then, it calculates the average budget of these filtered departments"
247,"Given a table 'sales' with columns 'id', 'sale_date', 'amount', and a table 'customers' with columns 'id', 'customer_name', 'signup_date', write a query to find the total sales amount for customers who signed up in the year 2020, grouped by month of the sale","SELECT DATE_FORMAT(s.sale_date, '%Y-%m') AS sale_month, SUM(s.amount) AS total_sales FROM sales s JOIN customers c ON s.customer_id = c.id WHERE YEAR(c.signup_date) = 2020 GROUP BY sale_month ORDER BY sale_month",SQL,unknown,Intermediate,"Data Analyst, Join, Aggregate function","SELECT DATE_FORMAT(s.sale_date, '%Y-%m') AS sale_month, SUM(s.amount) AS total_sales FROM sales s JOIN customers c ON s.customer_id = c.id WHERE YEAR(c.signup_date) = 2020 GROUP BY sale_month ORDER BY sale_month",Not Available,"This query joins the sales table with the customers table on customer_id. It then filters for customers who signed up in 2020 and groups the result by the month of the sale, summing the total sales for each month"
248,"You are given a table `sales` with columns `id`, `product_id`, `quantity`, `sale_date`, and a table `products` with columns `product_id`, `price`, and `category`. Write a SQL query to find the total revenue generated for each product category in the month of January 2023, and also return the total quantity sold in that month. Sort the results by total revenue in descending order","WITH monthly_revenue AS (SELECT category, SUM(quantity * price) AS total_revenue, SUM(quantity) AS total_quantity FROM sales s JOIN products p ON s.product_id = p.product_id WHERE s.sale_date >= '2023-01-01' AND s.sale_date < '2023-02-01' GROUP BY category) SELECT category, total_revenue, total_quantity FROM monthly_revenue ORDER BY total_revenue DESC",SQL,unknown,Intermediate,"Data Analyst, Aggregate function, Join","SELECT category, SUM(quantity * price) AS total_revenue, SUM(quantity) AS total_quantity FROM sales s JOIN products p ON s.product_id = p.product_id WHERE s.sale_date >= '2023-01-01' AND s.sale_date < '2023-02-01' GROUP BY category",Not Available,This SQL query uses a Common Table Expression (CTE) to first calculate the total revenue and quantity sold for each product category within the specified date range. It then selects those results and orders them by revenue
249,"Given a sales database with two tables: `sales_data` (columns: `id`, `product_id`, `quantity`, `sale_date`) and `products` (columns: `product_id`, `product_name`, `category`), write a SQL query to find the total quantity sold for each product category for the year 2022, and rank them from highest to lowest quantity sold","WITH category_sales AS ( SELECT p.category, SUM(s.quantity) AS total_quantity FROM sales_data s JOIN products p ON s.product_id = p.product_id WHERE YEAR(s.sale_date) = 2022 GROUP BY p.category ) SELECT category, total_quantity, RANK() OVER (ORDER BY total_quantity DESC) AS rank FROM category_sales",SQL,unknown,Advanced,"[Data Analyst, Data Engineer, SQL, Aggregate function, Window function]","WITH category_sales AS ( SELECT p.category, SUM(s.quantity) AS total_quantity FROM sales_data s JOIN products p ON s.product_id = p.product_id WHERE YEAR(s.sale_date) = 2022 GROUP BY p.category ) SELECT category, total_quantity, RANK() OVER (ORDER BY total_quantity DESC) AS rank FROM category_sales",Not Available,This SQL query uses a Common Table Expression (CTE) to first aggregate total sales quantity by product category for the year 2022 and then applies a window function to rank these categories based on total quantity sold
250,"You are given two tables: `sales` and `customers`. The `sales` table contains columns `sale_id`, `customer_id`, `amount`, and `sale_date`, while the `customers` table contains `customer_id`, `customer_name`, and `join_date`. Write a SQL query to find the top 3 customers by total sales amount who joined after '2020-01-01', and include their names and total sales amount in the output","WITH CustomerSales AS (SELECT c.customer_name, SUM(s.amount) AS total_sales FROM customers c JOIN sales s ON c.customer_id = s.customer_id WHERE c.join_date > '2020-01-01' GROUP BY c.customer_name) SELECT customer_name, total_sales FROM CustomerSales ORDER BY total_sales DESC LIMIT 3",SQL,unknown,Intermediate,"['JOIN', 'Aggregate function', 'Subquery', 'Data Analysis']","SELECT c.customer_name, SUM(s.amount) AS total_sales FROM customers c JOIN sales s ON c.customer_id = s.customer_id WHERE c.join_date > '2020-01-01' GROUP BY c.customer_name ORDER BY total_sales DESC LIMIT 3",Not Available,"This query first creates a Common Table Expression (CTE) named `CustomerSales`, which aggregates total sales by customer for those customers who joined after January 1, 2020. The main query then selects the top three customers by sales amount"
251,"Given a sales database with tables `orders` (order_id, customer_id, order_date, amount) and `customers` (customer_id, customer_name, customer_since), write a SQL query to find the top 5 customers who have placed the highest total order amounts over the last year, along with their total order amount and the number of orders placed","WITH LastYearOrders AS (SELECT customer_id, SUM(amount) AS total_amount, COUNT(order_id) AS order_count FROM orders WHERE order_date >= DATEADD(year, -1, GETDATE()) GROUP BY customer_id) SELECT c.customer_name, l.total_amount, l.order_count FROM LastYearOrders l JOIN customers c ON l.customer_id = c.customer_id ORDER BY l.total_amount DESC LIMIT 5",SQL,unknown,Advanced,"Data Analyst, Business Intelligence, Aggregate function, CTE","SELECT c.customer_name, l.total_amount, l.order_count FROM LastYearOrders l JOIN customers c ON l.customer_id = c.customer_id ORDER BY l.total_amount DESC LIMIT 5",Not Available,"The query uses a Common Table Expression (CTE) to calculate the total order amounts and the count of orders placed by each customer in the last year, then it selects the top 5 customers based on the total order amount"
252,"You are given two tables: `employees` (with columns `id`, `name`, `department_id`, `salary`) and `departments` (with columns `id`, `department_name`). Write a SQL query to find the department with the highest average employee salary, along with the average salary and the department name","SELECT d.department_name, AVG(e.salary) AS avg_salary FROM employees e JOIN departments d ON e.department_id = d.id GROUP BY d.department_name ORDER BY avg_salary DESC LIMIT 1",SQL,unknown,Intermediate,"Data Analyst, Join, Aggregate function","SELECT d.department_name, AVG(e.salary) AS avg_salary FROM employees e JOIN departments d ON e.department_id = d.id GROUP BY d.department_name ORDER BY avg_salary DESC LIMIT 1",Not Available,"This query joins the `employees` and `departments` tables on the `department_id`, computes the average salary for each department, and then orders the results in descending order to select the department with the highest average salary"
253,"Given a table `employees` with fields `employee_id`, `name`, `salary`, and `department_id`, and a table `departments` with `department_id`, `department_name`, and `manager_id`, write a SQL query to find the average salary of employees in each department, alongside the department names. Order the results by average salary in descending order","SELECT d.department_name, AVG(e.salary) AS average_salary FROM employees e JOIN departments d ON e.department_id = d.department_id GROUP BY d.department_name ORDER BY average_salary DESC",SQL,unknown,Intermediate,"Data Analyst, SQL, Aggregate function, Join","SELECT department_name, AVG(salary) AS average_salary FROM employees JOIN departments ON employees.department_id = departments.department_id GROUP BY department_name ORDER BY average_salary DESC",Not Available,"This query joins the `employees` and `departments` tables, groups the results by department name, calculates the average salary for each department, and orders the results by this average salary in descending order"
254,"You are given two tables: `employees` (with columns `employee_id`, `name`, `department_id`) and `departments` (with columns `department_id`, `department_name`, `budget`). Write a SQL query to find the name of the department with the highest average employee salary, assuming there is a `salaries` table which contains `employee_id`, `salary` and has a foreign key relationship with `employees`. The result should include the department name and the average salary rounded to two decimal places","SELECT d.department_name, ROUND(AVG(s.salary), 2) AS average_salary FROM salaries s JOIN employees e ON s.employee_id = e.employee_id JOIN departments d ON e.department_id = d.department_id GROUP BY d.department_name ORDER BY average_salary DESC LIMIT 1",SQL,unknown,Advanced,"[""Data Analyst"", ""Data Engineer"", ""Join"", ""Aggregate function""]",Not Available,"This query calculates the average salary for each department by joining the `salaries` table with the `employees` and `departments` tables. It groups the results by department name, sorts the averages in descending order, and retrieves the top result","Candidates might forget to include the JOIN conditions properly or might miss the GROUP BY clause, leading to incorrect results or syntax errors. They could also forget to use the ROUND function"
255,"You are given two tables: `employees` (with columns `employee_id`, `name`, `department_id`, and `salary`) and `departments` (with columns `department_id` and `department_name`). Write an SQL query to find the average salary of employees in each department, and include the department name. Only include departments that have more than 5 employees","SELECT d.department_name, AVG(e.salary) AS average_salary 
FROM departments d 
JOIN employees e ON d.department_id = e.department_id 
GROUP BY d.department_name 
HAVING COUNT(e.employee_id) > 5",SQL,unknown,Intermediate,"['Join', 'Aggregate Function', 'Group By']","SELECT d.department_name, AVG(e.salary) AS average_salary 
FROM departments d 
JOIN employees e ON d.department_id = e.department_id 
GROUP BY d.department_name 
HAVING COUNT(e.employee_id) > 5",Not Available,"This query joins the `departments` table with the `employees` table to group employees by departments, calculates the average salary for each department, and uses HAVING to filter for departments with more than 5 employees"
256,"You are given two tables, `employees` and `departments`. The `employees` table has columns: `employee_id`, `name`, `department_id`, `salary`, and the `departments` table has columns: `department_id` and `department_name`. Write a SQL query to find the highest salary in each department, along with the department name","SELECT d.department_name, MAX(e.salary) AS highest_salary FROM employees e JOIN departments d ON e.department_id = d.department_id GROUP BY d.department_name",SQL,unknown,Intermediate,"['Join', 'Aggregate function', 'Data Analyst']","SELECT d.department_name, MAX(e.salary) AS highest_salary FROM employees e JOIN departments d ON e.department_id = d.department_id GROUP BY d.department_name",Not Available,"This query joins the `employees` and `departments` tables on `department_id`, grouping results by department name and using the MAX function to find the highest salary in each department"
257,"Given a table `sales_data` with columns `order_id`, `customer_id`, `sale_amount`, and `sale_date`, along with a `customers` table containing `customer_id`, `customer_name`, and `join_date`, write an SQL query to find the total sales amount for each customer who joined in the year 2020, along with their names, sorted by total sales in descending order","WITH customer_sales AS (SELECT c.customer_id, c.customer_name, SUM(s.sale_amount) AS total_sales FROM customers c JOIN sales_data s ON c.customer_id = s.customer_id WHERE YEAR(c.join_date) = 2020 GROUP BY c.customer_id, c.customer_name) SELECT customer_id, customer_name, total_sales FROM customer_sales ORDER BY total_sales DESC",SQL,unknown,Intermediate,"['SQL', 'Join', 'Aggregate Function', 'CTE']","WITH customer_sales AS (SELECT c.customer_id, c.customer_name, SUM(s.sale_amount) AS total_sales FROM customers c JOIN sales_data s ON c.customer_id = s.customer_id WHERE YEAR(c.join_date) = 2020 GROUP BY c.customer_id, c.customer_name) SELECT customer_id, customer_name, total_sales FROM customer_sales ORDER BY total_sales DESC",Not Available,"This query first uses a Common Table Expression (CTE) to aggregate the total sales per customer who joined in 2020, then selects from that CTE to display the results sorted by total sales"
258,"Given two tables, `orders` (with columns `order_id`, `customer_id`, `order_date`, `total_amount`) and `customers` (with `customer_id`, `customer_name`, and `customer_region`), write a SQL query to find the total sales for each customer in the 'West' region, displaying their name and total sales amount. Sort the results by total sales in descending order","SELECT c.customer_name, SUM(o.total_amount) AS total_sales FROM customers c JOIN orders o ON c.customer_id = o.customer_id WHERE c.customer_region = 'West' GROUP BY c.customer_name ORDER BY total_sales DESC",unknown,Intermediate,"Join, Aggregate function, Group By",example_query,"The query uses a JOIN to combine data from the `customers` and `orders` tables, filters records for customers in the 'West' region, groups the results by customer name, and calculates total sales using the SUM function. It then sorts the results in descending order based on total sales","Candidates might forget to include the necessary GROUP BY clause, leading to SQL errors. Another common mistake is ignoring the sorting of the results","Candidates might forget to include the necessary GROUP BY clause, leading to SQL errors. Another common mistake is ignoring the sorting of the results"
259,"Given two tables, `employees` (id, name, department_id) and `departments` (id, department_name), write an SQL query to find the department with the highest average salary from the table `salaries` (employee_id, salary)","WITH avg_salaries AS (SELECT e.department_id, AVG(s.salary) AS average_salary FROM employees e JOIN salaries s ON e.id = s.employee_id GROUP BY e.department_id) SELECT d.department_name FROM avg_salaries AS a JOIN departments d ON a.department_id = d.id ORDER BY a.average_salary DESC LIMIT 1",SQL,unknown,Intermediate,"['Join', 'Aggregate Function', 'CTE']","WITH avg_salaries AS (SELECT e.department_id, AVG(s.salary) AS average_salary FROM employees e JOIN salaries s ON e.id = s.employee_id GROUP BY e.department_id) SELECT d.department_name FROM avg_salaries AS a JOIN departments d ON a.department_id = d.id ORDER BY a.average_salary DESC LIMIT 1",Not Available,This query first calculates the average salary for each department using a Common Table Expression (CTE) and then selects the department with the highest average salary
260,"Given a sales database with tables `Sales` (containing columns: `SaleID`, `ProductID`, `Quantity`, `SaleDate`) and `Products` (containing columns: `ProductID`, `ProductName`, `Category`, `Price`), write a SQL query to find the total revenue generated for each product category for the current year. The output should include the category name and total revenue, sorted in descending order by revenue","WITH Revenue AS ( SELECT p.Category, SUM(s.Quantity * p.Price) AS TotalRevenue FROM Sales s JOIN Products p ON s.ProductID = p.ProductID WHERE YEAR(s.SaleDate) = YEAR(CURRENT_DATE) GROUP BY p.Category ) SELECT Category, TotalRevenue FROM Revenue ORDER BY TotalRevenue DESC",SQL,unknown,Intermediate,"Data Analyst, Aggregate Function, Join, CTE","WITH Revenue AS ( SELECT p.Category, SUM(s.Quantity * p.Price) AS TotalRevenue FROM Sales s JOIN Products p ON s.ProductID = p.ProductID WHERE YEAR(s.SaleDate) = YEAR(CURRENT_DATE) GROUP BY p.Category ) SELECT Category, TotalRevenue FROM Revenue ORDER BY TotalRevenue DESC",Not Available,"The query uses a Common Table Expression (CTE) to calculate the total revenue for each product category by joining the `Sales` and `Products` tables, filtering for sales made in the current year, and then summing the revenue generated from each sale. The final selection retrieves these results sorted by total revenue in descending order"
261,"You are given two tables, 'employees' and 'departments'. The 'employees' table contains employee details including their IDs, names, salaries, and their department IDs. The 'departments' table includes department details such as ID and department names. Write a SQL query to find the average salary of employees in each department, along with the department name, and order the result by average salary in descending order","SELECT d.department_name, AVG(e.salary) AS average_salary FROM employees e JOIN departments d ON e.department_id = d.id GROUP BY d.department_name ORDER BY average_salary DESC",SQL,unknown,Intermediate,"Data Analyst, Join, Aggregate function","SELECT d.department_name, AVG(e.salary) AS average_salary FROM employees e JOIN departments d ON e.department_id = d.id GROUP BY d.department_name ORDER BY average_salary DESC",Not Available,"This SQL query joins the 'employees' and 'departments' tables on the department ID, calculates the average salary for each department, and orders the results by average salary in descending order"
262,"Given a sales database with tables `orders(order_id, customer_id, order_date, total_amount)`, `customers(customer_id, customer_name, join_date)`, and `products(product_id, product_name, price)`, write a query to find the top 3 customers who have spent the most money in the last year. Include their name and total spent amount","WITH customer_spending AS (SELECT c.customer_name, SUM(o.total_amount) AS total_spent FROM customers c JOIN orders o ON c.customer_id = o.customer_id WHERE o.order_date >= DATEADD(year, -1, GETDATE()) GROUP BY c.customer_name) SELECT TOP 3 customer_name, total_spent FROM customer_spending ORDER BY total_spent DESC",SQL,unknown,Intermediate,"Data Analyst, Aggregate function, Join, CTE","SELECT customer_name, total_spent FROM (SELECT c.customer_name, SUM(o.total_amount) AS total_spent FROM customers c JOIN orders o ON c.customer_id = o.customer_id WHERE o.order_date >= DATEADD(year, -1, GETDATE()) GROUP BY c.customer_name) AS spending ORDER BY total_spent DESC LIMIT 3",Not Available,This query uses a Common Table Expression (CTE) to first calculate each customer's total spending in the last year. It then selects the top 3 customers based on that total
263,"You are given two tables: `employees` (with columns `employee_id`, `name`, `department_id`, and `salary`) and `departments` (with columns `department_id` and `department_name`). Write a query to list all departments along with the total salary paid to the employees in each department. If a department has no employees, it should still be included in the results with a total salary of 0","SELECT d.department_name, COALESCE(SUM(e.salary), 0) AS total_salary FROM departments d LEFT JOIN employees e ON d.department_id = e.department_id GROUP BY d.department_name ORDER BY total_salary DESC",SQL,unknown,Intermediate,"[""""Data Analyst"""", """"Business Intelligence"""", """"Join"""", """"Aggregate function""""]","SELECT d.department_name, COALESCE(SUM(e.salary), 0) AS total_salary FROM departments d LEFT JOIN employees e ON d.department_id = e.department_id GROUP BY d.department_name ORDER BY total_salary DESC",Not Available,"This query performs a left join between the `departments` and `employees` table, summing up the salaries of employees in each department, using COALESCE to ensure departments with no employees show a total salary of 0"
264,"You are given two tables: 'employees' which has columns 'employee_id', 'employee_name', 'manager_id', and 'departments' which includes 'department_id', 'department_name'. Write a SQL query to find the names of employees who do not have any subordinates and the department to which they belong","SELECT e.employee_name, d.department_name FROM employees e LEFT JOIN employees m ON e.employee_id = m.manager_id LEFT JOIN departments d ON e.department_id = d.department_id WHERE m.manager_id IS NULL",SQL,unknown,Intermediate,"Data Analyst, Join, Aggregate function","SELECT e.employee_name, d.department_name FROM employees e LEFT JOIN employees m ON e.employee_id = m.manager_id LEFT JOIN departments d ON e.department_id = d.department_id WHERE m.manager_id IS NULL",Not Available,The query uses a LEFT JOIN to connect the 'employees' table to itself to find those who are managers with no subordinates by checking for NULL in the manager's ID. It then joins with the 'departments' table to get the department name of each employee
265,"You are given two tables: `employees` (employee_id, name, department_id) and `departments` (department_id, department_name). Write a SQL query to find out the highest-paid employee in each department along with their salary. To do this, you'll need a third table called `salaries` (employee_id, salary). Return the results in a single output showing department_name, employee_name, and salary","WITH RankedEmployees AS ( SELECT e.name AS employee_name, d.department_name, s.salary, ROW_NUMBER() OVER (PARTITION BY d.department_id ORDER BY s.salary DESC) AS rn FROM employees e JOIN departments d ON e.department_id = d.department_id JOIN salaries s ON e.employee_id = s.employee_id ) SELECT department_name, employee_name, salary FROM RankedEmployees WHERE rn = 1",SQL,unknown,Advanced,"Data Analyst, SQL, Window Function","WITH RankedEmployees AS ( SELECT e.name AS employee_name, d.department_name, s.salary, ROW_NUMBER() OVER (PARTITION BY d.department_id ORDER BY s.salary DESC) AS rn FROM employees e JOIN departments d ON e.department_id = d.department_id JOIN salaries s ON e.employee_id = s.employee_id ) SELECT department_name, employee_name, salary FROM RankedEmployees WHERE rn = 1",Not Available,"This query uses a Common Table Expression (CTE) with the `ROW_NUMBER()` window function to rank employees within each department based on their salaries, and then selects the top-ranked employee per department"
266,"Given two tables, `Orders` (OrderID, CustomerID, OrderDate, Amount) and `Customers` (CustomerID, CustomerName, Country), write a SQL query to find the total sales amount for each customer, display their names, and filter the results to include only those customers from 'USA' who have placed more than 3 orders. Also, sort the results by total sales in descending order","SELECT c.CustomerName, COUNT(o.OrderID) AS TotalOrders, SUM(o.Amount) AS TotalSales 
FROM Customers c
JOIN Orders o ON c.CustomerID = o.CustomerID
WHERE c.Country = 'USA'
GROUP BY c.CustomerName
HAVING COUNT(o.OrderID) > 3
ORDER BY TotalSales DESC",SQL,unknown,Advanced,"[""Data Analyst"", ""Business Intelligence"", ""Join"", ""Aggregate function""]","SELECT c.CustomerName, COUNT(o.OrderID) AS TotalOrders, SUM(o.Amount) AS TotalSales FROM Customers c JOIN Orders o ON c.CustomerID = o.CustomerID WHERE c.Country = 'USA' GROUP BY c.CustomerName HAVING COUNT(o.OrderID) > 3 ORDER BY TotalSales DESC",Not Available,"This SQL query joins the `Customers` and `Orders` tables on `CustomerID`, filters for customers located in the USA, counts the number of orders per customer, sums the sales amounts, groups the results by customer name, and only includes those customers with more than 3 orders, sorted by total sales in descending order"
267,"You are given two tables: `employees` and `departments`. The `employees` table contains `id`, `name`, `salary`, and `department_id`. The `departments` table contains `id` and `department_name`. Write a SQL query to find the average salary of employees in each department along with the department name, but only include departments that have more than 5 employees","WITH dept_employee_counts AS (SELECT department_id, COUNT(*) AS employee_count FROM employees GROUP BY department_id HAVING COUNT(*) > 5) SELECT d.department_name, AVG(e.salary) AS average_salary FROM employees e JOIN departments d ON e.department_id = d.id WHERE e.department_id IN (SELECT department_id FROM dept_employee_counts) GROUP BY d.department_name",SQL,unknown,Intermediate,"Data Analyst, Aggregate function, Join, CTE","WITH dept_employee_counts AS (SELECT department_id, COUNT(*) AS employee_count FROM employees GROUP BY department_id HAVING COUNT(*) > 5) SELECT d.department_name, AVG(e.salary) AS average_salary FROM employees e JOIN departments d ON e.department_id = d.id WHERE e.department_id IN (SELECT department_id FROM dept_employee_counts) GROUP BY d.department_name",Not Available,This SQL statement first creates a Common Table Expression (CTE) to find departments that have more than 5 employees. It then joins the `employees` and `departments` tables to compute the average salary for those departments
268,"You are working with two tables: `employees` and `departments`. The `employees` table contains employee details including `employee_id`, `name`, `salary`, and `department_id`. The `departments` table contains `department_id` and `department_name`. Write a SQL query to find the average salary of employees in each department, but only for those departments with an average salary greater than $60,000","SELECT d.department_name, AVG(e.salary) as average_salary 
FROM employees e 
JOIN departments d ON e.department_id = d.department_id 
GROUP BY d.department_name 
HAVING AVG(e.salary) > 60000",SQL,unknown,Intermediate,"Data Analyst, Business Intelligence, Aggregate function, Join","SELECT d.department_name, AVG(e.salary) as average_salary FROM employees e JOIN departments d ON e.department_id = d.department_id GROUP BY d.department_name HAVING AVG(e.salary) > 60000",Not Available,"The query joins the `employees` and `departments` tables on `department_id`, calculates the average salary for each department, and filters the results to only include departments with an average salary above the specified threshold"
269,"Given a sales table with columns: sale_id, product_id, sale_date, quantity, and revenue, and a products table with columns: product_id, category, and price, write a SQL query to calculate the total revenue, total quantity sold, average sale price per unit, and total sales per category for the month of January 2023. The result should be sorted by total revenue in descending order","SELECT p.category, SUM(s.revenue) AS total_revenue, SUM(s.quantity) AS total_quantity, AVG(s.revenue / NULLIF(s.quantity, 0)) AS average_sale_price_per_unit, COUNT(s.sale_id) AS total_sales FROM sales s JOIN products p ON s.product_id = p.product_id WHERE s.sale_date BETWEEN '2023-01-01' AND '2023-01-31' GROUP BY p.category ORDER BY total_revenue DESC",SQL,unknown,Advanced,"['Data Analyst', 'SQL', 'Join', 'Aggregate function']","SELECT p.category, SUM(s.revenue) AS total_revenue, SUM(s.quantity) AS total_quantity, AVG(s.revenue / NULLIF(s.quantity, 0)) AS average_sale_price_per_unit, COUNT(s.sale_id) AS total_sales FROM sales s JOIN products p ON s.product_id = p.product_id WHERE s.sale_date BETWEEN '2023-01-01' AND '2023-01-31' GROUP BY p.category ORDER BY total_revenue DESC",Not Available,"This query joins the sales table with the products table to aggregate data per category for the specified month. It computes total revenue, total quantity sold, average sale price (handling possible division by zero), and total sales, sorting the results by total revenue"
270,"You have two tables: `employees` (with columns `employee_id`, `name`, and `department_id`) and `departments` (with columns `department_id` and `department_name`). Write a SQL query to list each department's name alongside the number of employees in that department. If a department has no employees, it should still be listed with a count of 0","SELECT d.department_name, COUNT(e.employee_id) AS employee_count FROM departments d LEFT JOIN employees e ON d.department_id = e.department_id GROUP BY d.department_name",SQL,intermediate,"['Join', 'Aggregation', 'Data Analysis']","SELECT d.department_name, COUNT(e.employee_id) AS employee_count FROM departments d LEFT JOIN employees e ON d.department_id = e.department_id GROUP BY d.department_name",Not Available,"This SQL query uses a LEFT JOIN between the `departments` and `employees` tables to count the number of employees in each department. The `COUNT()` function counts the number of `employee_id` values for each department, and because it’s a LEFT JOIN, departments with 0 employees will still appear in the results with a count of 0","Candidates often forget to use GROUP BY correctly, which leads to errors or incorrect aggregation. They may also assume INNER JOIN, which would exclude departments with no employees"
271,"You are given two tables: `employees` (columns: `id`, `name`, `department_id`, `salary`) and `departments` (columns: `id`, `name`). Write a SQL query to find the average salary of employees in each department, sorting the results by average salary in descending order","SELECT d.name AS department_name, AVG(e.salary) AS average_salary FROM employees e JOIN departments d ON e.department_id = d.id GROUP BY d.name ORDER BY average_salary DESC",SQL,unknown,Intermediate,"[""Join"", ""Aggregate function"", ""SQL""]","Example: SELECT d.name, AVG(e.salary) FROM employees e JOIN departments d ON e.department_id = d.id GROUP BY d.name ORDER BY AVG(e.salary) DESC",Not Available,"The query joins the `employees` table with the `departments` table on the `department_id`, computes the average salary per department using the AVG() aggregate function, groups results by department name, and orders them in descending order of average salary"
272,"Consider a database with two tables: `employees` (employee_id, name, department_id, salary) and `departments` (department_id, department_name). Write a query to find the average salary of employees in each department and list the departments with an average salary greater than $70,000. Order the results by average salary in descending order","SELECT d.department_name, AVG(e.salary) AS average_salary FROM employees e JOIN departments d ON e.department_id = d.department_id GROUP BY d.department_name HAVING AVG(e.salary) > 70000 ORDER BY average_salary DESC",SQL,intermediate,"['Join', 'Aggregate function', 'Data Analyst']","SELECT department_name, AVG(salary) AS average_salary FROM employees e JOIN departments d ON e.department_id = d.department_id GROUP BY department_name HAVING AVG(salary) > 70000 ORDER BY average_salary DESC",Not Available,"This SQL query uses a JOIN to combine data from both the employees and departments tables, calculating the average salary by department and filtering out those with an average below $70,000. The results are sorted in descending order based on the average salary","Candidates might mistakenly forget to use the HAVING clause properly or might confuse it with the WHERE clause, which could lead to incorrect filtering of results"
273,"You are given two tables: 'employees' (with columns id, name, department_id) and 'departments' (with columns id, department_name, location). Write a SQL query to find the department with the most employees and list its name along with the number of employees. If there's a tie, list all departments with the maximum number of employees","WITH dept_count AS (SELECT d.department_name, COUNT(e.id) AS employee_count FROM departments d LEFT JOIN employees e ON d.id = e.department_id GROUP BY d.department_name) SELECT department_name, employee_count FROM dept_count WHERE employee_count = (SELECT MAX(employee_count) FROM dept_count)",SQL,unknown,Intermediate,"Join, Aggregate Function, CTE","WITH dept_count AS (SELECT d.department_name, COUNT(e.id) AS employee_count FROM departments d LEFT JOIN employees e ON d.id = e.department_id GROUP BY d.department_name) SELECT department_name, employee_count FROM dept_count WHERE employee_count = (SELECT MAX(employee_count) FROM dept_count)",Not Available,The provided SQL code uses a Common Table Expression (CTE) to first calculate the number of employees in each department by joining the 'employees' and 'departments' tables. Then the outer query selects the department(s) with the maximum employee count
274,"You have two tables, `Employees` and `Salaries`. The `Employees` table contains columns `EmployeeID`, `Department`, `Name`, and the `Salaries` table has `EmployeeID`, `Salary`, and `EffectiveDate`. Write a SQL query to find the current salary of each employee along with their department, and rank the salaries within each department","WITH CurrentSalaries AS (SELECT EmployeeID, Salary, Department, ROW_NUMBER() OVER (PARTITION BY Department ORDER BY EffectiveDate DESC) AS rn FROM Employees e JOIN Salaries s ON e.EmployeeID = s.EmployeeID), RankedSalaries AS (SELECT Name, Department, Salary, rn FROM CurrentSalaries WHERE rn = 1) SELECT Name, Department, Salary, RANK() OVER (PARTITION BY Department ORDER BY Salary DESC) AS SalaryRank FROM RankedSalaries",SQL,unknown,Advanced,"[Data Analyst, Data Engineer, Join, Window Function]",SELECT * FROM Employees e JOIN Salaries s ON e.EmployeeID = s.EmployeeID,Not Available,This query uses Common Table Expressions (CTEs) to first get the most recent salary per employee and then ranks those salaries within each department
275,"You are given two tables: `Orders` (with columns `OrderID`, `CustomerID`, `OrderDate`, and `TotalAmount`) and `Customers` (with columns `CustomerID`, `CustomerName`, and `Country`). Write a SQL query to find the total order amount for each customer for the year 2022, along with the customer name and country, but only include customers who made more than three orders in that year","SELECT c.CustomerName, c.Country, SUM(o.TotalAmount) AS TotalOrderAmount FROM Customers c JOIN Orders o ON c.CustomerID = o.CustomerID WHERE o.OrderDate BETWEEN '2022-01-01' AND '2022-12-31' GROUP BY c.CustomerID, c.CustomerName, c.Country HAVING COUNT(o.OrderID) > 3",SQL,unknown,Intermediate,"[""Data Analyst"", ""SQL"", ""Aggregate Function"", ""Join""]",Not Available,"This query joins the `Customers` and `Orders` tables on `CustomerID`, filters the orders to those within 2022, groups the results by customer, calculates the total order amount, and only includes customers with more than three orders","Candidates might forget to use `HAVING` instead of `WHERE` for the count condition, or they may overlook the date filtering, causing incorrect totals or counts"
276,"Given a sales database with two tables, 'orders' and 'customers', write a SQL query to find the total amount spent by each customer, including those who haven't made any purchases. Your result should include the customer's name and a default value of 0 for those without orders","SELECT c.customer_name, COALESCE(SUM(o.amount), 0) AS total_spent FROM customers c LEFT JOIN orders o ON c.customer_id = o.customer_id GROUP BY c.customer_name",SQL,unknown,Intermediate,"[""Join"",""Aggregate function"",""SQL"",""Data Analysis""]","SELECT c.customer_name, COALESCE(SUM(o.amount), 0) AS total_spent FROM customers c LEFT JOIN orders o ON c.customer_id = o.customer_id GROUP BY c.customer_name",Not Available,"This query uses a LEFT JOIN to combine customer and order data, ensuring all customers are included. It utilizes COALESCE to replace NULL with 0 for customers with no orders and groups the results by customer name for aggregation"
277,"You have a sales database with a table called 'orders' that contains the following columns: order_id, customer_id, order_date, and total_amount. You also have a table called 'customers' with columns customer_id and customer_name. Write a SQL query to find the total sales amount for each customer, including customers who did not make any purchases. The result should show customer_id, customer_name, and total_sales (which should show 0 for customers who haven't placed any orders)","SELECT c.customer_id, c.customer_name, COALESCE(SUM(o.total_amount), 0) AS total_sales FROM customers c LEFT JOIN orders o ON c.customer_id = o.customer_id GROUP BY c.customer_id, c.customer_name ORDER BY c.customer_id",SQL,unknown,Intermediate,"Data Analyst, SQL, Join, Aggregate Function","SELECT c.customer_id, c.customer_name, COALESCE(SUM(o.total_amount), 0) AS total_sales FROM customers c LEFT JOIN orders o ON c.customer_id = o.customer_id GROUP BY c.customer_id, c.customer_name ORDER BY c.customer_id",Not Available,"This SQL query uses a LEFT JOIN to combine the customers and orders tables, ensuring all customers are displayed, even those without orders. It calculates total sales amounts using COALESCE to handle NULL values and defaults to 0 for customers without orders, grouping the results by customer"
278,"You are working with a database containing two tables: `employees` and `departments`. The `employees` table contains employee IDs, names, and their respective department IDs (e.g., EmployeeID, Name, DepartmentID). The `departments` table lists department IDs and their names (e.g., DepartmentID, DepartmentName). Write an SQL query to find the total number of employees in each department, including departments with zero employees. The output should list the department name and the number of employees, with departments having zero employees shown as well","SELECT d.DepartmentName, COUNT(e.EmployeeID) AS TotalEmployees FROM departments d LEFT JOIN employees e ON d.DepartmentID = e.DepartmentID GROUP BY d.DepartmentName ORDER BY d.DepartmentName",SQL,unknown,Intermediate,"Data Analyst, Data Engineer, Join, Aggregate Function","SELECT d.DepartmentName, COUNT(e.EmployeeID) AS TotalEmployees FROM departments d LEFT JOIN employees e ON d.DepartmentID = e.DepartmentID GROUP BY d.DepartmentName ORDER BY d.DepartmentName",Not Available,"This query uses a LEFT JOIN to include all departments, even those without employees (which would result in NULL values for EmployeeID). The COUNT function is used to count the number of employees in each department, with the results grouped by department name"
279,"Given a sales table and a products table, write an SQL query to find the top 3 products by total sales in the last year. Assume the sales table has `product_id`, `amount`, and `sale_date`, while the products table has `id`, `name`. You should also include the total sales amount in your result","WITH TotalSales AS (SELECT p.id, p.name, SUM(s.amount) as total_sales FROM products p JOIN sales s ON p.id = s.product_id WHERE s.sale_date >= DATEADD(year, -1, GETDATE()) GROUP BY p.id, p.name) SELECT TOP 3 id, name, total_sales FROM TotalSales ORDER BY total_sales DESC",SQL,unknown,Intermediate,"[""Join"", ""Aggregate Function"", ""CTE""]",Not Available,"This SQL query first computes the total sales for each product from the sales table in the last year using a Common Table Expression (CTE), then selects the top 3 products based on total sales","Candidates might forget to use the date filter, write incorrect aggregate functions, or mismanage the join conditions"
280,"You work for a retail company and have two tables: `orders` (order_id, customer_id, order_date, amount) and `customers` (customer_id, customer_name, join_date). Write a query to find the top 5 customers who have spent the most since joining, along with their total spend and the date they joined","WITH customer_spending AS (SELECT c.customer_id, c.customer_name, SUM(o.amount) AS total_spend, c.join_date FROM customers c JOIN orders o ON c.customer_id = o.customer_id GROUP BY c.customer_id, c.customer_name, c.join_date) SELECT customer_id, customer_name, total_spend, join_date FROM customer_spending ORDER BY total_spend DESC LIMIT 5",SQL,unknown,Intermediate,"Data Analyst, Aggregate function, Join, CTE","SELECT c.customer_id, c.customer_name, SUM(o.amount) AS total_spend FROM customers c JOIN orders o ON c.customer_id = o.customer_id GROUP BY c.customer_id, c.customer_name ORDER BY total_spend DESC LIMIT 5",Not Available,The query uses a Common Table Expression (CTE) to first calculate the total spending for each customer by joining the `customers` and `orders` tables. It then selects the top 5 customers based on their total spend
281,"You are given two tables: `employees` (with columns `id`, `name`, `department_id`, and `salary`) and `departments` (with columns `id`, `department_name`). Write a SQL query to find the department that has the highest average salary and return the department name along with the average salary","SELECT d.department_name, AVG(e.salary) AS average_salary FROM employees e JOIN departments d ON e.department_id = d.id GROUP BY d.department_name ORDER BY average_salary DESC LIMIT 1",SQL,unknown,Intermediate,"Data Analyst, Aggregate function, Join","SELECT d.department_name, AVG(e.salary) AS average_salary FROM employees e JOIN departments d ON e.department_id = d.id GROUP BY d.department_name ORDER BY average_salary DESC LIMIT 1",Not Available,"This query joins the `employees` and `departments` tables on the department ID, groups the results by department name, calculates the average salary for each department, and orders the results to find the department with the highest average salary"
282,"Suppose you have two tables: `orders` and `customers`. The `orders` table contains order information with columns: `order_id`, `customer_id`, `order_date`, and `total_amount`. The `customers` table has `customer_id`, `customer_name`, and `customer_since`. Write a SQL query to find the customers who have spent more than $500 in total, along with their names and total spending amount, sorted by total spending in descending order","SELECT c.customer_name, SUM(o.total_amount) AS total_spent FROM customers c JOIN orders o ON c.customer_id = o.customer_id GROUP BY c.customer_name HAVING SUM(o.total_amount) > 500 ORDER BY total_spent DESC",SQL,unknown,Intermediate,"['JOIN', 'Aggregate function', 'HAVING clause']","SELECT c.customer_name, SUM(o.total_amount) AS total_spent FROM customers c JOIN orders o ON c.customer_id = o.customer_id GROUP BY c.customer_name HAVING SUM(o.total_amount) > 500 ORDER BY total_spent DESC",Not Available,"This query joins the `customers` and `orders` tables on the `customer_id`, sums the `total_amount` for each customer who spent more than $500, groups by customer name, and orders the result by total spending in descending order"
283,"You are given two tables: 'orders' and 'customers'. The 'orders' table contains information about purchases, including the order ID, customer ID, order date, and total amount. The 'customers' table includes customer ID and customer name. Write a SQL query to find the top 5 customers who have spent the most in total over all of their orders, along with their total spending. Your result should display the customer ID, customer name, and total spent, ordered by total spent in descending order","SELECT c.customer_id, c.customer_name, SUM(o.total_amount) AS total_spent FROM orders o JOIN customers c ON o.customer_id = c.customer_id GROUP BY c.customer_id, c.customer_name ORDER BY total_spent DESC LIMIT 5",SQL,intermediate,"[""Data Analyst"", ""Business Intelligence"", ""Join"", ""Aggregation""]","SELECT c.customer_id, c.customer_name, SUM(o.total_amount) AS total_spent FROM orders o JOIN customers c ON o.customer_id = c.customer_id GROUP BY c.customer_id, c.customer_name ORDER BY total_spent DESC LIMIT 5",Not Available,"The query performs a join between the 'orders' and 'customers' tables on the customer ID, aggregates the order totals by customer, orders the results by total spending in descending order, and limits the results to the top 5 customers","Candidates might forget to group by customer name or accidentally include the order amounts without aggregation, leading to invalid queries"
284,"You are given two tables: `employees` which contains `employee_id`, `name`, and `manager_id`, and `sales` which contains `employee_id`, `sale_amount`, and `sale_date`. Write a SQL query to find the total sales amount for each manager, along with their names, and return only those managers who have total sales over $10,000","SELECT e.manager_id, e.name, SUM(s.sale_amount) AS total_sales FROM employees e LEFT JOIN sales s ON e.employee_id = s.employee_id WHERE e.manager_id IS NOT NULL GROUP BY e.manager_id, e.name HAVING SUM(s.sale_amount) > 10000",SQL,unknown,Intermediate,"Data Analyst, Data Engineer, Join, Aggregation, Group By","SELECT e.manager_id, e.name, SUM(s.sale_amount) AS total_sales FROM employees e LEFT JOIN sales s ON e.employee_id = s.employee_id WHERE e.manager_id IS NOT NULL GROUP BY e.manager_id, e.name HAVING SUM(s.sale_amount) > 10000",Not Available,"This query joins the `employees` and `sales` tables to compute the total sales for each manager, grouping by the manager's information, and filtering to return only managers with sales exceeding $10,000"
285,"You are tasked with analyzing employee performance data from two tables: `employees` and `performance_reviews`. The `employees` table contains columns `employee_id`, `name`, and `hire_date`, while the `performance_reviews` table contains columns `review_id`, `employee_id`, `review_date`, and `rating`. Write a SQL query to find the average rating for each employee, along with their name and the number of reviews they have received, only for those hired in or after 2020, and order the results by average rating in descending order","SELECT e.name, AVG(pr.rating) AS average_rating, COUNT(pr.review_id) AS review_count FROM employees e LEFT JOIN performance_reviews pr ON e.employee_id = pr.employee_id WHERE e.hire_date >= '2020-01-01' GROUP BY e.employee_id, e.name ORDER BY average_rating DESC",SQL,unknown,Intermediate,"Data Analyst, Join, Aggregate function","SELECT e.name, AVG(pr.rating) AS average_rating, COUNT(pr.review_id) AS review_count FROM employees e LEFT JOIN performance_reviews pr ON e.employee_id = pr.employee_id WHERE e.hire_date >= '2020-01-01' GROUP BY e.employee_id, e.name ORDER BY average_rating DESC",Not Available,"This query joins the `employees` and `performance_reviews` tables on the `employee_id`, filters employees hired in or after 2020, aggregates the ratings to find the average, counts the number of reviews per employee, and orders the results by average rating"
286,"You are given two tables: `employees` with columns `id`, `name`, `department_id`, and `salary`, and `departments` with columns `id`, `department_name`. Write a SQL query to find the average salary of employees in each department, but only include departments where the average salary is greater than $50,000","WITH DepartmentAvg AS (SELECT d.department_name, AVG(e.salary) AS avg_salary FROM employees e JOIN departments d ON e.department_id = d.id GROUP BY d.department_name) SELECT department_name, avg_salary FROM DepartmentAvg WHERE avg_salary > 50000",SQL,unknown,Intermediate,"Data Analyst, Aggregate Function, CTE, Join","WITH DepartmentAvg AS (SELECT d.department_name, AVG(e.salary) AS avg_salary FROM employees e JOIN departments d ON e.department_id = d.id GROUP BY d.department_name) SELECT department_name, avg_salary FROM DepartmentAvg WHERE avg_salary > 50000",Not Available,"This query uses a Common Table Expression (CTE) to first calculate the average salary per department and then filters for those departments where the average salary exceeds $50,000"
287,"You are given two tables: 'employees' (employee_id, department_id, salary) and 'departments' (department_id, department_name). Write a SQL query to find the average salary of employees in each department, but only include departments where the average salary is greater than $60,000. Furthermore, sort the results by average salary in descending order","SELECT d.department_name, AVG(e.salary) AS average_salary FROM employees e JOIN departments d ON e.department_id = d.department_id GROUP BY d.department_name HAVING AVG(e.salary) > 60000 ORDER BY average_salary DESC",SQL,unknown,Intermediate,"[""Join"", ""Aggregate function"", ""Data Analysis""]",Not Available,"This query retrieves the average salaries of employees partitioned by department. It joins the 'employees' and 'departments' tables on department_id, averages the salaries, filters out departments with an average below $60,000 using HAVING, and sorts the results in descending order of average salary","Common mistakes include failing to use GROUP BY correctly, not using HAVING to filter aggregated results, or not including the JOIN clause properly"
288,"You are given two tables: `employees` and `departments`. The `employees` table contains columns `id`, `name`, `salary`, and `department_id`. The `departments` table contains `id` and `department_name`. Write a SQL query to find the average salary of employees in each department, along with the department name. Order the results by average salary in descending order","SELECT d.department_name, AVG(e.salary) AS average_salary FROM employees e JOIN departments d ON e.department_id = d.id GROUP BY d.department_name ORDER BY average_salary DESC",SQL,unknown,Intermediate,"Join, Aggregate Function, Group By","SELECT d.department_name, AVG(e.salary) AS average_salary FROM employees e JOIN departments d ON e.department_id = d.id GROUP BY d.department_name ORDER BY average_salary DESC",Not Available,"This query joins the `employees` and `departments` tables to combine relevant data, calculates the average salary for each department using the `AVG()` aggregate function, groups the results by department name, and orders the results by average salary in descending order"
289,"You have a sales database with two tables: `sales` (columns: `sale_id`, `product_id`, `sale_date`, `quantity`, `revenue`) and `products` (columns: `product_id`, `product_name`, `category`). Write a SQL query to find the total revenue generated for each product category in the last quarter (Q4) of 2023. Format the output to show the category name and total revenue, sorted by total revenue in descending order","SELECT p.category, SUM(s.revenue) AS total_revenue FROM sales s JOIN products p ON s.product_id = p.product_id WHERE s.sale_date >= '2023-10-01' AND s.sale_date < '2024-01-01' GROUP BY p.category ORDER BY total_revenue DESC",SQL,unknown,Intermediate,"[""Join"", ""Aggregate function"", ""Data Analysis""]","SELECT p.category, SUM(s.revenue) AS total_revenue FROM sales s JOIN products p ON s.product_id = p.product_id WHERE s.sale_date >= '2023-10-01' AND s.sale_date < '2024-01-01' GROUP BY p.category ORDER BY total_revenue DESC",Not Available,"This query joins the `sales` and `products` tables on the `product_id`, filters for sales in Q4 of 2023, groups the results by category, and calculates the total revenue for each category, ordering the results by total revenue in descending order"
290,"You are given two tables: `orders` (which contains order information including `order_id`, `customer_id`, `order_date`, `total_amount`) and `customers` (which contains customer information including `customer_id`, `customer_name`, `signup_date`). Write a SQL query to find the total revenue generated from customers who signed up in the last year, grouped by month. Also, include the month name in the output","WITH monthly_revenue AS ( SELECT DATE_TRUNC('month', o.order_date) AS month, SUM(o.total_amount) AS total_revenue FROM orders o JOIN customers c ON o.customer_id = c.customer_id WHERE c.signup_date >= DATE_TRUNC('year', CURRENT_DATE) - INTERVAL '1 year' GROUP BY month ) SELECT TO_CHAR(month, 'Mon YYYY') AS month_name, total_revenue FROM monthly_revenue ORDER BY month",SQL,unknown,Advanced,"Data Analyst, Aggregate function, Join, CTE","WITH monthly_revenue AS ( SELECT DATE_TRUNC('month', o.order_date) AS month, SUM(o.total_amount) AS total_revenue FROM orders o JOIN customers c ON o.customer_id = c.customer_id WHERE c.signup_date >= DATE_TRUNC('year', CURRENT_DATE) - INTERVAL '1 year' GROUP BY month ) SELECT TO_CHAR(month, 'Mon YYYY') AS month_name, total_revenue FROM monthly_revenue ORDER BY month",Not Available,"This query first creates a Common Table Expression (CTE) called `monthly_revenue`, calculating the total revenue per month for customers who signed up in the last year. It groups the results by month and then formats the output to show the month along with the revenue"
291,"You are given two tables: 'Sales' which records all sales transactions and 'Products' which contains product details. Write a SQL query to find the total sales for each product, listing only those products that have generated sales greater than $10,000. The result should include product ID, product name, and total sales amount. Assume 'Sales' table has columns: 'product_id', 'amount', and 'Products' table has columns: 'id' and 'name'","SELECT p.id, p.name, SUM(s.amount) AS total_sales FROM Products p JOIN Sales s ON p.id = s.product_id GROUP BY p.id, p.name HAVING SUM(s.amount) > 10000",SQL,unknown,Intermediate,"['Data Analyst', 'Join', 'Aggregate function']","SELECT p.id, p.name, SUM(s.amount) AS total_sales FROM Products p JOIN Sales s ON p.id = s.product_id GROUP BY p.id, p.name HAVING SUM(s.amount) > 10000",Not Available,"This query joins the 'Products' and 'Sales' tables on the product ID and aggregates the sales amount for each product. It then filters the products to only include those with total sales exceeding $10,000"
292,"Given two tables, `sales` (with columns `sale_id`, `product_id`, `sale_date`, and `amount`) and `products` (with columns `product_id`, `product_name`, and `category`), write a SQL query to find the total sales amount for each category in the last month and order the result by total sales in descending order","SELECT p.category, SUM(s.amount) AS total_sales 
 FROM sales s 
 JOIN products p ON s.product_id = p.product_id 
 WHERE s.sale_date >= DATEADD(month, -1, GETDATE()) 
 GROUP BY p.category 
 ORDER BY total_sales DESC",SQL,unknown,Intermediate,"[""Data Analyst"", ""Business Intelligence"", ""Join"", ""Aggregate function""]","SELECT p.category, SUM(s.amount) AS total_sales 
 FROM sales s 
 JOIN products p ON s.product_id = p.product_id 
 WHERE s.sale_date >= DATEADD(month, -1, GETDATE()) 
 GROUP BY p.category 
 ORDER BY total_sales DESC",Not Available,"This SQL query performs an inner join between the `sales` and `products` tables to combine sales data with product categories, filters the sales from the last month, calculates the total sales amount per category using aggregation, and orders the results by total sales"
293,"You are given two tables: `employees` (with columns `employee_id`, `name`, `department_id`, and `salary`) and `departments` (with columns `department_id` and `department_name`). Write a SQL query to find the average salary of employees in each department and list the department names alongside their average salaries. Sort the results by the average salary in descending order","SELECT d.department_name, AVG(e.salary) as average_salary FROM employees e JOIN departments d ON e.department_id = d.department_id GROUP BY d.department_name ORDER BY average_salary DESC",SQL,unknown,Intermediate,"['Join', 'Aggregate function', 'Data Analysis']","SELECT d.department_name, AVG(e.salary) as average_salary FROM employees e JOIN departments d ON e.department_id = d.department_id GROUP BY d.department_name ORDER BY average_salary DESC",Not Available,"This query joins the `employees` and `departments` tables on the `department_id`, calculates the average salary for each department using the `AVG()` aggregate function, and sorts the results in descending order of average salary"
294,"You are provided with two tables: `employees` and `sales`. The `employees` table contains `employee_id`, `name`, and `department_id`. The `sales` table contains `sale_id`, `employee_id`, `sale_amount`, and `sale_date`. Can you write a SQL query to find the top 3 employees by total sales amount in each department?","WITH department_sales AS ( SELECT e.department_id, e.name, SUM(s.sale_amount) AS total_sales FROM employees e JOIN sales s ON e.employee_id = s.employee_id GROUP BY e.department_id, e.name ) SELECT department_id, name, total_sales FROM ( SELECT department_id, name, total_sales, ROW_NUMBER() OVER (PARTITION BY department_id ORDER BY total_sales DESC) AS sales_rank FROM department_sales ) ranked_sales WHERE sales_rank <= 3 ORDER BY department_id, total_sales DESC",SQL,unknown,Advanced,"Data Analyst, SQL, Window Functions, Aggregation","SELECT e.department_id, e.name, SUM(s.sale_amount) AS total_sales FROM employees e JOIN sales s ON e.employee_id = s.employee_id GROUP BY e.department_id, e.name",Not Available,"The SQL code uses a Common Table Expression (CTE) to first calculate the total sales per employee in each department, and then it uses the ROW_NUMBER() window function to rank the employees within each department based on their total sales. The final selection filters those ranked within the top three for each department"
295,"Given a sales database with the tables `sales` (with columns `id`, `product_id`, `quantity`, `sale_date`) and `products` (with columns `id`, `product_name`, `category`), write a query to find the total quantity of products sold for each category in the last month, sorted by category name","SELECT p.category, SUM(s.quantity) AS total_quantity FROM sales s JOIN products p ON s.product_id = p.id WHERE s.sale_date >= DATEADD(MONTH, -1, GETDATE()) GROUP BY p.category ORDER BY p.category",SQL,unknown,Intermediate,"['Join', 'Aggregation', 'Data Analysis']","SELECT p.category, SUM(s.quantity) AS total_quantity FROM sales s JOIN products p ON s.product_id = p.id WHERE s.sale_date >= DATEADD(MONTH, -1, GETDATE()) GROUP BY p.category ORDER BY p.category",Not Available,"This query joins the `sales` and `products` tables on the `product_id`, filters the sales made in the last month, groups results by the `category`, and calculates the total quantity sold for each category"
296,"You are working for an e-commerce company that tracks customer orders in a `customer_orders` table, which contains the columns `customer_id`, `order_date`, and `total_amount`. You also have a `customers` table with `customer_id`, `customer_name`, and `join_date`. Write a SQL query to find the total spending of customers who joined before January 1, 2020, and have placed at least three orders, sorted by total spending in descending order","SELECT c.customer_id, c.customer_name, SUM(co.total_amount) AS total_spending FROM customers c JOIN customer_orders co ON c.customer_id = co.customer_id WHERE c.join_date < '2020-01-01' GROUP BY c.customer_id, c.customer_name HAVING COUNT(co.order_date) >= 3 ORDER BY total_spending DESC",SQL,unknown,Advanced,"[""Data Analyst"", ""Data Engineer"", ""Business Intelligence"", ""Join"", ""Aggregate Function""]",Not Available,"The query joins the `customers` table with the `customer_orders` table to filter for customers who joined before a certain date, groups the results by customer, calculates their total spending, and ensures that only customers with at least three orders are included in the results, sorted by total spending",Candidates may incorrectly use the `WHERE` clause instead of `HAVING` for aggregate functions or neglect to sort by total spending
297,"Given an online retail database with tables: `customers`, `orders`, and `order_items`, write a SQL query to find the top three customers in terms of total spending over the last year. Consider spending as the sum of the total price of items in their orders. Ensure you include customer details such as name and email in the result","WITH CustomerSpending AS (SELECT c.id AS customer_id, c.name, c.email, SUM(oi.price * oi.quantity) AS total_spent FROM customers c JOIN orders o ON c.id = o.customer_id JOIN order_items oi ON o.id = oi.order_id WHERE o.order_date >= DATEADD(year, -1, GETDATE()) GROUP BY c.id, c.name, c.email) SELECT TOP 3 customer_id, name, email, total_spent FROM CustomerSpending ORDER BY total_spent DESC",SQL,unknown,Advanced,"[""Data Analyst"", ""Data Engineer"", ""SQL"", ""Aggregate Function"", ""Join""]","WITH CustomerSpending AS (SELECT c.id AS customer_id, c.name, c.email, SUM(oi.price * oi.quantity) AS total_spent FROM customers c JOIN orders o ON c.id = o.customer_id JOIN order_items oi ON o.id = oi.order_id WHERE o.order_date >= DATEADD(year, -1, GETDATE()) GROUP BY c.id, c.name, c.email) SELECT TOP 3 customer_id, name, email, total_spent FROM CustomerSpending ORDER BY total_spent DESC",Not Available,"This SQL code uses a Common Table Expression (CTE) to calculate the total spending per customer over the last year by joining the `customers`, `orders`, and `order_items` tables. It groups the results and selects the top three customers based on total spending"
298,"You are given two tables: 'employees' and 'departments'. The 'employees' table contains 'employee_id', 'employee_name', 'department_id', and 'salary'. The 'departments' table contains 'department_id' and 'department_name'. Write a query to find the average salary of employees in each department along with the department names. The result should be ordered by the average salary in descending order","SELECT d.department_name, AVG(e.salary) AS average_salary FROM employees e JOIN departments d ON e.department_id = d.department_id GROUP BY d.department_name ORDER BY average_salary DESC",SQL,unknown,Intermediate,"[SQL, Join, Aggregate function]","SELECT d.department_name, AVG(e.salary) AS average_salary FROM employees e JOIN departments d ON e.department_id = d.department_id GROUP BY d.department_name ORDER BY average_salary DESC",Not Available,"This query joins the 'employees' table with the 'departments' table to calculate the average salary of employees within each department, grouping by department names and ordering the results by average salary in descending order"
299,"You have two tables, `employees` (employee_id, employee_name, department_id) and `departments` (department_id, department_name). Write a SQL query to find the total number of employees in each department, including departments that currently have no employees","SELECT d.department_name, COUNT(e.employee_id) AS total_employees FROM departments d LEFT JOIN employees e ON d.department_id = e.department_id GROUP BY d.department_name",SQL,unknown,Intermediate,"Data Analyst, Join, Aggregate Function","SELECT d.department_name, COUNT(e.employee_id) AS total_employees FROM departments d LEFT JOIN employees e ON d.department_id = e.department_id GROUP BY d.department_name",Not Available,"This SQL query uses a LEFT JOIN to combine the `departments` table with the `employees` table, ensuring that all departments are included in the result. The COUNT function is used to aggregate the total number of employees for each department, even if that count is zero for departments without any employees. The result is grouped by the department name"
300,"Given two tables, `orders` and `customers`, where `orders` contains the fields `order_id`, `customer_id`, `order_date`, and `amount`, and `customers` contains the fields `customer_id`, `customer_name`, and `region`. Write a SQL query to find the total order amount for each customer along with their name and region, and display the results only for customers who have made more than 5 orders","SELECT c.customer_name, c.region, SUM(o.amount) AS total_amount FROM customers AS c JOIN orders AS o ON c.customer_id = o.customer_id GROUP BY c.customer_id, c.customer_name, c.region HAVING COUNT(o.order_id) > 5",SQL,unknown,Intermediate,"['Data Analyst', 'Join', 'Aggregation']","SELECT c.customer_name, c.region, SUM(o.amount) AS total_amount FROM customers AS c JOIN orders AS o ON c.customer_id = o.customer_id GROUP BY c.customer_id, c.customer_name, c.region HAVING COUNT(o.order_id) > 5",Not Available,"This query joins the `customers` and `orders` tables on `customer_id`, groups the results by customer details, sums their order amounts, and filters the results to include only those customers with more than 5 orders"
301,"You are given two tables: `employees` and `departments`. The `employees` table contains columns `id`, `name`, `department_id`, and `salary`. The `departments` table contains columns `id` and `department_name`. Write an SQL query to find the average salary of employees in each department, and also show the department names. If a department has no employees, include it in the results with an average salary of 0","SELECT d.department_name, COALESCE(AVG(e.salary), 0) AS average_salary FROM departments d LEFT JOIN employees e ON d.id = e.department_id GROUP BY d.department_name ORDER BY d.department_name",SQL,unknown,Intermediate,"['Join', 'Aggregation', 'Left Join']","SELECT d.department_name, COALESCE(AVG(e.salary), 0) AS average_salary FROM departments d LEFT JOIN employees e ON d.id = e.department_id GROUP BY d.department_name ORDER BY d.department_name",Not Available,"This query uses a LEFT JOIN to ensure all departments are included, with AVG() to calculate the average salary and COALESCE() to handle departments with no employees"
302,"Given two tables, `employees` and `departments`, write a query to find the average salary of employees in each department and include departments with no employees with a salary of 0. Name the department as 'Department Name' and the average salary as 'Average Salary'. Sort the results by average salary in descending order","SELECT d.department_name AS 'Department Name', COALESCE(AVG(e.salary), 0) AS 'Average Salary' FROM departments d LEFT JOIN employees e ON d.department_id = e.department_id GROUP BY d.department_name ORDER BY AVG(e.salary) DESC",SQL,unknown,Intermediate,"['Aggregate function', 'Join', 'Data Analyst']","SELECT d.department_name AS 'Department Name', COALESCE(AVG(e.salary), 0) AS 'Average Salary' FROM departments d LEFT JOIN employees e ON d.department_id = e.department_id GROUP BY d.department_name ORDER BY AVG(e.salary) DESC",Not Available,This query uses a LEFT JOIN to connect the `departments` table with the `employees` table. It calculates the average salary for each department while ensuring that departments without employees are included with an average salary of 0 by using `COALESCE`
303,"You need to analyze the sales performance of products in different categories for the last quarter. You have two tables: `sales` (with columns `sale_id`, `product_id`, `sale_date`, `amount`) and `products` (with columns `product_id`, `product_name`, `category`). Write a SQL query to find the total sales amount for each product category along with the number of products sold in that category","SELECT p.category, SUM(s.amount) AS total_sales, COUNT(s.product_id) AS products_sold FROM sales s JOIN products p ON s.product_id = p.product_id WHERE s.sale_date BETWEEN '2023-07-01' AND '2023-09-30' GROUP BY p.category",SQL,unknown,Intermediate,"Data Analyst, Join, Aggregate function","SELECT p.category, SUM(s.amount) AS total_sales, COUNT(s.product_id) AS products_sold FROM sales s JOIN products p ON s.product_id = p.product_id WHERE s.sale_date BETWEEN '2023-07-01' AND '2023-09-30' GROUP BY p.category",Not Available,"This query joins the `sales` and `products` tables on `product_id`, filters for sales in the last quarter, and groups the results by category to calculate total sales and product count"
304,"You have two tables in a database, `orders` and `customers`. The `orders` table has columns `order_id`, `customer_id`, `order_date`, and `order_amount`. The `customers` table includes `customer_id`, `customer_name`, and `customer_since`. Write a SQL query to find the total order amount for each customer who has placed more than 5 orders and was a customer since the year 2020. Sort the results by total order amount in descending order","WITH order_counts AS (SELECT customer_id, COUNT(order_id) AS total_orders FROM orders GROUP BY customer_id HAVING COUNT(order_id) > 5) SELECT c.customer_name, SUM(o.order_amount) AS total_order_amount FROM order_counts oc JOIN orders o ON oc.customer_id = o.customer_id JOIN customers c ON c.customer_id = oc.customer_id WHERE c.customer_since >= '2020-01-01' GROUP BY c.customer_name ORDER BY total_order_amount DESC",SQL,unknown,Advanced,"[""Data Analyst"",""Business Intelligence"",""Aggregate function"",""CTE"",""Join""]",Not Available,"The SQL code first uses a Common Table Expression (CTE) to identify customers with more than 5 orders. It then joins this CTE with the `orders` and `customers` tables to calculate the total order amount for qualifying customers since 2020, finally sorting the results in descending order of order amounts","Common mistakes include failing to use the HAVING clause properly, not joining the tables correctly, neglecting to filter on `customer_since`, or misusing the GROUP BY clause"
305,"Given a sales database containing a 'sales' table and a 'products' table, write a SQL query to find the top three products by total sales amount for the past year. Include the product name and the total sales amount in your results. Use appropriate joins and aggregations","SELECT p.product_name, SUM(s.amount) AS total_sales FROM sales s JOIN products p ON s.product_id = p.product_id WHERE s.sale_date >= DATE_TRUNC('year', CURRENT_DATE - INTERVAL '1 year') GROUP BY p.product_name ORDER BY total_sales DESC LIMIT 3",SQL,unknown,Intermediate,"[""Join"", ""Aggregate function"", ""Data Analysis""]","SELECT product_name, SUM(amount) AS total_sales FROM sales WHERE sale_date >= DATE_TRUNC('year', CURRENT_DATE - INTERVAL '1 year') GROUP BY product_name ORDER BY total_sales DESC LIMIT 3",Not Available,"This SQL query joins the sales and products tables based on the product ID, filters for sales within the past year, aggregates the total sales by product name, and orders the results to display the top three products by sales amount"
306,"You are given two tables, 'sales' and 'products'. The 'sales' table contains columns 'sale_id', 'product_id', 'quantity_sold', 'sale_date'. The 'products' table contains 'product_id', 'product_name', and 'price'. Write a SQL query to find the total revenue generated from each product, along with its name, sorted by revenue in descending order","SELECT p.product_name, SUM(s.quantity_sold * p.price) AS total_revenue FROM sales s JOIN products p ON s.product_id = p.product_id GROUP BY p.product_name ORDER BY total_revenue DESC",SQL,unknown,Intermediate,"Data Analyst, SQL, Join, Aggregate Function","SELECT p.product_name, SUM(s.quantity_sold * p.price) AS total_revenue FROM sales s JOIN products p ON s.product_id = p.product_id GROUP BY p.product_name ORDER BY total_revenue DESC",Not Available,"This query calculates the total revenue for each product by joining the sales and products tables on 'product_id', summing the product of 'quantity_sold' and 'price', grouping the results by product name, and ordering them in descending order of revenue"
307,"Consider a database with two tables: `employees` (columns: `id`, `name`, `department_id`, `salary`) and `departments` (columns: `id`, `department_name`). Write a SQL query to find the top 3 highest-paid employees in each department along with the department name","WITH RankedEmployees AS (SELECT e.name, d.department_name, e.salary, ROW_NUMBER() OVER (PARTITION BY e.department_id ORDER BY e.salary DESC) AS rank FROM employees e JOIN departments d ON e.department_id = d.id) SELECT name, department_name, salary FROM RankedEmployees WHERE rank <= 3",SQL,unknown,Advanced,"[""Data Analyst"", ""Data Engineer"", ""Business Intelligence"", ""Window Function"", ""CTE""]","WITH RankedEmployees AS (SELECT e.name, d.department_name, e.salary, ROW_NUMBER() OVER (PARTITION BY e.department_id ORDER BY e.salary DESC) AS rank FROM employees e JOIN departments d ON e.department_id = d.id) SELECT name, department_name, salary FROM RankedEmployees WHERE rank <= 3",Not Available,"This query uses a Common Table Expression (CTE) to first rank employees within each department based on their salary using the `ROW_NUMBER()` window function. Then, it selects the top 3 employees from each department by filtering on the computed rank"
308,"Given a sales table with columns `id`, `order_date`, `customer_id`, `amount` and a customers table with columns `id`, `name`, `signup_date`, write a query that retrieves the total sales amount for each customer and lists only those who signed up in the last 12 months and had sales in that period","WITH recent_customers AS (SELECT id, name FROM customers WHERE signup_date >= DATEADD(MONTH, -12, GETDATE())) SELECT rc.name, SUM(s.amount) AS total_sales FROM recent_customers rc JOIN sales s ON rc.id = s.customer_id WHERE s.order_date >= DATEADD(MONTH, -12, GETDATE()) GROUP BY rc.id, rc.name",SQL,unknown,Intermediate,"[""Join"", ""Aggregate function"", ""CTE"", ""Data Analyst""]",Not Available,"This query starts by defining a Common Table Expression (CTE) to filter out customers who signed up in the last 12 months. It then joins this CTE with the sales data to calculate the total sales for these customers, considering only sales that also occurred in the last 12 months","Candidates might forget to filter the sales data by order_date, leading to incorrect sales totals. Also, they may overlook grouping correctly by the customer ID"
309,"You have two tables: 'employees' (with fields: employee_id, name, department_id) and 'salaries' (with fields: employee_id, salary, start_date). Write a SQL query to find the average salary for each department for the year 2022, and ensure that departments with no employees in that year are also included in the results with an average salary of 0","SELECT d.department_id, COALESCE(AVG(s.salary), 0) AS average_salary FROM (SELECT DISTINCT department_id FROM employees) AS d LEFT JOIN salaries s ON s.employee_id IN (SELECT employee_id FROM employees e WHERE e.department_id = d.department_id AND EXTRACT(YEAR FROM s.start_date) = 2022) GROUP BY d.department_id",SQL,unknown,Intermediate,"['Data Analyst', 'Data Engineer', 'Aggregate function', 'Join']","SELECT d.department_id, COALESCE(AVG(s.salary), 0) AS average_salary FROM (SELECT DISTINCT department_id FROM employees) AS d LEFT JOIN salaries s ON s.employee_id IN (SELECT employee_id FROM employees e WHERE e.department_id = d.department_id AND EXTRACT(YEAR FROM s.start_date) = 2022) GROUP BY d.department_id",Not Available,"This query uses a LEFT JOIN to include all departments and computes the average salary for the specified year 2022, using the COALESCE function to return 0 for departments with no salaries recorded"
310,"You are tasked with analyzing sales data for a retail company. The sales records are stored in a table called 'sales' with columns: 'sale_id', 'product_id', 'amount', and 'sale_date'. There is also a 'products' table with 'product_id' and 'product_category'. Write a SQL query to calculate the total sales amount for each product category in the month of January 2023","SELECT p.product_category, SUM(s.amount) AS total_sales FROM sales s JOIN products p ON s.product_id = p.product_id WHERE s.sale_date >= '2023-01-01' AND s.sale_date < '2023-02-01' GROUP BY p.product_category",SQL,unknown,Intermediate,"[""Data Analyst"", ""Join"", ""Aggregate Function""]",Not Available,"This query joins the 'sales' and 'products' tables on 'product_id'. It filters sales records to only include those from January 2023 and groups the results by 'product_category', calculating the total sales amount for each category",Candidates might forget to include the date filter correctly or fail to group the results by category
311,"You are given two tables: 'employees' (columns: id, name, department_id, salary) and 'departments' (columns: id, department_name). Write a SQL query to find the total salary expense for each department and list those departments with an expense greater than $100,000. Order the result by department_name","SELECT d.department_name, SUM(e.salary) AS total_salary FROM employees e JOIN departments d ON e.department_id = d.id GROUP BY d.department_name HAVING SUM(e.salary) > 100000 ORDER BY d.department_name",SQL,unknown,Intermediate,"Join, Aggregate Function, Group By","SELECT d.department_name, SUM(e.salary) AS total_salary FROM employees e JOIN departments d ON e.department_id = d.id GROUP BY d.department_name HAVING SUM(e.salary) > 100000 ORDER BY d.department_name",Not Available,"This query joins the 'employees' and 'departments' tables on department_id and aggregates the salaries for each department. It filters the results to show only those departments where the total salary exceeds $100,000 and sorts the output by department name"
312,"You are tasked with analyzing the sales data for a retail company. Given the `sales` table that records the sales transactions and a `products` table that holds product details, write a SQL query to find the top 3 products by total sales revenue, including the product name and total revenue. Additionally, for each product, include the count of distinct customers who made purchases. The tables are structured as follows: `sales` (transaction_id, product_id, customer_id, amount) and `products` (product_id, product_name)","WITH ProductSales AS (SELECT p.product_id, p.product_name, SUM(s.amount) AS total_revenue, COUNT(DISTINCT s.customer_id) AS customer_count FROM products p JOIN sales s ON p.product_id = s.product_id GROUP BY p.product_id ORDER BY total_revenue DESC LIMIT 3) SELECT product_name, total_revenue, customer_count FROM ProductSales",SQL,unknown,Intermediate,"['Join', 'Aggregate function', 'CTE', 'Data Analyst']","WITH ProductSales AS (SELECT p.product_id, p.product_name, SUM(s.amount) AS total_revenue, COUNT(DISTINCT s.customer_id) AS customer_count FROM products p JOIN sales s ON p.product_id = s.product_id GROUP BY p.product_id ORDER BY total_revenue DESC LIMIT 3) SELECT product_name, total_revenue, customer_count FROM ProductSales",Not Available,"This query uses a Common Table Expression (CTE) to first aggregate sales data by product, calculating total revenue and distinct customer counts. It filters for the top 3 products based on total revenue before selecting and displaying the final product name, revenue, and customer count"
313,"Given a sales table with columns 'sales_id', 'product_id', 'quantity_sold', 'sale_date', and a products table with 'product_id' and 'product_name', write a query to find the top 5 products sold by quantity in the last month. Include the product name and the total quantity sold for each product","WITH last_month_sales AS (SELECT product_id, SUM(quantity_sold) AS total_quantity FROM sales WHERE sale_date >= DATEADD(month, -1, GETDATE()) GROUP BY product_id) SELECT p.product_name, l.total_quantity FROM last_month_sales l JOIN products p ON l.product_id = p.product_id ORDER BY l.total_quantity DESC LIMIT 5",SQL,intermediate,"['Data Analyst', 'Aggregate function', 'Join']","WITH last_month_sales AS (SELECT product_id, SUM(quantity_sold) AS total_quantity FROM sales WHERE sale_date >= DATEADD(month, -1, GETDATE()) GROUP BY product_id) SELECT p.product_name, l.total_quantity FROM last_month_sales l JOIN products p ON l.product_id = p.product_id ORDER BY l.total_quantity DESC LIMIT 5",Not Available,"This query uses a Common Table Expression (CTE) to first aggregate the sales data for the last month and then joins this aggregated data with the products table to fetch the product names, ordering the results to get the top 5 products by quantity sold",Candidates might forget to filter the sale_date correctly for the last month or may not properly limit the output to 5 results
314,"You have two tables: orders (with columns order_id, customer_id, order_total, order_date) and customers (with columns customer_id, customer_name, and join_date). Write a query to find the total order amount for each customer who joined in the year 2020, and return results sorted by the total order amount in descending order","WITH Yearly_Customers AS (SELECT customer_id FROM customers WHERE YEAR(join_date) = 2020) SELECT c.customer_name, SUM(o.order_total) AS total_order_amount FROM Yearly_Customers yc JOIN customers c ON yc.customer_id = c.customer_id JOIN orders o ON c.customer_id = o.customer_id GROUP BY c.customer_name ORDER BY total_order_amount DESC",SQL,unknown,Intermediate,"[""Join"", ""Aggregate function"", ""CTE"", ""Data Analysis""]","SELECT * FROM (SELECT customer_id, SUM(order_total) AS total FROM orders GROUP BY customer_id) AS total_orders WHERE customer_id IN (SELECT customer_id FROM customers WHERE YEAR(join_date) = 2020)",Not Available,This query first identifies customers who joined in 2020 and then calculates the total order amount for those customers using a Common Table Expression (CTE). The results are then grouped by customer name and ordered by the total order amount
315,"You have two tables: `employees` with columns `id`, `name`, and `department_id`, and `departments` with columns `id` and `budget`. Write a SQL query to find the name of employees who work in departments with a budget greater than the average budget of all departments",SELECT e.name FROM employees e INNER JOIN departments d ON e.department_id = d.id WHERE d.budget > (SELECT AVG(budget) FROM departments),SQL,unknown,Intermediate,"Data Analyst, Join, Aggregate function, Subquery",SELECT e.name FROM employees e INNER JOIN departments d ON e.department_id = d.id WHERE d.budget > (SELECT AVG(budget) FROM departments),Not Available,"This query joins the `employees` table with the `departments` table and filters the results to only include employees from departments that have a budget greater than the average budget, calculated using a subquery"
316,"Given a database with two tables, `employees` (employee_id, name, department_id) and `departments` (department_id, department_name), write a query to find the department with the highest average salary of its employees. Assume there is a `salaries` table (employee_id, salary)",SELECT d.department_name FROM departments d JOIN employees e ON d.department_id = e.department_id JOIN salaries s ON e.employee_id = s.employee_id GROUP BY d.department_name ORDER BY AVG(s.salary) DESC LIMIT 1,SQL,unknown,Intermediate,"Data Analyst, Data Engineer, Aggregate Function, Join",SELECT d.department_name FROM departments d JOIN employees e ON d.department_id = e.department_id JOIN salaries s ON e.employee_id = s.employee_id GROUP BY d.department_name ORDER BY AVG(s.salary) DESC LIMIT 1,Not Available,"This query joins the employees, departments, and salaries tables to calculate the average salary for each department and returns the department with the highest average salary"
317,"You are given two tables: `employees` and `departments`. The `employees` table has the following columns: `employee_id`, `name`, `dept_id`, and `salary`. The `departments` table has the columns: `dept_id`, `dept_name`, and `location`. Write a SQL query to find the average salary of employees in each department, and display the department name along with the average salary, sorted by average salary in descending order","SELECT d.dept_name, AVG(e.salary) AS average_salary FROM employees e JOIN departments d ON e.dept_id = d.dept_id GROUP BY d.dept_name ORDER BY average_salary DESC",SQL,unknown,Intermediate,"Data Analyst, SQL, Join, Aggregation","SELECT d.dept_name, AVG(e.salary) AS average_salary FROM employees e JOIN departments d ON e.dept_id = d.dept_id GROUP BY d.dept_name ORDER BY average_salary DESC",Not Available,"The query joins the `employees` and `departments` tables on the `dept_id`, calculates the average salary for each department using `AVG()`, groups the results by department name, and sorts the final output by the average salary in descending order"
318,"Given a sales database with tables 'Customers', 'Orders', and 'Order_Items', write a SQL query to find the total amount spent by each customer, along with their names, where the total amount is greater than $1,000. Also, sort the results by total amount spent in descending order. Use appropriate joins and aggregate functions","SELECT c.CustomerName, SUM(oi.Quantity * oi.UnitPrice) AS TotalAmountSpent
FROM Customers c
JOIN Orders o ON c.CustomerID = o.CustomerID
JOIN Order_Items oi ON o.OrderID = oi.OrderID
GROUP BY c.CustomerName
HAVING SUM(oi.Quantity * oi.UnitPrice) > 1000
ORDER BY TotalAmountSpent DESC",SQL,unknown,Intermediate,"[""Data Analyst"", ""Data Engineer"", ""Business Analyst"", ""Join"", ""Aggregate function""]",Not Available,"This query calculates the total spending for each customer using SUM to aggregate the results, with JOINs to connect the relevant tables. It filters customers based on spending over $1,000 and sorts the list in descending order by total spent","Candidates might forget to include the GROUP BY clause leading to aggregation errors or might not use HAVING correctly, mixing it up with WHERE"
319,"Given a table `sales` with columns `sales_id`, `product_id`, `quantity`, and `sale_date`, and a table `products` with columns `product_id`, `product_name`, and `category`, write an SQL query to find the total quantity sold for each product category in the month of January 2023. Sort the results by total quantity sold in descending order","SELECT p.category, SUM(s.quantity) AS total_quantity FROM sales s JOIN products p ON s.product_id = p.product_id WHERE s.sale_date >= '2023-01-01' AND s.sale_date < '2023-02-01' GROUP BY p.category ORDER BY total_quantity DESC",SQL,unknown,Intermediate,"Join, Aggregate function, Data Analysis","SELECT p.category, SUM(s.quantity) AS total_quantity FROM sales s JOIN products p ON s.product_id = p.product_id WHERE s.sale_date >= '2023-01-01' AND s.sale_date < '2023-02-01' GROUP BY p.category ORDER BY total_quantity DESC",Not Available,"This query joins the sales and products tables, filters for sales occurring in January 2023, groups the results by product category, and calculates the total quantity sold for each category, ordering the results by total quantity sold in descending order"
320,"You are given two tables: `sales` (with columns `id`, `product_id`, `sale_date`, `amount`) and `products` (with columns `id`, `product_name`, `category`). Write a SQL query to find the total sales amount for each product in the `Electronics` category for the year 2022, along with the product name. Sort the results by total sales amount in descending order","SELECT p.product_name, SUM(s.amount) AS total_sales FROM sales s JOIN products p ON s.product_id = p.id WHERE p.category = 'Electronics' AND YEAR(s.sale_date) = 2022 GROUP BY p.product_name ORDER BY total_sales DESC",SQL,unknown,Intermediate,"['Join', 'Aggregation', 'Data Analysis']","SELECT p.product_name, SUM(s.amount) AS total_sales FROM sales s JOIN products p ON s.product_id = p.id WHERE p.category = 'Electronics' AND YEAR(s.sale_date) = 2022 GROUP BY p.product_name ORDER BY total_sales DESC",Not Available,"This query joins the `sales` and `products` tables on the product IDs, filters for the 'Electronics' category and the year 2022, then groups the results by product name while calculating the total sales amount for each product"
321,"Given two tables, 'orders' which contains order details including order_id, customer_id, order_date, and amount, and 'customers' which includes customer_id, customer_name, and membership_level. Write a SQL query to find the top 3 customers (by total order amount) who are 'Gold' members, along with their total order amount","WITH CustomerTotals AS ( SELECT c.customer_id, c.customer_name, SUM(o.amount) as total_order_amount FROM customers c JOIN orders o ON c.customer_id = o.customer_id WHERE c.membership_level = 'Gold' GROUP BY c.customer_id, c.customer_name ) SELECT customer_id, customer_name, total_order_amount FROM CustomerTotals ORDER BY total_order_amount DESC LIMIT 3",SQL,unknown,Intermediate,"['Join', 'Aggregate function', 'CTE', 'Data Analyst']","WITH CustomerTotals AS ( SELECT c.customer_id, c.customer_name, SUM(o.amount) as total_order_amount FROM customers c JOIN orders o ON c.customer_id = o.customer_id WHERE c.membership_level = 'Gold' GROUP BY c.customer_id, c.customer_name ) SELECT customer_id, customer_name, total_order_amount FROM CustomerTotals ORDER BY total_order_amount DESC LIMIT 3",Not Available,"The query first calculates the total order amount for each Gold member by joining the orders and customers tables, filtering for Gold members, and grouping the results. Then, it selects the top 3 customers based on their total order amount"
322,"Given a sales table with columns: order_id, customer_id, order_date, and total_amount, along with a customers table containing: customer_id, customer_name, and join_date, write a SQL query to find the total sales amount made by customers who joined in the year 2020, grouped by month of the order","WITH monthly_sales AS ( SELECT DATE_TRUNC('month', o.order_date) AS order_month, SUM(o.total_amount) AS total_sales FROM sales o JOIN customers c ON o.customer_id = c.customer_id WHERE c.join_date >= '2020-01-01' AND c.join_date < '2021-01-01' GROUP BY DATE_TRUNC('month', o.order_date) ) SELECT order_month, total_sales FROM monthly_sales ORDER BY order_month",SQL,unknown,Intermediate,"['Join', 'Aggregate function', 'CTE']","SELECT DATE_TRUNC('month', o.order_date) AS order_month, SUM(o.total_amount) AS total_sales FROM sales o JOIN customers c ON o.customer_id = c.customer_id WHERE c.join_date >= '2020-01-01' AND c.join_date < '2021-01-01' GROUP BY DATE_TRUNC('month', o.order_date)",Not Available,The provided SQL query uses a Common Table Expression (CTE) to aggregate total sales amounts per month for those customers who joined in 2020. It utilizes the DATE_TRUNC function to group orders by month before calculating the sum of the sales
323,"You are given two tables: `employees` (with `employee_id`, `name`, `manager_id`) and `salaries` (with `employee_id`, `salary`, `effective_date`). Write a query to find the average salary of employees under each manager, assuming that each employee can have only one direct manager. Include managers who have no employees reporting to them","WITH ManagerSalaries AS (
    SELECT e.manager_id, s.salary
    FROM employees e
    LEFT JOIN salaries s ON e.employee_id = s.employee_id
)
SELECT m.manager_id, AVG(ms.salary) AS average_salary
FROM (SELECT DISTINCT manager_id FROM employees) m
LEFT JOIN ManagerSalaries ms ON m.manager_id = ms.manager_id
GROUP BY m.manager_id",SQL,unknown,Intermediate,"[""Data Analyst"", ""Business Intelligence"", ""Join"", ""Aggregate function""]","SELECT e.manager_id, AVG(s.salary) AS average_salary FROM employees e LEFT JOIN salaries s ON e.employee_id = s.employee_id GROUP BY e.manager_id",Not Available,This SQL code calculates the average salary for all employees grouped by their respective managers. It ensures that managers without employees are still shown in the results with a NULL value for average salary
324,"Consider a retail database that has two tables: `sales` and `products`. The `sales` table contains columns for `sale_id`, `product_id`, `quantity_sold`, and `sale_date`. The `products` table includes `product_id`, `product_name`, and `category`. Write a SQL query to find the total quantity sold for each product in the 'Electronics' category over the last year (i.e., from today's date minus one year). Order the results by total quantity sold in descending order","SELECT p.product_name, SUM(s.quantity_sold) AS total_quantity_sold FROM sales s JOIN products p ON s.product_id = p.product_id WHERE p.category = 'Electronics' AND s.sale_date > DATEADD(year, -1, GETDATE()) GROUP BY p.product_name ORDER BY total_quantity_sold DESC",SQL,unknown,Intermediate,"['Join', 'Aggregate function', 'Data Analysis']","SELECT p.product_name, SUM(s.quantity_sold) AS total_quantity_sold FROM sales s JOIN products p ON s.product_id = p.product_id WHERE p.category = 'Electronics' AND s.sale_date > DATEADD(year, -1, GETDATE()) GROUP BY p.product_name ORDER BY total_quantity_sold DESC",Not Available,"This SQL query joins the `sales` and `products` tables to calculate the total quantity of 'Electronics' sold in the last year, grouping by the product name and ordering the results by total quantity sold in descending order"
325,"Consider a scenario where you have two tables: `employees` and `departments`. The `employees` table contains the fields `id`, `name`, `salary`, and `department_id`. The `departments` table has `id` and `department_name`. Write a SQL query to find the average salary of employees in each department and include the department name. Sort the results by average salary in descending order","SELECT d.department_name, AVG(e.salary) AS avg_salary FROM employees e JOIN departments d ON e.department_id = d.id GROUP BY d.department_name ORDER BY avg_salary DESC",SQL,unknown,Intermediate,"[""Join"", ""Aggregate function"", ""Group By""]","SELECT department_name, AVG(salary) AS avg_salary FROM employees e JOIN departments d ON e.department_id = d.id GROUP BY department_name ORDER BY avg_salary DESC",Not Available,"This SQL query joins the `employees` table with the `departments` table on the `department_id` and aggregates the salary data by department name to calculate the average salary, sorting results in descending order"
326,"You are given two tables: `employees` (with columns `id`, `name`, `manager_id`, `salary`) and `departments` (with columns `id`, `department_name`, `manager_id`). Write a SQL query to find the total salary of all employees managed by each department, along with the department name. If a department has no employees, still include it in the results with a total salary of 0","SELECT d.department_name, COALESCE(SUM(e.salary), 0) AS total_salary FROM departments d LEFT JOIN employees e ON d.manager_id = e.manager_id GROUP BY d.department_name ORDER BY d.department_name",SQL,unknown,Intermediate,"Data Analyst, Join, Aggregate function","SELECT department_name, COALESCE(SUM(salary), 0) AS total_salary FROM departments LEFT JOIN employees ON departments.manager_id = employees.manager_id GROUP BY department_name",Not Available,"This query joins the `departments` table with the `employees` table on the `manager_id` field, and uses the `COALESCE` function to ensure that departments with no employees will have a total salary of 0. The results are grouped by department name and ordered alphabetically"
327,"You are working with a sales database containing two tables: `sales` (with columns `sale_id`, `amount`, `customer_id`, `sale_date`) and `customers` (with columns `customer_id`, `customer_name`, `signup_date`). Write a SQL query to find the total sales amount per customer for the year 2023 along with their signup year, and order the results by the total sales in descending order. If a customer has not made any sales in 2023, they should still be included with a total sales amount of zero","SELECT c.customer_id, c.customer_name, EXTRACT(YEAR FROM c.signup_date) AS signup_year, COALESCE(SUM(s.amount), 0) AS total_sales FROM customers c LEFT JOIN sales s ON c.customer_id = s.customer_id AND EXTRACT(YEAR FROM s.sale_date) = 2023 GROUP BY c.customer_id, c.customer_name, signup_year ORDER BY total_sales DESC",SQL,unknown,Intermediate,"['Join', 'Aggregate function', 'Left Join']","SELECT c.customer_id, c.customer_name, EXTRACT(YEAR FROM c.signup_date) AS signup_year, COALESCE(SUM(s.amount), 0) AS total_sales FROM customers c LEFT JOIN sales s ON c.customer_id = s.customer_id AND EXTRACT(YEAR FROM s.sale_date) = 2023 GROUP BY c.customer_id, c.customer_name, signup_year ORDER BY total_sales DESC",Not Available,"The query aggregates the total sales amount for each customer in 2023 using a LEFT JOIN, ensuring that customers without sales are still included by using the COALESCE function to return a total of zero where there is no sales data"
328,"You have two tables: `employees` (with columns `id`, `name`, `department_id`, `salary`) and `departments` (with columns `id`, `name`, `location`). Write a SQL query that lists each department, the total salary of all employees in that department, and the average salary of the employees in each department. Include departments with no employees, displaying the total and average salary as NULL for those cases","SELECT d.id AS department_id, d.name AS department_name, SUM(e.salary) AS total_salary, AVG(e.salary) AS average_salary FROM departments d LEFT JOIN employees e ON d.id = e.department_id GROUP BY d.id, d.name ORDER BY d.id",SQL,unknown,Intermediate,"['Join', 'Aggregation', 'Data Analyst']","SELECT d.id AS department_id, d.name AS department_name, SUM(e.salary) AS total_salary, AVG(e.salary) AS average_salary FROM departments d LEFT JOIN employees e ON d.id = e.department_id GROUP BY d.id, d.name ORDER BY d.id",Not Available,"This SQL query uses a LEFT JOIN to combine the `departments` and `employees` tables, allowing for the inclusion of departments without employees. It then calculates the total and average salaries using SUM and AVG functions, grouping by the department to aggregate the salary figures"
329,"You are given two tables: `employees` (with columns `employee_id`, `name`, `department`, `salary`) and `departments` (with columns `department_id`, `department_name`, `manager_id`). Write a SQL query to find the department name and the total salary of all employees in each department, but only for departments where the total salary exceeds 500,000, sorted by total salary in descending order","SELECT d.department_name, SUM(e.salary) AS total_salary FROM employees e JOIN departments d ON e.department = d.department_id GROUP BY d.department_name HAVING SUM(e.salary) > 500000 ORDER BY total_salary DESC",SQL,unknown,Intermediate,"Data Analyst, Join, Aggregate function","SELECT d.department_name, SUM(e.salary) AS total_salary FROM employees e JOIN departments d ON e.department = d.department_id GROUP BY d.department_name HAVING SUM(e.salary) > 500000 ORDER BY total_salary DESC",Not Available,"This query joins the `employees` and `departments` tables to aggregate the salary per department. It filters results with `HAVING` to show only those departments whose total salary exceeds 500,000, and sorts the final output by total salary in descending order"
330,"Consider a scenario where you have two tables: `Sales` (with columns `OrderID`, `ProductID`, `Quantity`, `OrderDate`) and `Products` (with columns `ProductID`, `ProductName`, `Price`). Write an SQL query to find the total revenue generated from each product in the year 2023, along with the product name. Order the results by total revenue in descending order","WITH ProductRevenue AS (SELECT p.ProductName, SUM(s.Quantity * p.Price) AS TotalRevenue FROM Sales s JOIN Products p ON s.ProductID = p.ProductID WHERE YEAR(s.OrderDate) = 2023 GROUP BY p.ProductName) SELECT ProductName, TotalRevenue FROM ProductRevenue ORDER BY TotalRevenue DESC",SQL,intermediate,"Data Analyst, Aggregation, Join","WITH ProductRevenue AS (SELECT p.ProductName, SUM(s.Quantity * p.Price) AS TotalRevenue FROM Sales s JOIN Products p ON s.ProductID = p.ProductID WHERE YEAR(s.OrderDate) = 2023 GROUP BY p.ProductName) SELECT ProductName, TotalRevenue FROM ProductRevenue ORDER BY TotalRevenue DESC",Not Available,This SQL uses a Common Table Expression (CTE) to calculate the total revenue for each product by joining the `Sales` and `Products` tables and summing the product of `Quantity` and `Price`. It filters the records for the year 2023 and orders the final results by revenue,"Candidates may forget to aggregate the data properly, leading to incorrect totals, or might neglect to filter the records for the correct year"
331,"Given a sales database with tables 'orders' (containing 'order_id', 'customer_id', 'order_date', and 'total_amount') and 'customers' (containing 'customer_id', 'customer_name', 'signup_date'), write a query to find the top 5 customers who have spent the most money in the last year and include their total amount spent and the number of orders in that period","WITH last_year_orders AS (SELECT customer_id, SUM(total_amount) as total_spent, COUNT(order_id) as order_count FROM orders WHERE order_date >= DATEADD(year, -1, GETDATE()) GROUP BY customer_id) SELECT c.customer_name, l.total_spent, l.order_count FROM last_year_orders l JOIN customers c ON l.customer_id = c.customer_id ORDER BY l.total_spent DESC LIMIT 5",SQL,unknown,Intermediate,"Data Analyst, SQL, Aggregate function, Join","SELECT c.customer_name, l.total_spent, l.order_count FROM (SELECT customer_id, SUM(total_amount) as total_spent FROM orders GROUP BY customer_id) AS l JOIN customers c ON l.customer_id = c.customer_id ORDER BY l.total_spent DESC LIMIT 5",Not Available,"This query uses a Common Table Expression (CTE) to first aggregate the total amounts spent by customers in the last year, followed by a join with the customers table to retrieve the names of those customers, ordered by total spending"
332,"Given a sales database with tables `orders` (order_id, customer_id, order_date, order_total) and `customers` (customer_id, first_name, last_name, region), write a query to find the total sales per region for the last quarter of 2023, sorted by total sales in descending order","WITH Quarters AS ( SELECT DATE_TRUNC('quarter', order_date) AS quarter_start FROM orders WHERE order_date >= '2023-10-01' AND order_date < '2024-01-01' GROUP BY DATE_TRUNC('quarter', order_date) ) SELECT c.region, SUM(o.order_total) AS total_sales FROM orders o JOIN customers c ON o.customer_id = c.customer_id WHERE o.order_date IN (SELECT quarter_start FROM Quarters) GROUP BY c.region ORDER BY total_sales DESC",SQL,unknown,Intermediate,"[""Join"",""Aggregate function"",""CTE"",""Data Analysis""]","SELECT c.region, SUM(o.order_total) AS total_sales FROM orders o JOIN customers c ON o.customer_id = c.customer_id WHERE DATE_TRUNC('quarter', o.order_date) = DATE '2023-10-01' GROUP BY c.region ORDER BY total_sales DESC",Not Available,This SQL code uses a Common Table Expression (CTE) to identify the start of the last quarter and then aggregates total sales per region by joining the `orders` and `customers` tables
333,"Given two tables, 'employees' and 'departments', write a query to find the average salary of employees in each department, and return the department name along with the average salary. Consider that some employees may not belong to a department","SELECT d.department_name, AVG(e.salary) AS average_salary FROM employees e LEFT JOIN departments d ON e.department_id = d.id GROUP BY d.department_name",SQL,unknown,Intermediate,"Data Analyst, SQL, Join, Aggregate Function","SELECT d.department_name, AVG(e.salary) AS average_salary FROM employees e LEFT JOIN departments d ON e.department_id = d.id GROUP BY d.department_name",Not Available,"This query uses a LEFT JOIN to combine the 'employees' and 'departments' tables based on department ID, ensuring that all departments are included even if no employees are associated with them. It then calculates the average salary for each department using the AVG() function and groups the results by department name"
334,"You are given two tables: 'employees' (with columns: employee_id, department_id, salary) and 'departments' (with columns: department_id, department_name). Write a SQL query that returns the average salary of each department, along with the department name, for departments where the average salary exceeds $50,000","SELECT d.department_name, AVG(e.salary) AS average_salary FROM employees e JOIN departments d ON e.department_id = d.department_id GROUP BY d.department_name HAVING AVG(e.salary) > 50000",SQL,unknown,Intermediate,"Data Analyst, Join, Aggregate Function","SELECT d.department_name, AVG(e.salary) AS average_salary FROM employees e JOIN departments d ON e.department_id = d.department_id GROUP BY d.department_name HAVING AVG(e.salary) > 50000",Not Available,"This query joins the employees and departments tables on the department_id, calculates the average salary for each department using AVG, groups the results by department name, and filters those with an average salary above $50,000"
335,"You work for a retail company, and you need to find the top 3 products by sales for each category for the last quarter. Write a SQL query that retrieves this information","WITH RankedProducts AS ( SELECT p.product_id, p.product_name, c.category_name, SUM(o.amount) AS total_sales, ROW_NUMBER() OVER (PARTITION BY c.category_name ORDER BY SUM(o.amount) DESC) AS rank FROM products p JOIN categories c ON p.category_id = c.category_id JOIN orders o ON p.product_id = o.product_id WHERE o.order_date >= DATEADD(QUARTER, -1, GETDATE()) GROUP BY p.product_id, p.product_name, c.category_name ) SELECT product_id, product_name, category_name, total_sales FROM RankedProducts WHERE rank <= 3",SQL,unknown,Advanced,"Data Analyst, CTE, Window Function","WITH RankedProducts AS (SELECT p.product_id, p.product_name, c.category_name, SUM(o.amount) AS total_sales, ROW_NUMBER() OVER (PARTITION BY c.category_name ORDER BY SUM(o.amount) DESC) AS rank FROM products p JOIN categories c ON p.category_id = c.category_id JOIN orders o ON p.product_id = o.product_id WHERE o.order_date >= DATEADD(QUARTER, -1, GETDATE()) GROUP BY p.product_id, p.product_name, c.category_name) SELECT product_id, product_name, category_name, total_sales FROM RankedProducts WHERE rank <= 3",Not Available,"This SQL query uses a Common Table Expression (CTE) to first calculate the total sales for each product grouped by category within the last quarter. It then assigns a rank to each product based on sales within that category using the ROW_NUMBER() window function. Finally, it selects only those products that rank in the top 3 per category"
336,"You are given two tables, `employees` and `departments`. The `employees` table has columns `employee_id`, `name`, `department_id`, and `salary`. The `departments` table includes `department_id` and `department_name`. Write a query to find the average salary of employees in each department along with the department name. The result should only include departments with an average salary above 50,000","SELECT d.department_name, AVG(e.salary) AS average_salary FROM employees e JOIN departments d ON e.department_id = d.department_id GROUP BY d.department_name HAVING AVG(e.salary) > 50000",SQL,unknown,Intermediate,"Data Analyst, Join, Aggregate Function","SELECT d.department_name, AVG(e.salary) AS average_salary FROM employees e JOIN departments d ON e.department_id = d.department_id GROUP BY d.department_name HAVING AVG(e.salary) > 50000",Not Available,"This SQL query joins the `employees` and `departments` tables to calculate the average salary for each department, ensuring that only those departments with an average salary exceeding 50,000 are returned"
337,"You are given two tables, `employees` and `departments`. The `employees` table contains employee ID, name, and department ID, while the `departments` table contains department ID and department name. Write a query to find the total number of employees in each department, along with the department names. Sort the results by the total number of employees in descending order","SELECT d.department_name, COUNT(e.employee_id) AS total_employees FROM departments d LEFT JOIN employees e ON d.department_id = e.department_id GROUP BY d.department_name ORDER BY total_employees DESC",SQL,unknown,Intermediate,"Data Analyst, Join, Aggregate function","SELECT d.department_name, COUNT(e.employee_id) AS total_employees FROM departments d LEFT JOIN employees e ON d.department_id = e.department_id GROUP BY d.department_name ORDER BY total_employees DESC",Not Available,"This query joins the `departments` and `employees` tables on the department ID, aggregates the number of employees per department, and sorts the results based on the employee count"
338,"You have two tables: 'employees' (employee_id, name, department_id) and 'departments' (department_id, department_name). Write a SQL query to find the department with the highest average employee salary. Use the 'salaries' table (employee_id, salary) to get the salaries of employees","WITH department_avg AS (SELECT d.department_name, AVG(s.salary) AS avg_salary FROM departments d JOIN employees e ON d.department_id = e.department_id JOIN salaries s ON e.employee_id = s.employee_id GROUP BY d.department_name) SELECT department_name FROM department_avg WHERE avg_salary = (SELECT MAX(avg_salary) FROM department_avg)",SQL,unknown,Advanced,"[""Join"",""Aggregate function"",""CTE"",""Data Analyst""]",Not Available,"This SQL code finds the department with the highest average salary by first creating a Common Table Expression (CTE) that calculates the average salary per department. Then, it selects the department name where the average salary matches the highest average calculated from the CTE","Candidates might forget to group properly or may not include joins correctly, leading to inaccurate aggregations"
339,"You are tasked with analyzing customer orders in a e-commerce database. The database has two tables: `customers` (customer_id, name, region) and `orders` (order_id, customer_id, order_date, total_amount). Write a query that returns the total amount of orders placed by customers from each region in the last year. Also, include the number of unique customers from each region who placed orders","SELECT c.region, SUM(o.total_amount) AS total_order_amount, COUNT(DISTINCT o.customer_id) AS unique_customers FROM customers c JOIN orders o ON c.customer_id = o.customer_id WHERE o.order_date >= DATEADD(YEAR, -1, GETDATE()) GROUP BY c.region ORDER BY c.region",SQL,unknown,Intermediate,"[""Aggregate function"", ""Join"", ""Data Analysis""]","SELECT c.region, SUM(o.total_amount) AS total_order_amount, COUNT(DISTINCT o.customer_id) AS unique_customers FROM customers c JOIN orders o ON c.customer_id = o.customer_id WHERE o.order_date >= DATEADD(YEAR, -1, GETDATE()) GROUP BY c.region ORDER BY c.region",Not Available,"The query joins the `customers` and `orders` tables on the `customer_id` field, filters the results to only include orders placed in the last year, then uses `SUM()` to calculate the total order amount and `COUNT(DISTINCT ...)` to count unique customers in each region. It groups the results by `region` to aggregate the data accordingly"
340,"You are provided with two tables: `sales` (with columns `sale_id`, `product_id`, `quantity`, and `sale_date`) and `products` (with columns `product_id`, `product_name`, and `category`). Write a SQL query to find the total quantity sold per product for the month of January 2023 and include the product names and categories in the result","SELECT p.product_name, p.category, SUM(s.quantity) AS total_quantity FROM sales s JOIN products p ON s.product_id = p.product_id WHERE s.sale_date >= '2023-01-01' AND s.sale_date < '2023-02-01' GROUP BY p.product_name, p.category ORDER BY total_quantity DESC",SQL,unknown,Intermediate,"[""Join"", ""Aggregate Function"", ""Data Analysis""]",Not Available,"This SQL query joins the `sales` and `products` tables on `product_id`, filters for sales in January 2023, aggregates the total quantity sold for each product, and orders the results by total quantity in descending order","Common mistakes include forgetting to join tables properly, neglecting the date filters, or not including all necessary columns in the GROUP BY clause"
341,"Given two tables, `orders` and `customers`, where `orders` has columns `order_id`, `customer_id`, `amount`, and `order_date`, and `customers` has columns `customer_id`, `customer_name`, and `customer_since`, write a SQL query to find the total order amount and average order amount for each customer over their lifetime with the system, but only include customers who have made more than 5 orders","WITH OrderSummary AS (SELECT c.customer_id, c.customer_name, COUNT(o.order_id) AS order_count, SUM(o.amount) AS total_amount, AVG(o.amount) AS average_amount FROM customers c LEFT JOIN orders o ON c.customer_id = o.customer_id GROUP BY c.customer_id, c.customer_name) SELECT customer_name, total_amount, average_amount FROM OrderSummary WHERE order_count > 5",SQL,intermediate,"['Join', 'Aggregate function', 'CTE']","WITH OrderSummary AS (SELECT c.customer_id, c.customer_name, COUNT(o.order_id) AS order_count, SUM(o.amount) AS total_amount, AVG(o.amount) AS average_amount FROM customers c LEFT JOIN orders o ON c.customer_id = o.customer_id GROUP BY c.customer_id, c.customer_name) SELECT customer_name, total_amount, average_amount FROM OrderSummary WHERE order_count > 5",Not Available,"This SQL query uses a Common Table Expression (CTE) to summarize order counts, total amounts, and average amounts for each customer, and filters the results to only include those customers who have made more than 5 orders","Candidates might confuse the JOIN type (LEFT JOIN vs INNER JOIN), or forget to group by the customer_name after aggregation"
342,"Given two tables, `employees` (id, name, department_id) and `departments` (id, department_name), write a SQL query to find the names of all employees who work in the department that has the highest number of employees","WITH dept_count AS (SELECT department_id, COUNT(*) AS employee_count FROM employees GROUP BY department_id ORDER BY employee_count DESC LIMIT 1) SELECT e.name FROM employees e JOIN dept_count d ON e.department_id = d.department_id",SQL,unknown,Intermediate,"Data Analyst, Join, Aggregate function, CTE","WITH dept_count AS (SELECT department_id, COUNT(*) AS employee_count FROM employees GROUP BY department_id ORDER BY employee_count DESC LIMIT 1) SELECT e.name FROM employees e JOIN dept_count d ON e.department_id = d.department_id",Not Available,This SQL code uses a Common Table Expression (CTE) to first calculate the department with the highest number of employees. Then it selects employee names from the employees table that match the department ID obtained from the CTE
343,"You are given two tables: 'orders' and 'customers'. The 'orders' table contains the columns 'order_id', 'customer_id', 'order_date', and 'order_total'. The 'customers' table has 'customer_id', 'customer_name', and 'registration_date'. Write a SQL query to find the top 5 customers who have spent the most on orders during the last year, including their total spend and number of orders placed","WITH last_year_orders AS (SELECT customer_id, SUM(order_total) AS total_spent, COUNT(order_id) AS order_count FROM orders WHERE order_date >= DATEADD(year, -1, GETDATE()) GROUP BY customer_id) SELECT c.customer_name, l.total_spent, l.order_count FROM last_year_orders l JOIN customers c ON l.customer_id = c.customer_id ORDER BY l.total_spent DESC OFFSET 0 ROWS FETCH NEXT 5 ROWS ONLY",SQL,intermediate,"Data Analyst, SQL, Aggregate function, CTE","WITH last_year_orders AS (SELECT customer_id, SUM(order_total) AS total_spent, COUNT(order_id) AS order_count FROM orders WHERE order_date >= DATEADD(year, -1, GETDATE()) GROUP BY customer_id) SELECT c.customer_name, l.total_spent, l.order_count FROM last_year_orders l JOIN customers c ON l.customer_id = c.customer_id ORDER BY l.total_spent DESC OFFSET 0 ROWS FETCH NEXT 5 ROWS ONLY",Not Available,"This query creates a Common Table Expression (CTE) that calculates the total spending and order count for each customer in the past year, then joins this result with the 'customers' table to retrieve their names and orders, eventually sorting and limiting to the top 5 spenders",Candidates might forget to filter the orders by the last year or miscalculate the date range. They may also overlook the importance of ordering and limiting the results correctly
344,"You are given two tables: `employees` (with columns `employee_id`, `name`, `department_id`, `salary`) and `departments` (with columns `department_id`, `department_name`). Write an SQL query to find the average salary of employees in each department that has more than 5 employees. Return the department name and their average salary, sorted by the average salary in descending order","SELECT d.department_name, AVG(e.salary) AS average_salary FROM employees e JOIN departments d ON e.department_id = d.department_id GROUP BY d.department_name HAVING COUNT(e.employee_id) > 5 ORDER BY average_salary DESC",SQL,unknown,Intermediate,"['Data Analyst', 'Data Engineer', 'JOIN', 'Aggregate Function']","SELECT d.department_name, AVG(e.salary) AS average_salary FROM employees e JOIN departments d ON e.department_id = d.department_id GROUP BY d.department_name HAVING COUNT(e.employee_id) > 5 ORDER BY average_salary DESC",Not Available,"This query joins the `employees` table with the `departments` table on `department_id`, aggregates employee salaries by department, and filters to include only those departments with more than 5 employees, returning the department name and the calculated average salary sorted in descending order"
345,"You are given two tables: `customers` (customer_id, customer_name, region) and `orders` (order_id, order_date, customer_id, amount). Write a SQL query to find the total amount spent by each customer and the number of orders, filtered only for customers in the 'North' region. Order the results by the total amount spent in descending order","SELECT c.customer_id, c.customer_name, COUNT(o.order_id) AS order_count, SUM(o.amount) AS total_spent FROM customers c LEFT JOIN orders o ON c.customer_id = o.customer_id WHERE c.region = 'North' GROUP BY c.customer_id, c.customer_name ORDER BY total_spent DESC",unknown,Intermediate,"[""Data Analyst"", ""Data Engineer"", ""Join"", ""Aggregate function""]",example_query,"This query uses a LEFT JOIN to combine data from customers and orders based on customer_id, then aggregates the results using COUNT and SUM functions based on the filtering condition for the 'North' region","Candidates might forget to include the GROUP BY clause for all non-aggregated selected columns or mistakenly use INNER JOIN instead of LEFT JOIN, thereby omitting customers with no orders","Candidates might forget to include the GROUP BY clause for all non-aggregated selected columns or mistakenly use INNER JOIN instead of LEFT JOIN, thereby omitting customers with no orders"
346,"Given a sales database with tables `sales`, `products`, and `employees`, write a SQL query to find the total sales amount for each employee, including their name and the number of sales transactions they made. Sort the results by total sales amount in descending order. Consider a sale as valid only if the product's price is greater than $10","SELECT e.name, COUNT(s.id) AS total_transactions, SUM(p.price) AS total_sales FROM employees e JOIN sales s ON e.id = s.employee_id JOIN products p ON s.product_id = p.id WHERE p.price > 10 GROUP BY e.name ORDER BY total_sales DESC",SQL,unknown,Intermediate,"[""Data Analyst"", ""Business Analyst"", ""Join"", ""Aggregation""]","SELECT e.name, COUNT(s.id) AS total_transactions, SUM(p.price) AS total_sales FROM employees e JOIN sales s ON e.id = s.employee_id JOIN products p ON s.product_id = p.id WHERE p.price > 10 GROUP BY e.name ORDER BY total_sales DESC",Not Available,"This query joins the employees, sales, and products tables to compute the total sales and number of transactions for each employee while filtering out invalid sales. The results are grouped by employee name and ordered by total sales"
347,"Consider a database with two tables: 'employees' (employee_id, name, department_id, salary) and 'departments' (department_id, department_name). Write a SQL query to find the average salary of employees in each department and include the department name, but only for those departments with an average salary greater than 50000. Sort the results by average salary in descending order","SELECT d.department_name, AVG(e.salary) AS avg_salary FROM employees e JOIN departments d ON e.department_id = d.department_id GROUP BY d.department_name HAVING AVG(e.salary) > 50000 ORDER BY avg_salary DESC",SQL,intermediate,"[""Data Analyst"", ""Business Analyst"", ""Data Engineer"", ""Join"", ""Aggregate function""]",Not Available,"This query joins the 'employees' and 'departments' tables, groups the results by department name, calculates the average salary for each department, filters out departments with an average salary of 50,000 or less, and sorts the results in descending order of average salary","Candidates may forget to include the HAVING clause or may misplace the ORDER BY clause, resulting in incorrect result ordering",What other metrics can you compute for departments?
348,"Given a table 'Sales' containing columns 'SalespersonID', 'SaleAmount', and 'SaleDate', and a table 'Salespersons' containing columns 'SalespersonID', 'Name', and 'Region', write a query to find the total sales amount made by each salesperson in the 'North' region for the year 2023, and rank them based on their sales performance","SELECT sp.Name, SUM(s.SaleAmount) AS TotalSales, RANK() OVER (ORDER BY SUM(s.SaleAmount) DESC) AS SalesRank 
FROM Sales s 
JOIN Salespersons sp ON s.SalespersonID = sp.SalespersonID 
WHERE sp.Region = 'North' AND YEAR(s.SaleDate) = 2023 
GROUP BY sp.Name",SQL,unknown,Intermediate,"[""Data Analyst"", ""Join"", ""Aggregation"", ""Window Function""]","SELECT sp.Name, SUM(s.SaleAmount) AS TotalSales, RANK() OVER (ORDER BY SUM(s.SaleAmount) DESC) AS SalesRank FROM Sales s JOIN Salespersons sp ON s.SalespersonID = sp.SalespersonID WHERE sp.Region = 'North' AND YEAR(s.SaleDate) = 2023 GROUP BY sp.Name",Not Available,"This query selects the total sales amount and ranks the salespersons based on their sales for the year 2023 in the North region. It uses a join to link the Sales and Salespersons tables, filters the results for the North region and the specified year, and then groups the results by salespersons, calculating the total sales and their ranks"
349,"You are given two tables: `employees` and `departments`. The `employees` table contains fields such as `employee_id`, `name`, `salary`, and `department_id`. The `departments` table includes `department_id` and `department_name`. Write a SQL query to find the average salary of employees in each department, but exclude departments that have an average salary of less than $50,000. Additionally, sort the results by the average salary in descending order","SELECT d.department_name, AVG(e.salary) as average_salary FROM employees e JOIN departments d ON e.department_id = d.department_id GROUP BY d.department_name HAVING AVG(e.salary) >= 50000 ORDER BY average_salary DESC",SQL,unknown,Intermediate,"['Join', 'Aggregate function', 'Group By']","SELECT d.department_name, AVG(e.salary) as average_salary FROM employees e JOIN departments d ON e.department_id = d.department_id GROUP BY d.department_name HAVING AVG(e.salary) >= 50000 ORDER BY average_salary DESC",Not Available,"This query joins the `employees` and `departments` tables based on `department_id`, calculates the average salary by department, and filters the results with `HAVING` to exclude departments with an average salary below $50,000. Results are sorted in descending order of average salary"
350,"Given a sales database with two tables: `sales` (columns: `transaction_id`, `customer_id`, `amount`, `transaction_date`) and `customers` (columns: `customer_id`, `customer_name`, `join_date`), write a SQL query to find the total sales amount for each customer who joined in the year 2022 and rank them by their total sales amount in descending order. Show the customer name, total sales amount, and their rank","WITH RankedSales AS (SELECT c.customer_name, SUM(s.amount) AS total_sales, RANK() OVER (ORDER BY SUM(s.amount) DESC) AS sales_rank FROM customers c JOIN sales s ON c.customer_id = s.customer_id WHERE YEAR(c.join_date) = 2022 GROUP BY c.customer_name) SELECT customer_name, total_sales, sales_rank FROM RankedSales",SQL,unknown,Advanced,"Data Analyst, Window Function, Aggregate Function, Join","WITH RankedSales AS (SELECT c.customer_name, SUM(s.amount) AS total_sales, RANK() OVER (ORDER BY SUM(s.amount) DESC) AS sales_rank FROM customers c JOIN sales s ON c.customer_id = s.customer_id WHERE YEAR(c.join_date) = 2022 GROUP BY c.customer_name) SELECT customer_name, total_sales, sales_rank FROM RankedSales",Not Available,"This query creates a Common Table Expression (CTE) that calculates the total sales for each customer who joined in 2022, ranks them based on their total sales, and then selects the results"
351,"You are given two tables: `sales` and `products`. The `sales` table contains columns `sale_id`, `product_id`, `quantity`, and `sale_date`, while the `products` table contains `product_id`, `product_name`, and `price`. Write a SQL query to find the total revenue generated by each product for the month of January 2023. Present the results in descending order of revenue, including product names and the total revenue","SELECT p.product_name, SUM(s.quantity * p.price) AS total_revenue FROM sales s JOIN products p ON s.product_id = p.product_id WHERE s.sale_date >= '2023-01-01' AND s.sale_date < '2023-02-01' GROUP BY p.product_name ORDER BY total_revenue DESC",SQL,intermediate,"Data Analyst, SQL Join, Aggregate Function","SELECT p.product_name, SUM(s.quantity * p.price) AS total_revenue FROM sales s JOIN products p ON s.product_id = p.product_id WHERE s.sale_date >= '2023-01-01' AND s.sale_date < '2023-02-01' GROUP BY p.product_name ORDER BY total_revenue DESC",Not Available,"This query joins the `sales` and `products` tables on `product_id`, filters the records for January 2023, groups the results by `product_name`, and calculates the total revenue (quantity sold multiplied by the product price) for each product","Common mistakes include forgetting to join the tables, using incorrect date filters, or misunderstanding how to aggregate and group results"
352,"Given a sales database with tables: `orders (order_id, customer_id, order_date, total_amount)`, `customers (customer_id, customer_name)`, and `products (order_id, product_id, quantity, price)`, write a SQL query to find the total revenue generated by each customer, who has made more than 5 purchases, along with their name, and sort the result in descending order of revenue","WITH CustomerPurchases AS ( SELECT c.customer_id, c.customer_name, COUNT(o.order_id) AS purchase_count, SUM(o.total_amount) AS total_revenue FROM customers c JOIN orders o ON c.customer_id = o.customer_id GROUP BY c.customer_id, c.customer_name HAVING COUNT(o.order_id) > 5 ) SELECT customer_name, total_revenue FROM CustomerPurchases ORDER BY total_revenue DESC",SQL,unknown,Intermediate,"[""Data Analyst"", ""Business Intelligence"", ""Join"", ""Aggregate function"", ""CTE""]",Not Available,"This SQL query uses a Common Table Expression (CTE) to first aggregate the total revenue and number of orders for each customer who has made more than 5 purchases, and then retrieves the relevant data sorted by total revenue","Not using the HAVING clause correctly to filter by purchase count, or forgetting to group by both the customer ID and name"
353,"You are managing a retail database consisting of two tables: `Sales` and `Products`. The `Sales` table includes columns for `SaleID`, `ProductID`, `SaleAmount`, and `SaleDate`. The `Products` table includes `ProductID`, `ProductName`, and `Category`. Write a SQL query to find the total sales amount for each product category over the last quarter of the year, and display the category name along with the total sales. The result should be sorted by total sales in descending order","SELECT p.Category, SUM(s.SaleAmount) AS TotalSales FROM Sales s JOIN Products p ON s.ProductID = p.ProductID WHERE s.SaleDate >= DATEADD(QUARTER, -1, GETDATE()) GROUP BY p.Category ORDER BY TotalSales DESC",SQL,unknown,Intermediate,"[""Join"",""Aggregation"",""Data Analysis""]",Not Available,"This query joins the Sales and Products tables on the ProductID, filters the data for sales that occurred in the last quarter using a date function, aggregates the total sales by category, and orders the results by total sales in descending order","Common mistakes include not filtering the dates correctly, forgetting to aggregate by category, or using the wrong JOIN type"
354,"Given a sales database with tables `orders` (order_id, customer_id, order_date, total_amount) and `customers` (customer_id, customer_name, signup_date), write a query to find the total sales made by customers who signed up in the year 2022. Sort the result by total sales in descending order","SELECT c.customer_name, SUM(o.total_amount) AS total_sales FROM customers c JOIN orders o ON c.customer_id = o.customer_id WHERE c.signup_date >= '2022-01-01' AND c.signup_date < '2023-01-01' GROUP BY c.customer_name ORDER BY total_sales DESC",SQL,unknown,Intermediate,"Data Analyst, SQL Join, Aggregate Function","SELECT c.customer_name, SUM(o.total_amount) AS total_sales FROM customers c JOIN orders o ON c.customer_id = o.customer_id WHERE c.signup_date >= '2022-01-01' AND c.signup_date < '2023-01-01' GROUP BY c.customer_name ORDER BY total_sales DESC",Not Available,"This query joins the `customers` and `orders` tables to aggregate total sales per customer who signed up in 2022. The `SUM` function is used to calculate total sales, grouped by customer names, and results are sorted by total sales in descending order"
355,"Given a sales database where we have a 'sales' table with columns 'sales_id', 'product_id', 'sale_amount', and 'sale_date', and a 'products' table with 'product_id' and 'product_name', write a SQL query to find the total sales for each product for the year 2022, and rank the products by their total sales amount. Display the product name, total sales amount, and their rank","WITH TotalSales AS ( SELECT p.product_name, SUM(s.sale_amount) AS total_sales FROM sales s JOIN products p ON s.product_id = p.product_id WHERE YEAR(s.sale_date) = 2022 GROUP BY p.product_name ) SELECT product_name, total_sales, RANK() OVER (ORDER BY total_sales DESC) AS sales_rank FROM TotalSales",SQL,unknown,Advanced,"[""Data Analyst"", ""Business Intelligence"", ""Aggregate function"", ""Join"", ""Window function""]","SELECT p.product_name, SUM(s.sale_amount) AS total_sales FROM sales s JOIN products p ON s.product_id = p.product_id WHERE YEAR(s.sale_date) = 2022 GROUP BY p.product_name",Not Available,This SQL code first creates a Common Table Expression (CTE) called 'TotalSales' that calculates the total sales per product for the year 2022. It then ranks these totals in descending order using the RANK() window function
356,"You are given two tables: `employees` and `departments`. The `employees` table contains `employee_id`, `name`, `salary`, and `department_id`. The `departments` table contains `department_id` and `department_name`. Write a SQL query that retrieves the top 3 highest-paid employees in each department along with their department name","WITH RankedEmployees AS (SELECT e.name, e.salary, d.department_name, RANK() OVER (PARTITION BY e.department_id ORDER BY e.salary DESC) as salary_rank FROM employees e JOIN departments d ON e.department_id = d.department_id) SELECT name, salary, department_name FROM RankedEmployees WHERE salary_rank <= 3 ORDER BY department_name, salary DESC",SQL,unknown,Advanced,"[""Data Analyst"", ""Data Engineer"", ""Business Analyst"", ""Business Intelligence"", ""Window Functions"", ""Join""]","WITH RankedEmployees AS (SELECT e.name, e.salary, d.department_name, RANK() OVER (PARTITION BY e.department_id ORDER BY e.salary DESC) as salary_rank FROM employees e JOIN departments d ON e.department_id = d.department_id) SELECT name, salary, department_name FROM RankedEmployees WHERE salary_rank <= 3 ORDER BY department_name, salary DESC",Not Available,"This SQL code first creates a Common Table Expression (CTE) called `RankedEmployees` that ranks employees based on their salary within each department using the RANK() window function. Then, it selects employees who have a rank of 3 or less, effectively retrieving the top 3 highest-paid employees from each department"
357,"You are given two tables: `employees` with columns `employee_id`, `name`, `department_id` and `salaries` with columns `employee_id`, `salary`, `date`. Write an SQL query to find the average salary for each department, including departments that do not have any employees. The result should contain the department ID, department name, and the average salary. If a department has no employees, the average salary should show as NULL","SELECT d.department_id, d.department_name, AVG(s.salary) AS average_salary FROM departments d LEFT JOIN employees e ON d.department_id = e.department_id LEFT JOIN salaries s ON e.employee_id = s.employee_id GROUP BY d.department_id, d.department_name",SQL,unknown,Advanced,"Data Analyst, SQL, Aggregate Function, Join","SELECT d.department_id, d.department_name, AVG(s.salary) AS average_salary FROM departments d LEFT JOIN employees e ON d.department_id = e.department_id LEFT JOIN salaries s ON e.employee_id = s.employee_id GROUP BY d.department_id, d.department_name",Not Available,"This query uses LEFT JOINs to include all departments in the result, even if they have no employees. It then calculates the average salary per department using the AVG aggregate function"
358,"You are given two tables: 'employees' with columns 'employee_id', 'name', and 'department_id', and 'departments' with columns 'department_id' and 'department_name'. Write a query to find the department name with the highest average salary of its employees. Assume there is a third table 'salaries' with columns 'employee_id' and 'salary' that contains the salary information of employees. Return the department name and the average salary","WITH dept_avg AS ( SELECT d.department_name, AVG(s.salary) AS average_salary FROM departments d JOIN employees e ON d.department_id = e.department_id JOIN salaries s ON e.employee_id = s.employee_id GROUP BY d.department_name ) SELECT department_name, average_salary FROM dept_avg ORDER BY average_salary DESC LIMIT 1",SQL,unknown,Advanced,"Data Analyst, Data Engineer, SQL, Aggregation, Join","SELECT department_name, AVG(s.salary) FROM departments d JOIN employees e ON d.department_id = e.department_id JOIN salaries s ON e.employee_id = s.employee_id GROUP BY d.department_name ORDER BY AVG(s.salary) DESC LIMIT 1",Not Available,This query uses a Common Table Expression (CTE) to calculate the average salary for each department by joining three tables and then retrieves the department with the highest average salary
359,"Consider a retail database with two tables: `Orders` (OrderID, CustomerID, OrderDate, TotalAmount) and `Customers` (CustomerID, CustomerName, JoinDate). Write a query to find the total spending for each customer along with their name, but only for those who have spent more than $500 in total. Moreover, sort the results by total spending in descending order","WITH CustomerSpending AS ( SELECT c.CustomerName, SUM(o.TotalAmount) AS TotalSpending FROM Customers c JOIN Orders o ON c.CustomerID = o.CustomerID GROUP BY c.CustomerName ) SELECT CustomerName, TotalSpending FROM CustomerSpending WHERE TotalSpending > 500 ORDER BY TotalSpending DESC",SQL,intermediate,"Data Analyst, Aggregate function, Join","SELECT CustomerName, SUM(TotalAmount) AS TotalSpending FROM Customers c JOIN Orders o ON c.CustomerID = o.CustomerID GROUP BY CustomerName HAVING SUM(TotalAmount) > 500 ORDER BY TotalSpending DESC",Not Available,This query uses Common Table Expressions (CTEs) to first calculate total spending per customer and then filters customers based on their total spending,"Candidates might forget to use HAVING instead of WHERE for aggregation, or may confuse the order of joining the tables"
360,"Consider a retail database containing two tables: `sales` and `products`. The `sales` table has columns `sale_id`, `product_id`, `quantity_sold`, and `sale_date`. The `products` table has columns `product_id`, `product_name`, and `price`. Write a SQL query to find the total sales amount for each product for the last month (assuming the current date is '2023-10-01'). Total sales amount is calculated as `quantity_sold * price`. Order the results by total sales amount in descending order","WITH last_month_sales AS (SELECT p.product_id, p.product_name, SUM(s.quantity_sold * p.price) AS total_sales_amount FROM sales s JOIN products p ON s.product_id = p.product_id WHERE s.sale_date >= DATEADD(month, -1, '2023-10-01') AND s.sale_date < '2023-10-01' GROUP BY p.product_id, p.product_name) SELECT * FROM last_month_sales ORDER BY total_sales_amount DESC",SQL,unknown,Intermediate,"[""SQL"", ""Join"", ""Aggregation"", ""CTE""]",Not Available,"This SQL code uses a Common Table Expression (CTE) to calculate the total sales amount for each product by joining the `sales` and `products` tables. It filters the sale records to only include those from the last month, calculates total sales, and sorts the results in descending order","Candidates might forget to handle the date filtering correctly, leading to incorrect results, or they may neglect to multiply `quantity_sold` by the `price`"
361,"Consider a database with two tables: `sales` (columns: `sale_id`, `product_id`, `quantity`, `sale_date`) and `products` (columns: `product_id`, `product_name`, `category`). Write a SQL query to find the total quantity sold for each product in the `Electronics` category during the year 2022. Sort the results by total quantity sold in descending order","SELECT p.product_name, SUM(s.quantity) AS total_quantity_sold FROM sales s JOIN products p ON s.product_id = p.product_id WHERE p.category = 'Electronics' AND YEAR(s.sale_date) = 2022 GROUP BY p.product_name ORDER BY total_quantity_sold DESC",SQL,unknown,Intermediate,"[""Join"", ""Aggregate function"", ""Data Analysis""]",Not Available,"This query joins the `sales` table with the `products` table on `product_id` to combine their data and then filters for products in the `Electronics` category sold in 2022. It groups the results by product name and sums the quantities sold, ordering the results by total quantity",Candidates often forget to use the `GROUP BY` clause properly or may misuse the `WHERE` clause instead of `HAVING` when dealing with aggregate functions
362,"You are given two tables: `employees` (with columns `employee_id`, `name`, `department_id`, and `salary`) and `departments` (with columns `department_id`, `department_name`). Write a SQL query to find the top 3 highest-paid employees in each department. If there are fewer than 3 employees in a department, include all of them","WITH RankedEmployees AS ( SELECT e.employee_id, e.name, e.salary, d.department_name, ROW_NUMBER() OVER (PARTITION BY e.department_id ORDER BY e.salary DESC) AS rank FROM employees e JOIN departments d ON e.department_id = d.department_id ) SELECT employee_id, name, salary, department_name FROM RankedEmployees WHERE rank <= 3 ORDER BY department_name, rank",SQL,unknown,Advanced,"Data Analyst, Business Analyst, SQL, Window functions","WITH RankedEmployees AS ( SELECT e.employee_id, e.name, e.salary, d.department_name, ROW_NUMBER() OVER (PARTITION BY e.department_id ORDER BY e.salary DESC) AS rank FROM employees e JOIN departments d ON e.department_id = d.department_id ) SELECT employee_id, name, salary, department_name FROM RankedEmployees WHERE rank <= 3 ORDER BY department_name, rank",Not Available,"This query uses a Common Table Expression (CTE) to first rank employees within each department based on their salary. The `ROW_NUMBER()` function generates a unique rank for each employee within their department, ordered by salary in descending order. The main query then filters this ranked list to select only the top 3 employees from each department"
363,"You are given two tables: `orders` (order_id, customer_id, order_date, total_amount) and `customers` (customer_id, customer_name, signup_date). Write a SQL query to find the top 5 customers who spent the most in total, the date they signed up, and how many orders they placed. Show the results in descending order of total spending","WITH customer_totals AS ( SELECT c.customer_id, c.customer_name, c.signup_date, COUNT(o.order_id) AS order_count, SUM(o.total_amount) AS total_spent FROM customers c LEFT JOIN orders o ON c.customer_id = o.customer_id GROUP BY c.customer_id, c.customer_name, c.signup_date ) SELECT customer_name, signup_date, order_count, total_spent FROM customer_totals ORDER BY total_spent DESC LIMIT 5",SQL,unknown,Intermediate,"[""SQL"", ""Join"", ""Aggregate function"", ""CTE""]",Not Available,This SQL query uses a Common Table Expression (CTE) to calculate the total amount spent and the number of orders for each customer. It then selects the top 5 customers based on total spending,"Candidates might incorrectly join the tables or forget to group by all necessary fields, leading to incorrect results"
364,"You are given two tables: `sales` (with columns `id`, `product_id`, `quantity`, and `sale_date`) and `products` (with columns `id`, `name`, and `category`). Write a SQL query that finds the total quantity sold for each product category over the last 30 days, including categories with zero sales","WITH CategorySales AS (SELECT p.category, COALESCE(SUM(s.quantity), 0) AS total_quantity FROM products p LEFT JOIN sales s ON p.id = s.product_id AND s.sale_date >= CURRENT_DATE - INTERVAL '30 days' GROUP BY p.category) SELECT category, total_quantity FROM CategorySales ORDER BY category",SQL,intermediate,"[""SQL"", ""Join"", ""Aggregation"", ""CTE""]",Not Available,"The provided SQL code uses a Common Table Expression (CTE) to join the `products` and `sales` tables. It aggregates the total quantity sold for each category over the last 30 days, ensuring to include categories with zero sales by using a LEFT JOIN",Candidates might forget to filter the sales date in the JOIN condition or use INNER JOIN which would exclude categories with no sales,How would you modify the query to only display categories with sales above a certain threshold?
365,"You are given a database that contains two tables: `employees` (with columns: `employee_id`, `name`, `department_id`, `salary`) and `departments` (with columns: `department_id`, `department_name`). Write a SQL query to find the average salary of employees in each department, and list only those departments where the average salary is greater than $70,000. Additionally, include the department name in the result","SELECT d.department_name, AVG(e.salary) AS average_salary FROM employees e JOIN departments d ON e.department_id = d.department_id GROUP BY d.department_name HAVING AVG(e.salary) > 70000",SQL,unknown,Intermediate,"[""Join"", ""Aggregate function"", ""SQL"", ""Data Analysis""]","SELECT d.department_name, AVG(e.salary) AS average_salary FROM employees e JOIN departments d ON e.department_id = d.department_id GROUP BY d.department_name HAVING AVG(e.salary) > 70000",Not Available,"This query joins the `employees` table with the `departments` table to aggregate (average) the salaries of employees by department and filters the results to only include departments with an average salary above $70,000"
366,"You have two tables: `employees` and `departments`. The `employees` table contains columns `id`, `name`, `department_id`, and `salary`. The `departments` table contains `id` and `department_name`. Write a SQL query that finds the average salary for each department, including departments that have no employees. Sort the results by `department_name`","SELECT d.department_name, COALESCE(AVG(e.salary), 0) AS average_salary FROM departments d LEFT JOIN employees e ON d.id = e.department_id GROUP BY d.department_name ORDER BY d.department_name",SQL,unknown,Intermediate,"Join, Aggregate Function, SQL","SELECT d.department_name, COALESCE(AVG(e.salary), 0) AS average_salary FROM departments d LEFT JOIN employees e ON d.id = e.department_id GROUP BY d.department_name ORDER BY d.department_name",Not Available,"This query uses a LEFT JOIN to ensure that all departments are included in the results, even if they do not have any employees. The COALESCE function is used to replace NULL values with 0 for departments without employees, and the results are grouped by department name"
367,"You are given two tables: `employees` (containing employee_id, name, department_id) and `departments` (containing department_id, department_name). Write a SQL query to find the count of employees in each department, including departments that have no employees","SELECT d.department_name, COUNT(e.employee_id) AS employee_count FROM departments d LEFT JOIN employees e ON d.department_id = e.department_id GROUP BY d.department_name",SQL,unknown,Intermediate,"['Join', 'Aggregate Function', 'Data Analyst']","SELECT d.department_name, COUNT(e.employee_id) AS employee_count FROM departments d LEFT JOIN employees e ON d.department_id = e.department_id GROUP BY d.department_name",Not Available,"This SQL query uses a LEFT JOIN to combine the `departments` table with the `employees` table, ensuring all departments are included in the result. It counts the number of employees grouped by department, returning 0 for departments that have no employees"
368,"Given the following tables: `sales` (columns: `id`, `product_id`, `quantity`, `sale_date`) and `products` (columns: `id`, `name`, `category`), write a SQL query to find the total quantity sold for each product name in the month of January 2023, along with the product category. Sort the output by total quantity sold in descending order","WITH JanuarySales AS ( SELECT p.name, p.category, SUM(s.quantity) as total_quantity FROM sales s JOIN products p ON s.product_id = p.id WHERE s.sale_date >= '2023-01-01' AND s.sale_date < '2023-02-01' GROUP BY p.name, p.category ) SELECT name, category, total_quantity FROM JanuarySales ORDER BY total_quantity DESC",SQL,unknown,Intermediate,"Data Analyst, Aggregate functions, Join, CTE","SELECT product_id, SUM(quantity) FROM sales WHERE sale_date BETWEEN '2023-01-01' AND '2023-01-31' GROUP BY product_id",Not Available,"This query uses a Common Table Expression (CTE) to first filter and aggregate the sales data for January 2023, joining it with the products table to include product names and categories, and finally orders the results by total quantity sold"
369,"Given the sales and customers data, write a SQL query that retrieves the top 3 customers by total sales amount in each region. The dataset consists of two tables: 'customers' with columns 'customer_id', 'customer_name', and 'region', and 'sales' with columns 'sale_id', 'customer_id', and 'amount'. Ensure that the result includes the customer name, region, and total sales","WITH RankedSales AS (SELECT c.customer_name, c.region, SUM(s.amount) AS total_sales, ROW_NUMBER() OVER (PARTITION BY c.region ORDER BY SUM(s.amount) DESC) AS sales_rank FROM customers c JOIN sales s ON c.customer_id = s.customer_id GROUP BY c.customer_name, c.region) SELECT customer_name, region, total_sales FROM RankedSales WHERE sales_rank <= 3",SQL,unknown,Advanced,"[""Data Analyst"", ""Data Engineer"", ""Business Intelligence"", ""Join"", ""Aggregate Function"", ""Window Function""]",Not Available,"The provided SQL code uses a common table expression (CTE) to first rank customers by their total sales amounts within each region, leveraging the ROW_NUMBER() window function. It then filters for the top 3 customers in each region","Candidates might struggle with correctly using the window function or misunderstanding how to partition the rank by region, potentially leading to grouping errors"
370,"Given two tables, `employees` (with fields `id`, `name`, `department_id`), and `departments` (with fields `id`, `department_name`), write a SQL query that returns the department name along with the total number of employees in each department. Additionally, filter the results to only include departments that have more than 5 employees","SELECT d.department_name, COUNT(e.id) AS employee_count FROM departments d LEFT JOIN employees e ON d.id = e.department_id GROUP BY d.department_name HAVING COUNT(e.id) > 5",SQL,unknown,Intermediate,"['Join', 'Aggregate function', 'Group By']","SELECT d.department_name, COUNT(e.id) AS employee_count FROM departments d LEFT JOIN employees e ON d.id = e.department_id GROUP BY d.department_name HAVING COUNT(e.id) > 5",Not Available,"This query joins the `employees` and `departments` tables on `department_id`, counts the number of employees per department, and filters to only include those departments that have more than 5 employees"
371,"You are given two tables: 'customers' (customer_id, customer_name) and 'orders' (order_id, customer_id, order_date, order_amount). Write a SQL query to find the total amount spent by each customer in the last year. The query should only return customers who have placed at least one order in the last year and the total amount should be ordered from highest to lowest","SELECT c.customer_id, c.customer_name, SUM(o.order_amount) AS total_spent FROM customers c JOIN orders o ON c.customer_id = o.customer_id WHERE o.order_date >= DATEADD(YEAR, -1, GETDATE()) GROUP BY c.customer_id, c.customer_name HAVING SUM(o.order_amount) > 0 ORDER BY total_spent DESC",SQL,unknown,Intermediate,"[""Join"", ""Aggregate function"", ""Data Analysis""]","-- Example query is for SQL Server: SELECT c.customer_id, c.customer_name, SUM(o.order_amount) AS total_spent FROM customers c JOIN orders o ON c.customer_id = o.customer_id WHERE o.order_date >= DATEADD(YEAR, -1, GETDATE()) GROUP BY c.customer_id, c.customer_name HAVING SUM(o.order_amount) > 0 ORDER BY total_spent DESC",Not Available,"The query joins the 'customers' and 'orders' tables, filters orders from the last year, groups them by customer, calculates the total amount spent, and orders the result by total spent in descending order"
372,"You are given two tables: 'employees' and 'departments'. The 'employees' table contains employee information, including 'id', 'name', 'salary', and 'department_id'. The 'departments' table has 'id' and 'department_name'. Write a SQL query to find the average salary of employees in each department and include the department name. The result should show department name and average salary, sorted by average salary in descending order","SELECT d.department_name, AVG(e.salary) AS average_salary FROM employees e JOIN departments d ON e.department_id = d.id GROUP BY d.department_name ORDER BY average_salary DESC",SQL,unknown,Intermediate,"['Join', 'Aggregate function', 'Data Analysis', 'SQL']","SELECT d.department_name, AVG(e.salary) AS average_salary FROM employees e JOIN departments d ON e.department_id = d.id GROUP BY d.department_name ORDER BY average_salary DESC",Not Available,This SQL query joins the 'employees' table with the 'departments' table using the department_id and id fields. It then calculates the average salary for each department and sorts the result by average salary in descending order
373,"You are given two tables: `orders` with columns `order_id`, `customer_id`, `amount`, and `order_date`, and `customers` with columns `customer_id`, `customer_name`, and `join_date`. Write a SQL query that retrieves each customer's name, their total order amount, and how many orders they have made, but only for those customers who joined before January 1, 2021. The results should be sorted by the total order amount in descending order","SELECT c.customer_name, SUM(o.amount) AS total_order_amount, COUNT(o.order_id) AS total_orders FROM customers c JOIN orders o ON c.customer_id = o.customer_id WHERE c.join_date < '2021-01-01' GROUP BY c.customer_name ORDER BY total_order_amount DESC",SQL,unknown,Intermediate,"Data Analyst, Join, Aggregate Function","SELECT c.customer_name, SUM(o.amount) AS total_order_amount, COUNT(o.order_id) AS total_orders FROM customers c JOIN orders o ON c.customer_id = o.customer_id WHERE c.join_date < '2021-01-01' GROUP BY c.customer_name ORDER BY total_order_amount DESC",Not Available,"This query joins the `customers` and `orders` tables on the `customer_id`, filters customers based on their `join_date`, and aggregates the total order amount and the number of orders made by each customer before a specified date"
374,"You are given two tables: `employees` and `departments`. The `employees` table has columns: `id`, `name`, `department_id`, `salary`, and `hire_date`. The `departments` table has columns: `id`, `department_name`. Write a SQL query to find the average salary of employees in each department, along with the department name. Order the results by average salary in descending order","SELECT d.department_name, AVG(e.salary) AS average_salary FROM employees e JOIN departments d ON e.department_id = d.id GROUP BY d.department_name ORDER BY average_salary DESC",SQL,unknown,Intermediate,"Data Analyst, Data Engineer, Aggregate function, Join","SELECT d.department_name, AVG(e.salary) AS average_salary FROM employees e JOIN departments d ON e.department_id = d.id GROUP BY d.department_name ORDER BY average_salary DESC",Not Available,"This query joins the `employees` table with the `departments` table based on the `department_id`, calculates the average salary per department, and sorts the results in descending order by average salary"
375,"Given a sales database with tables: 'customers' (customer_id, name), 'orders' (order_id, customer_id, order_date, total_amount), and 'products' (product_id, order_id, product_name, quantity), write a SQL query to find the total amount spent by each customer along with their name, ordering the results by total amount spent in descending order. If a customer hasn't made any purchases, they should still appear in the result with total spent as 0","SELECT c.customer_id, c.name, COALESCE(SUM(o.total_amount), 0) AS total_spent FROM customers c LEFT JOIN orders o ON c.customer_id = o.customer_id GROUP BY c.customer_id, c.name ORDER BY total_spent DESC",SQL,unknown,Intermediate,"[""Join"", ""Aggregation"", ""COALESCE"", ""LEFT JOIN"", ""Data Analyst""]",Not Available,"This query uses a LEFT JOIN to include all customers, even those without orders. The COALESCE function is used to replace NULL sums (for customers with no orders) with 0. The results are grouped by customer, and the total amount spent is calculated for each","Candidates might forget to use the LEFT JOIN, resulting in excluding customers without orders, or may not use COALESCE to handle NULL values"
376,"You are working for a retail company and have two tables: `sales` (with columns: `transaction_id`, `customer_id`, `amount`, `sale_date`) and `customers` (with columns: `customer_id`, `name`, `signup_date`). Write a SQL query to find the total sales amount per customer for customers who signed up in the last 6 months, and order the results by total sales amount in descending order","WITH recent_customers AS (SELECT customer_id FROM customers WHERE signup_date >= DATEADD(MONTH, -6, GETDATE())) SELECT c.name, SUM(s.amount) AS total_sales FROM sales s JOIN recent_customers rc ON s.customer_id = rc.customer_id JOIN customers c ON rc.customer_id = c.customer_id GROUP BY c.name ORDER BY total_sales DESC",unknown,Advanced,"Data Analyst, Aggregate Function, Join, CTE",example_query,"The query first creates a Common Table Expression (CTE) to filter customers who signed up in the last 6 months. It then joins this CTE with the `sales` table to sum the total sales per customer, grouped by customer names, and orders the result by total sales in descending order","Common mistakes include: not filtering based on the signup date, forgetting to use `GROUP BY` properly, and misusing `JOIN` leading to incorrect aggregations","Common mistakes include: not filtering based on the signup date, forgetting to use `GROUP BY` properly, and misusing `JOIN` leading to incorrect aggregations"
377,"Given a sales table that contains columns for order_id, customer_id, product_id, order_date, and amount sold, write a SQL query to find the top 5 customers by total sales in the last year. Consider that the current date is 2023-10-01. You should return the customer_id and total sales amount","WITH CustomerSales AS (SELECT customer_id, SUM(amount_sold) AS total_sales FROM sales WHERE order_date >= DATEADD(year, -1, '2023-10-01') GROUP BY customer_id) SELECT customer_id, total_sales FROM CustomerSales ORDER BY total_sales DESC LIMIT 5",SQL,unknown,Intermediate,"[""Data Analyst"",""Data Engineer"",""Aggregate Function"",""CTE""]",Not Available,"This query uses a Common Table Expression (CTE) to calculate the total sales for each customer in the past year, then selects the top 5 customers based on that total",Candidates may forget to filter the sales records within the last year or may not use the correct date functions
378,"Given a table `sales` containing columns `id`, `product_id`, `sale_date`, and `amount`, and a table `products` with `id`, `name`, and `category`. Write a SQL query to find the product category that had the highest total sales amount in the year 2022","WITH total_sales AS (SELECT p.category, SUM(s.amount) AS total_amount FROM sales s JOIN products p ON s.product_id = p.id WHERE YEAR(s.sale_date) = 2022 GROUP BY p.category) SELECT category FROM total_sales ORDER BY total_amount DESC LIMIT 1",SQL,unknown,Intermediate,"['SQL', 'Join', 'Aggregate function']","SELECT p.category, SUM(s.amount) AS total_amount FROM sales s JOIN products p ON s.product_id = p.id WHERE YEAR(s.sale_date) = 2022 GROUP BY p.category",Not Available,This SQL query uses a Common Table Expression (CTE) to first calculate the total sales amount for each product category for the year 2022. It then selects the category with the highest total sales amount by ordering the results in descending order and limiting the output to 1
379,"You are given two tables: `employees` and `departments`. The `employees` table contains columns `id`, `name`, `department_id`, `salary`, and the `departments` table has columns `id`, `department_name`. Write an SQL query to find the average salary of employees in each department and list the department name along with the average salary, only for those departments that have more than 5 employees","SELECT d.department_name, AVG(e.salary) AS average_salary FROM employees e JOIN departments d ON e.department_id = d.id GROUP BY d.department_name HAVING COUNT(e.id) > 5",SQL,intermediate,"Data Analyst, Join, Aggregate function","SELECT d.department_name, AVG(e.salary) AS average_salary FROM employees e JOIN departments d ON e.department_id = d.id GROUP BY d.department_name HAVING COUNT(e.id) > 5",Not Available,"This query joins the `employees` and `departments` tables on the `department_id`, groups the results by department name, calculates the average salary, and filters out departments with 5 or fewer employees","Candidates may forget to use the `HAVING` clause to filter by the count of employees, or they may incorrectly join the tables"
380,"Given a sales database with a table `sales_data` containing columns `sale_id`, `product_id`, `sale_date`, and `amount`, and a `products` table containing `product_id`, `product_name`, and `category`. Write a SQL query to find the total sales amount of each product in the 'Electronics' category for the year 2022, along with the product name. Sort the results by total sales amount in descending order","SELECT p.product_name, SUM(sd.amount) AS total_sales FROM sales_data sd JOIN products p ON sd.product_id = p.product_id WHERE p.category = 'Electronics' AND YEAR(sd.sale_date) = 2022 GROUP BY p.product_name ORDER BY total_sales DESC",SQL,intermediate,"Data Analyst, Join, Aggregate function","SELECT product_name, SUM(amount) AS total_sales FROM sales_data sd JOIN products p ON sd.product_id = p.product_id WHERE p.category = 'Electronics' AND YEAR(sd.sale_date) = 2022 GROUP BY product_name ORDER BY total_sales DESC",Not Available,This SQL query joins the `sales_data` table with the `products` table to calculate the total sales amounts for products in the 'Electronics' category during the year 2022. It uses an aggregate function `SUM` to total the sales amounts and groups the results by product name before sorting them in descending order,"Common mistakes include forgetting to join the tables correctly, neglecting to filter by the year using `YEAR()`, or not grouping the results properly which may lead to incorrect aggregation"
381,"You are working with an e-commerce database that includes two tables: `orders(order_id, customer_id, order_date, total_amount)` and `customers(customer_id, customer_name, signup_date)`. Your task is to find the top 5 customers who have spent the most money this year, along with their total spending and the number of orders they made. Provide their customer names, total spending, and order count","WITH Year_Orders AS (SELECT customer_id, SUM(total_amount) AS total_spending, COUNT(order_id) AS order_count FROM orders WHERE YEAR(order_date) = YEAR(CURRENT_DATE) GROUP BY customer_id) SELECT c.customer_name, yo.total_spending, yo.order_count FROM Year_Orders yo JOIN customers c ON yo.customer_id = c.customer_id ORDER BY yo.total_spending DESC LIMIT 5",SQL,unknown,Intermediate,"Data Analyst, Aggregate Function, Join","WITH Year_Orders AS (SELECT customer_id, SUM(total_amount) AS total_spending, COUNT(order_id) AS order_count FROM orders WHERE YEAR(order_date) = YEAR(CURRENT_DATE) GROUP BY customer_id) SELECT c.customer_name, yo.total_spending, yo.order_count FROM Year_Orders yo JOIN customers c ON yo.customer_id = c.customer_id ORDER BY yo.total_spending DESC LIMIT 5",Not Available,This SQL query first creates a Common Table Expression (CTE) that summarizes the total spending and number of orders for each customer in the current year. It then joins this result with the `customers` table to retrieve the customer names and orders the result to get the top 5 customers by spending
382,"You are given two tables: 'employees' with columns 'employee_id', 'name', and 'department_id', and 'departments' with columns 'department_id' and 'department_name'. Write a SQL query to find the total number of employees in each department, and include departments with zero employees. Order the results by department name","SELECT d.department_name, COUNT(e.employee_id) AS total_employees FROM departments d LEFT JOIN employees e ON d.department_id = e.department_id GROUP BY d.department_name ORDER BY d.department_name",SQL,unknown,Intermediate,"['Join', 'Aggregate function', 'Data Analysis']","SELECT d.department_name, COUNT(e.employee_id) AS total_employees FROM departments d LEFT JOIN employees e ON d.department_id = e.department_id GROUP BY d.department_name ORDER BY d.department_name",Not Available,"This query uses a LEFT JOIN to combine the 'departments' table with the 'employees' table, counting the number of employees per department and ensuring all departments are included in the results, even those with zero employees"
383,"You are given two tables: 'employees' (with columns 'id', 'name', 'department_id', and 'salary') and 'departments' (with columns 'id' and 'department_name'). Write an SQL query to find the department name which has the highest total salary",SELECT d.department_name FROM departments d JOIN employees e ON d.id = e.department_id GROUP BY d.department_name ORDER BY SUM(e.salary) DESC LIMIT 1,SQL,intermediate,"Join, Aggregate Function, Group By",SELECT d.department_name FROM departments d JOIN employees e ON d.id = e.department_id GROUP BY d.department_name ORDER BY SUM(e.salary) DESC LIMIT 1,Not Available,"This query joins the 'departments' and 'employees' tables, groups the results by department name, sums up the salaries, and orders the results in descending order to find the department with the highest total salary",Candidates might forget to include the GROUP BY clause or might incorrectly specify the ordering or limit conditions
384,"Given two tables, 'employees' and 'departments', where 'employees' contains employee_id, employee_name, department_id, salary and 'departments' contains department_id and department_name. Write a SQL query to find the average salary of employees in each department and list departments with an average salary greater than 50000. Also, include the department name in the results","SELECT d.department_name, AVG(e.salary) AS average_salary FROM employees e JOIN departments d ON e.department_id = d.department_id GROUP BY d.department_name HAVING AVG(e.salary) > 50000",SQL,unknown,Intermediate,"['Join', 'Aggregate function', 'Data Analysis']","SELECT d.department_name, AVG(e.salary) AS average_salary FROM employees e JOIN departments d ON e.department_id = d.department_id GROUP BY d.department_name HAVING AVG(e.salary) > 50000",Not Available,"This query joins the employees table with the departments table on department_id, groups the results by department name, calculates the average salary for each department, and filters out those with an average salary of 50000 or less"
385,"Consider a sales database with two tables: `sales` and `products`. The `sales` table contains columns `sale_id`, `product_id`, `quantity`, and `sale_date`. The `products` table includes `product_id`, `product_name`, and `price`. Write a SQL query to find the total revenue generated for each product for the year 2022. Return the `product_name` and the `total_revenue` for each product, ordered by `total_revenue` in descending order","SELECT p.product_name, SUM(s.quantity * p.price) AS total_revenue FROM sales s JOIN products p ON s.product_id = p.product_id WHERE YEAR(s.sale_date) = 2022 GROUP BY p.product_name ORDER BY total_revenue DESC",SQL,unknown,Intermediate,"[""Join"", ""Aggregate Function"", ""Data Analyst""]",Not Available,"This query joins the `sales` and `products` tables on the `product_id`, filters the results for sales that occurred in 2022, calculates total revenue by multiplying `quantity` sold with the `price` of the product, groups the results by `product_name`, and orders them by `total_revenue` in descending order","Candidates may forget to group by the correct column, use incorrect date functions, or omit the `SUM` function leading to inaccurate or incomplete results"
386,"You are given two tables: `students` (with columns `student_id`, `name`, `enrollment_date`) and `grades` (with columns `student_id`, `course_id`, `grade`). Write a query to find the average grade for each student who enrolled after January 1, 2022, and display the results in descending order of their average grade","SELECT s.student_id, s.name, AVG(g.grade) AS average_grade FROM students s JOIN grades g ON s.student_id = g.student_id WHERE s.enrollment_date > '2022-01-01' GROUP BY s.student_id, s.name ORDER BY average_grade DESC",SQL,unknown,Intermediate,"[""Join"", ""Aggregate function"", ""Data Analyst""]",Not Available,"This query selects the student ID and name, calculates the average grade for those who enrolled after a specific date, groups the results by student, and orders the results by average grade in descending order",Candidates might forget to include the `GROUP BY` clause or misuse the `AVG` function without properly aggregating
387,"You are given two tables: 'employees' and 'departments'. The 'employees' table has the columns 'employee_id', 'employee_name', 'department_id', and 'salary'. The 'departments' table has 'department_id' and 'department_name'. Write a SQL query to find the total salary expenditure for each department, listing the department name and the total salary, but only include departments where the total salary exceeds $100,000. Order the result by total salary in descending order","SELECT d.department_name, SUM(e.salary) AS total_salary FROM employees e JOIN departments d ON e.department_id = d.department_id GROUP BY d.department_name HAVING SUM(e.salary) > 100000 ORDER BY total_salary DESC",SQL,unknown,Intermediate,"Data Analyst, Join, Aggregate Function","SELECT d.department_name, SUM(e.salary) AS total_salary FROM employees e JOIN departments d ON e.department_id = d.department_id GROUP BY d.department_name HAVING SUM(e.salary) > 100000 ORDER BY total_salary DESC",Not Available,"This SQL query joins the two tables on the department_id, calculates the total salary for each department using SUM, filters departments with a total salary greater than 100,000 using HAVING, and then orders the results by total salary in descending order"
388,"You are given two tables: 'employees' (employee_id, employee_name, manager_id) and 'sales' (sale_id, employee_id, amount, sale_date). Write a SQL query to find the total sales made by each manager, along with the number of employees reporting to each manager. Sort the results by total sales in descending order","SELECT e.manager_id, SUM(s.amount) AS total_sales, COUNT(DISTINCT e.employee_id) AS num_employees 
 FROM employees e 
 JOIN sales s ON e.employee_id = s.employee_id 
 GROUP BY e.manager_id 
 ORDER BY total_sales DESC",SQL,unknown,Advanced,"[""Data Analyst"", ""Business Intelligence"", ""Join"", ""Aggregate function""]","Example: SELECT e.manager_id, SUM(s.amount) AS total_sales, COUNT(DISTINCT e.employee_id) AS num_employees FROM employees e JOIN sales s ON e.employee_id = s.employee_id GROUP BY e.manager_id ORDER BY total_sales DESC",Not Available,"This SQL query joins the 'employees' and 'sales' tables on 'employee_id', groups the results by 'manager_id', and calculates the total sales (SUM(s.amount)) and number of unique employees (COUNT(DISTINCT e.employee_id)) reporting to each manager. The results are then sorted by total sales in descending order"
389,"Given a sales database with tables 'orders' (order_id, customer_id, order_date, total_amount) and 'customers' (customer_id, customer_name, registration_date), write a query to find the total sales amount by each customer, including customers who have not made any purchases (i.e., Zero sales amount). The query should also return the customers in ascending order based on their total sales amount","SELECT c.customer_id, c.customer_name, COALESCE(SUM(o.total_amount), 0) AS total_sales_amount FROM customers c LEFT JOIN orders o ON c.customer_id = o.customer_id GROUP BY c.customer_id, c.customer_name ORDER BY total_sales_amount ASC",SQL,unknown,Intermediate,"Data Analyst, SQL, Left Join, Aggregate Function","SELECT c.customer_id, c.customer_name, COALESCE(SUM(o.total_amount), 0) AS total_sales_amount FROM customers c LEFT JOIN orders o ON c.customer_id = o.customer_id GROUP BY c.customer_id, c.customer_name ORDER BY total_sales_amount ASC",Not Available,"This query uses a LEFT JOIN to include all customers even if they have no corresponding entries in the orders table. The COALESCE function is used to replace NULL values from customers with zero for total sales amount, and the results are grouped by customer"
390,"You are given two tables: `employees` (with columns `employee_id`, `name`, `department_id`, `salary`) and `departments` (with columns `department_id`, `department_name`). Write an SQL query to find the top 3 highest-paid employees in each department","WITH RankedEmployees AS ( SELECT e.name, e.salary, d.department_name, ROW_NUMBER() OVER (PARTITION BY d.department_id ORDER BY e.salary DESC) as rank FROM employees e JOIN departments d ON e.department_id = d.department_id ) SELECT name, salary, department_name FROM RankedEmployees WHERE rank <= 3",SQL,unknown,Advanced,"[""Data Analyst"", ""Data Engineer"", ""Window Functions"", ""Join"", ""CTE""]",Not Available,"This SQL uses a Common Table Expression (CTE) to rank employees within their respective departments based on salary, then selects the top 3 from each department","Candidates might use the wrong ranking function (like RANK() instead of ROW_NUMBER()) or forget to filter by department_id, which could lead to incomplete results"
391,"You are given two tables, 'employees' and 'departments'. The 'employees' table contains employee ids, names, department ids, and salaries. The 'departments' table contains department ids and department names. Write a SQL query to find the department name along with the average salary of the employees in each department, sorted by department name in ascending order. Include departments with no employees, showing the average salary as NULL","SELECT d.department_name, AVG(e.salary) AS average_salary FROM departments d LEFT JOIN employees e ON d.department_id = e.department_id GROUP BY d.department_name ORDER BY d.department_name ASC",SQL,unknown,Intermediate,"[""Join"", ""Aggregate function"", ""Data Analysis""]",Not Available,"This query uses a LEFT JOIN to include all departments, even those without employees. It calculates the average salary using the AVG function and groups results by department name","Candidates might forget to use a LEFT JOIN, resulting in excluding departments with no employees and thus returning fewer records than desired. They may also forget to include the grouping before calculating aggregates"
392,"Given a sales table and a products table, write a SQL query to find the total sales revenue per product category for the last year. Use proper joins and aggregations. Ensure that you only include categories that had more than $10,000 in sales revenue","SELECT p.category, SUM(s.amount) AS total_revenue FROM sales s JOIN products p ON s.product_id = p.id WHERE s.sale_date BETWEEN DATEADD(year, -1, GETDATE()) AND GETDATE() GROUP BY p.category HAVING SUM(s.amount) > 10000",SQL,unknown,Intermediate,"['Data Analyst', 'Data Engineer', 'Aggregate Function', 'Join']","SELECT p.category, SUM(s.amount) AS total_revenue FROM sales s JOIN products p ON s.product_id = p.id WHERE s.sale_date BETWEEN DATEADD(year, -1, GETDATE()) AND GETDATE() GROUP BY p.category HAVING SUM(s.amount) > 10000",Not Available,"This query joins the sales table with the products table to obtain product categories and calculates the total sales revenue for each category for the last year. It filters the results to include only categories that exceed $10,000 in sales revenue"
393,"You are working on a database for a company that keeps track of customer orders. The database contains two tables: `Customers` (with columns `CustomerID`, `CustomerName`, and `Country`) and `Orders` (with columns `OrderID`, `CustomerID`, `OrderAmount`, and `OrderDate`). Write a SQL query to find the total order amount for each customer, along with their names, but only for those customers who have made more than 3 orders in the last year. Sort the results by total order amount in descending order","WITH RecentOrders AS ( SELECT CustomerID, SUM(OrderAmount) AS TotalAmount FROM Orders WHERE OrderDate >= DATEADD(YEAR, -1, GETDATE()) GROUP BY CustomerID HAVING COUNT(OrderID) > 3 ) SELECT c.CustomerName, ro.TotalAmount FROM Customers c JOIN RecentOrders ro ON c.CustomerID = ro.CustomerID ORDER BY ro.TotalAmount DESC",SQL,unknown,Advanced,"[""Data Analyst"",""Business Intelligence"",""Join"",""Aggregate function"",""CTE""]","SELECT c.CustomerName, SUM(o.OrderAmount) AS TotalAmount FROM Customers c JOIN Orders o ON c.CustomerID = o.CustomerID WHERE o.OrderDate >= DATEADD(YEAR, -1, GETDATE()) GROUP BY c.CustomerName HAVING COUNT(o.OrderID) > 3 ORDER BY TotalAmount DESC",Not Available,This query uses a Common Table Expression (CTE) to first calculate the total order amount for customers who have made more than 3 orders in the past year. It then joins this result with the `Customers` table to retrieve customer names and sorts the final results by total order amount in descending order
394,"You are given two tables: `Orders` and `Customers`. The `Orders` table contains columns `OrderID`, `CustomerID`, `OrderDate`, and `TotalAmount`. The `Customers` table contains `CustomerID`, `CustomerName`, and `Country`. Write a SQL query to find the total spending by each customer along with their names and countries, but only include customers who have spent more than $1,000 in total","SELECT c.CustomerName, c.Country, SUM(o.TotalAmount) AS TotalSpending FROM Customers c JOIN Orders o ON c.CustomerID = o.CustomerID GROUP BY c.CustomerID, c.CustomerName, c.Country HAVING SUM(o.TotalAmount) > 1000",SQL,unknown,Intermediate,"['Join', 'Aggregate function', 'Data Analysis']","SELECT c.CustomerName, c.Country, SUM(o.TotalAmount) AS TotalSpending FROM Customers c JOIN Orders o ON c.CustomerID = o.CustomerID GROUP BY c.CustomerID, c.CustomerName, c.Country HAVING SUM(o.TotalAmount) > 1000",Not Available,"This query joins the `Customers` and `Orders` tables on the `CustomerID`, groups the results by customer information, and calculates the total spending for each customer. It uses `HAVING` to filter out customers who have not spent more than $1,000"
395,"Given the following database schema for a sales database: Customers (customer_id, name), Orders (order_id, customer_id, order_date, total_amount), and Order_Items (order_item_id, order_id, product_id, quantity), write an SQL query to find the top 3 customers by total spending over the last year, including their names and total amounts spent","SELECT c.name, SUM(o.total_amount) AS total_spending FROM Customers c JOIN Orders o ON c.customer_id = o.customer_id WHERE o.order_date >= DATEADD(year, -1, GETDATE()) GROUP BY c.name ORDER BY total_spending DESC OFFSET 0 ROWS FETCH NEXT 3 ROWS ONLY",SQL,advanced,"[""Data Analyst"", ""Business Intelligence"", ""Aggregate functions"", ""Join""]","SELECT c.name, SUM(o.total_amount) AS total_spending FROM Customers c JOIN Orders o ON c.customer_id = o.customer_id WHERE o.order_date >= DATEADD(year, -1, GETDATE()) GROUP BY c.name ORDER BY total_spending DESC OFFSET 0 ROWS FETCH NEXT 3 ROWS ONLY","This query joins the Customers and Orders tables, filters orders from the last year, and then groups by customer name to calculate the total spending. Finally, it orders the results by total spending in descending order and limits the output to the top 3 customers","Candidates may forget to filter only the last year’s orders, incorrectly aggregate without proper grouping, or fail to use the correct pagination syntax for their SQL dialect",What would be the SQL to find the bottom 3 customers by total spending?
396,"You are tasked with generating a report that displays the top 5 products by total sales for each region, along with the region's name and total sales amount. Products with the same total sales amount should be ordered by product name. Given the following tables: 'sales' (columns: 'product_id', 'region_id', 'amount', 'date') and 'products' (columns: 'product_id', 'product_name'). Write a SQL query to achieve this report","WITH RankedSales AS ( SELECT p.product_name, s.region_id, SUM(s.amount) AS total_sales, ROW_NUMBER() OVER (PARTITION BY s.region_id ORDER BY SUM(s.amount) DESC, p.product_name) AS rank FROM sales s JOIN products p ON s.product_id = p.product_id GROUP BY p.product_name, s.region_id ) SELECT region_id, product_name, total_sales FROM RankedSales WHERE rank <= 5 ORDER BY region_id, rank",SQL,unknown,Advanced,"Data Analyst, SQL, Window Function, Aggregate Function, Join","WITH RankedSales AS ( SELECT p.product_name, s.region_id, SUM(s.amount) AS total_sales, ROW_NUMBER() OVER (PARTITION BY s.region_id ORDER BY SUM(s.amount) DESC, p.product_name) AS rank FROM sales s JOIN products p ON s.product_id = p.product_id GROUP BY p.product_name, s.region_id ) SELECT region_id, product_name, total_sales FROM RankedSales WHERE rank <= 5 ORDER BY region_id, rank",Not Available,"The SQL query uses a Common Table Expression (CTE) to first calculate the total sales for each product within each region. It then assigns a rank to each product based on its total sales using the ROW_NUMBER() window function, partitioning by region. Finally, it selects the top 5 ranked products per region to generate the desired report"
397,"Given a sales table with fields for sale_id, product_id, sale_date, and sale_amount, and a products table with fields for product_id and product_name, write a SQL query to find the total sales amount for each product for the last month. The output should show the product_name and total sales amount, sorted from highest to lowest sales amount","WITH last_month_sales AS (SELECT product_id, SUM(sale_amount) as total_sales FROM sales WHERE sale_date >= DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '1 month' AND sale_date < DATE_TRUNC('month', CURRENT_DATE) GROUP BY product_id) SELECT p.product_name, lms.total_sales FROM last_month_sales lms JOIN products p ON lms.product_id = p.product_id ORDER BY lms.total_sales DESC",SQL,unknown,Intermediate,"[\""Data Analyst\"", \""Business Analyst\"", \""Aggregate Functions\"", \""Join\""]","SELECT product_name, total_sales FROM (SELECT product_id, SUM(sale_amount) AS total_sales FROM sales WHERE sale_date >= DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '1 month' GROUP BY product_id) AS last_month_sales JOIN products ON last_month_sales.product_id = products.product_id ORDER BY total_sales DESC",Not Available,This query uses a Common Table Expression (CTE) to first filter and aggregate the sales data for the last month and then joins it with the products table to get the product names before ordering the results based on total sales
398,"You have two tables: `orders` and `customers`. The `orders` table contains columns for `order_id`, `customer_id`, `order_date`, and `total_amount`. The `customers` table contains `customer_id`, `customer_name`, and `signup_date`. Write a SQL query that returns the customer name, total amount spent, and the total number of orders placed by each customer for the current year, ordered by total amount spent in descending order","SELECT c.customer_name, SUM(o.total_amount) AS total_spent, COUNT(o.order_id) AS total_orders FROM customers c JOIN orders o ON c.customer_id = o.customer_id WHERE YEAR(o.order_date) = YEAR(CURDATE()) GROUP BY c.customer_name ORDER BY total_spent DESC",SQL,unknown,Intermediate,"[""Join"",""Aggregate function"",""Data Analysis""]",Not Available,"This SQL query joins the `customers` and `orders` tables on `customer_id`, filters the results for the current year, and then aggregates the total amount spent and total number of orders for each customer. The results are grouped by customer name and ordered by the total amount spent in descending order",Candidates might forget to include the WHERE clause for filtering on the current year or might not group by all necessary columns
399,"You are working for a retail company and need to analyze sales performance. You have two tables: `sales` (containing `order_id`, `customer_id`, `sale_amount`, `sale_date`) and `customers` (containing `customer_id`, `customer_name`, `registration_date`). Write a SQL query that retrieves the names of customers who made purchases totaling more than $500 in the year 2022 and shows their total sales amount. Additionally, include the count of their orders","SELECT c.customer_name, SUM(s.sale_amount) AS total_sales, COUNT(s.order_id) AS order_count FROM customers c JOIN sales s ON c.customer_id = s.customer_id WHERE s.sale_date BETWEEN '2022-01-01' AND '2022-12-31' GROUP BY c.customer_name HAVING SUM(s.sale_amount) > 500",SQL,unknown,Intermediate,"[""Join"", ""Aggregation"", ""SQL"", ""Data Analysis""]","SELECT c.customer_name, SUM(s.sale_amount) AS total_sales, COUNT(s.order_id) AS order_count FROM customers c JOIN sales s ON c.customer_id = s.customer_id WHERE s.sale_date BETWEEN '2022-01-01' AND '2022-12-31' GROUP BY c.customer_name HAVING SUM(s.sale_amount) > 500",Not Available,"This query joins the `customers` and `sales` tables, filters to only include sales from 2022, aggregates sales amounts and order counts per customer, and restricts the results to those customers whose total sales exceed $500"
400,"Given a sales database with tables 'sales' (containing columns 'id', 'product_id', 'amount', 'sale_date') and 'products' (containing columns 'id', 'name', 'category'), write a query to find the total sales amount per product category for the month of January 2023","SELECT p.category, SUM(s.amount) AS total_sales FROM sales s JOIN products p ON s.product_id = p.id WHERE s.sale_date BETWEEN '2023-01-01' AND '2023-01-31' GROUP BY p.category",SQL,unknown,Intermediate,"[Data Analyst, Data Engineer, Aggregate function, Join]","SELECT p.category, SUM(s.amount) AS total_sales FROM sales s JOIN products p ON s.product_id = p.id WHERE s.sale_date BETWEEN '2023-01-01' AND '2023-01-31' GROUP BY p.category",Not Available,"This query uses a JOIN to combine 'sales' and 'products' tables on 'product_id', filters data for January 2023, and then aggregates total sales per category using SUM and GROUP BY"
401,"You are given two tables: `employees` with columns `employee_id`, `employee_name`, and `department_id`, and `departments` with columns `department_id`, `department_name`, and `manager_id`. Write a SQL query to find the department name along with the count of employees in each department, including those with no employees. Return results in a format of `department_name` and `employee_count`","SELECT d.department_name, COUNT(e.employee_id) AS employee_count FROM departments d LEFT JOIN employees e ON d.department_id = e.department_id GROUP BY d.department_name ORDER BY d.department_name",SQL,unknown,Intermediate,"Data Analyst, Join, Aggregate function","SELECT d.department_name, COUNT(e.employee_id) AS employee_count FROM departments d LEFT JOIN employees e ON d.department_id = e.department_id GROUP BY d.department_name ORDER BY d.department_name",Not Available,"This query uses a LEFT JOIN to connect the `departments` and `employees` tables, counting the `employee_id` for each department. Departments without employees still appear in the result with a count of zero"
402,"Given a sales database with two tables: `orders` (order_id, customer_id, order_date, order_amount) and `customers` (customer_id, customer_name, join_date), write a query to find the total sales amount for each customer who joined after January 1st, 2020, and order the results by total sales in descending order","SELECT c.customer_name, SUM(o.order_amount) AS total_sales FROM customers c JOIN orders o ON c.customer_id = o.customer_id WHERE c.join_date > '2020-01-01' GROUP BY c.customer_name ORDER BY total_sales DESC",SQL,unknown,Intermediate,"[""Join"", ""Aggregate function"", ""Data Analysis""]","SELECT c.customer_name, SUM(o.order_amount) AS total_sales FROM customers c JOIN orders o ON c.customer_id = o.customer_id WHERE c.join_date > '2020-01-01' GROUP BY c.customer_name ORDER BY total_sales DESC",Not Available,"This query retrieves total sales per customer who joined after a specified date by using a JOIN to link orders with customers, filtering on the join date, grouping by customer name, and ordering the results"
403,"You have two tables: `employees` and `departments`. The `employees` table contains employee details including their IDs, names, and department IDs. The `departments` table contains department IDs and names. Write a SQL query to find the department names and the total number of employees in each department, but only include departments with more than 3 employees","SELECT d.department_name, COUNT(e.id) AS total_employees FROM departments d LEFT JOIN employees e ON d.id = e.department_id GROUP BY d.department_name HAVING COUNT(e.id) > 3",SQL,unknown,Intermediate,"['Join', 'Aggregate function', 'Group By']","SELECT d.department_name, COUNT(e.id) AS total_employees FROM departments d LEFT JOIN employees e ON d.id = e.department_id GROUP BY d.department_name HAVING COUNT(e.id) > 3",Not Available,"The query uses a LEFT JOIN to combine the `departments` and `employees` tables, counts the number of employees per department, groups by department name, and applies a HAVING clause to filter results for departments with more than 3 employees"
404,"Given a table `sales` with columns `id`, `product_id`, `quantity`, and `sale_date`, and a table `products` with columns `id`, `name`, and `category`, write a query to find the total quantity sold for each product category for the last month. The output should include the category name and the total quantity sold","WITH last_month_sales AS (SELECT p.category, SUM(s.quantity) AS total_quantity FROM sales s JOIN products p ON s.product_id = p.id WHERE s.sale_date >= DATEADD(month, -1, GETDATE()) GROUP BY p.category) SELECT category, total_quantity FROM last_month_sales ORDER BY total_quantity DESC",SQL,unknown,Intermediate,"Join, Aggregate Function, CTE","SELECT p.category, SUM(s.quantity) AS total_quantity FROM sales s JOIN products p ON s.product_id = p.id WHERE s.sale_date >= DATEADD(month, -1, GETDATE()) GROUP BY p.category",Not Available,This query uses a Common Table Expression (CTE) to first filter and aggregate sales data from the last month and then retrieves the total quantities sold grouped by product category
405,"Given two tables: `employees (id, name, department_id)` and `departments (id, department_name, budget)`, write a SQL query to find the total budget assigned to each department along with the names of the employees who work in those departments. If a department has no employees, still return the department name and budget","SELECT d.department_name, d.budget, GROUP_CONCAT(e.name) AS employee_names FROM departments d LEFT JOIN employees e ON d.id = e.department_id GROUP BY d.department_name, d.budget",SQL,unknown,Intermediate,"Data Analyst, Join, Aggregate function","SELECT d.department_name, d.budget, GROUP_CONCAT(e.name) AS employee_names FROM departments d LEFT JOIN employees e ON d.id = e.department_id GROUP BY d.department_name, d.budget",Not Available,"This query uses a LEFT JOIN to include all departments, even those without employees, and then groups the results by department to compute the total budget and list employee names associated with each department"
406,"Given a table 'orders' with columns 'order_id', 'customer_id', 'order_date', 'amount', and a table 'customers' with columns 'customer_id', 'customer_name', 'signup_date', write a SQL query to find the total amount spent by each customer who signed up after January 1, 2022, and the orders they placed in the last month, ordered by the total amount spent in descending order","WITH LastMonthOrders AS ( SELECT customer_id, SUM(amount) AS total_spent FROM orders WHERE order_date >= DATEADD(month, -1, GETDATE()) GROUP BY customer_id ) SELECT c.customer_name, lmo.total_spent FROM customers c JOIN LastMonthOrders lmo ON c.customer_id = lmo.customer_id WHERE c.signup_date > '2022-01-01' ORDER BY lmo.total_spent DESC",SQL,unknown,Advanced,"Data Analyst, Business Intelligence, Join, Aggregate function, CTE","WITH LastMonthOrders AS ( SELECT customer_id, SUM(amount) AS total_spent FROM orders WHERE order_date >= DATEADD(month, -1, GETDATE()) GROUP BY customer_id ) SELECT c.customer_name, lmo.total_spent FROM customers c JOIN LastMonthOrders lmo ON c.customer_id = lmo.customer_id WHERE c.signup_date > '2022-01-01' ORDER BY lmo.total_spent DESC",Not Available,"The query uses a Common Table Expression (CTE) to aggregate the total amounts spent by customers in the last month and then joins it with the customers' table to filter out those who signed up after January 1, 2022. The results are ordered by total spending in descending order"
407,"You are analyzing a sales database with two tables: `sales` (containing fields `id`, `sale_amount`, `sale_date`, `product_id`) and `products` (containing fields `id`, `product_name`, `category`). Write an SQL query to find the total sales amount for each product category for the year 2023, and display the categories in descending order by total sales amount","SELECT p.category, SUM(s.sale_amount) AS total_sales FROM sales s JOIN products p ON s.product_id = p.id WHERE YEAR(s.sale_date) = 2023 GROUP BY p.category ORDER BY total_sales DESC",SQL,unknown,Intermediate,"Data Analyst, Data Engineer, SQL, Join, Aggregate function","SELECT p.category, SUM(s.sale_amount) AS total_sales FROM sales s JOIN products p ON s.product_id = p.id WHERE YEAR(s.sale_date) = 2023 GROUP BY p.category ORDER BY total_sales DESC",Not Available,"This query joins the `sales` and `products` tables on the product ID, filters sales to the year 2023, groups the results by product category, and calculates the total sales amount for each category, ordering the results by total sales in descending order"
408,"Given two tables, `orders` (order_id, customer_id, amount, order_date) and `customers` (customer_id, customer_name, region), write an SQL query to find the total order amount for each customer in the 'North' region, along with the customer names, and order them by total amount in descending order","SELECT c.customer_name, SUM(o.amount) AS total_order_amount FROM customers c JOIN orders o ON c.customer_id = o.customer_id WHERE c.region = 'North' GROUP BY c.customer_name ORDER BY total_order_amount DESC",SQL,unknown,Intermediate,"Data Analyst, Join, Aggregate Function","SELECT c.customer_name, SUM(o.amount) AS total_order_amount FROM customers c JOIN orders o ON c.customer_id = o.customer_id WHERE c.region = 'North' GROUP BY c.customer_name ORDER BY total_order_amount DESC",Not Available,"This query joins the `customers` and `orders` tables, filters for customers in the 'North' region, groups the results by customer name, and calculates the total order amount for each customer. Finally, it sorts the results by total order amount in descending order"
409,"You are given two tables: 'employees' and 'departments'. The 'employees' table contains the columns 'employee_id', 'name', 'salary', 'department_id', while the 'departments' table has 'department_id' and 'department_name'. Write a SQL query to find the average salary of employees in each department, but only include departments that have more than 3 employees. Additionally, order the results by the average salary in descending order","SELECT d.department_name, AVG(e.salary) AS average_salary FROM employees e JOIN departments d ON e.department_id = d.department_id GROUP BY d.department_name HAVING COUNT(e.employee_id) > 3 ORDER BY average_salary DESC",SQL,unknown,Intermediate,"[\""Data Analyst\"", \""Data Engineer\"", \""Join\"", \""Aggregation\""]","SELECT d.department_name, AVG(e.salary) AS average_salary FROM employees e JOIN departments d ON e.department_id = d.department_id GROUP BY d.department_name HAVING COUNT(e.employee_id) > 3 ORDER BY average_salary DESC",Not Available,"This query joins the 'employees' and 'departments' tables, computes the average salary for each department, filters to include only those departments with more than 3 employees, and sorts the results by average salary in descending order"
410,"You are given two tables, `employees` and `departments`. The `employees` table contains `employee_id`, `employee_name`, `department_id`, and `salary`. The `departments` table contains `department_id` and `department_name`. Write a query to find the average salary of employees in each department, but only include departments that have more than 5 employees. The result should include `department_name` and `average_salary`","WITH DepartmentCounts AS (SELECT d.department_name, COUNT(e.employee_id) AS employee_count FROM departments d JOIN employees e ON d.department_id = e.department_id GROUP BY d.department_name HAVING COUNT(e.employee_id) > 5) SELECT dc.department_name, AVG(e.salary) AS average_salary FROM DepartmentCounts dc JOIN employees e ON dc.department_name = (SELECT d.department_name FROM departments d WHERE d.department_id = e.department_id) GROUP BY dc.department_name",SQL,unknown,Advanced,"[""Data Analyst"", ""Data Engineer"", ""Aggregate function"", ""Join""]","SELECT d.department_name, AVG(e.salary) AS average_salary FROM departments d JOIN employees e ON d.department_id = e.department_id GROUP BY d.department_name HAVING COUNT(e.employee_id) > 5",Not Available,This query first counts the number of employees per department and filters for those departments with more than 5 employees. It then calculates the average salary of employees in those filtered departments
411,"You are given two tables, `Sales` (with columns `OrderID`, `ProductID`, `CustomerID`, `Quantity`, `OrderDate`) and `Products` (with columns `ProductID`, `ProductName`, `Category`, `Price`). Write a SQL query to find the total revenue generated from each category in the month of January 2023. The output should include `Category`, `TotalRevenue` (total revenue for that category), and `TotalQuantity` (total quantity sold). Sort the results by `TotalRevenue` in descending order","WITH CategoryRevenue AS (SELECT p.Category, SUM(s.Quantity * p.Price) AS TotalRevenue, SUM(s.Quantity) AS TotalQuantity FROM Sales s JOIN Products p ON s.ProductID = p.ProductID WHERE s.OrderDate >= '2023-01-01' AND s.OrderDate < '2023-02-01' GROUP BY p.Category) SELECT Category, TotalRevenue, TotalQuantity FROM CategoryRevenue ORDER BY TotalRevenue DESC",SQL,unknown,Intermediate,"[""Join"", ""Aggregation"", ""CTE""]",Not Available,"This query calculates total revenue and quantity sold per product category in January 2023 using a Common Table Expression (CTE) for improved readability. It joins the `Sales` and `Products` tables, filters orders for January 2023, aggregates the revenue and quantity by category, and sorts the results by total revenue","Candidates might forget to filter the date range correctly, leading to incorrect results. They could also neglect to group by the right columns or miss the JOIN clause"
412,"You are given two tables: 'employees' and 'departments'. The 'employees' table has columns 'employee_id', 'employee_name', 'salary', and 'department_id'. The 'departments' table contains 'department_id' and 'department_name'. Write a SQL query to find the total salary paid to employees in each department, but only include departments where the total salary exceeds $100,000. Sort the results by 'total_salary' in descending order","SELECT d.department_name, SUM(e.salary) AS total_salary FROM departments d JOIN employees e ON d.department_id = e.department_id GROUP BY d.department_name HAVING SUM(e.salary) > 100000 ORDER BY total_salary DESC",SQL,unknown,Intermediate,"[""Join"", ""Aggregate function"", ""Group By"", ""HAVING""]",Not Available,"This query joins the 'employees' and 'departments' tables on 'department_id', calculates the total salary for each department using the SUM() function, groups the results by department name, filters departments with a total salary greater than $100,000 using the HAVING clause, and sorts the results in descending order by total salary","Common mistakes include forgetting the JOIN condition, misusing the HAVING clause instead of the WHERE clause, or neglecting to group by the required columns"
413,"Consider a retail database with two tables: `sales` (columns: `sale_id`, `customer_id`, `sale_date`, `amount`) and `customers` (columns: `customer_id`, `customer_name`, `signup_date`). Write a query to find the total sales amount and number of transactions conducted by each customer who signed up in the year 2022. The result should include the customer name, total sales amount, and the number of transactions, ordered by total sales amount in descending order","SELECT c.customer_name, SUM(s.amount) AS total_sales, COUNT(s.sale_id) AS transaction_count FROM customers c JOIN sales s ON c.customer_id = s.customer_id WHERE c.signup_date >= '2022-01-01' AND c.signup_date < '2023-01-01' GROUP BY c.customer_name ORDER BY total_sales DESC",SQL,unknown,Intermediate,"Data Analyst, Join, Aggregate function","SELECT c.customer_name, SUM(s.amount) AS total_sales, COUNT(s.sale_id) AS transaction_count FROM customers c JOIN sales s ON c.customer_id = s.customer_id WHERE c.signup_date >= '2022-01-01' AND c.signup_date < '2023-01-01' GROUP BY c.customer_name ORDER BY total_sales DESC",Not Available,"This query joins the `customers` and `sales` tables on `customer_id`, filters customers who signed up in 2022, aggregates the sales data to compute total sales and transaction count, and finally orders the results by total sales in descending order"
414,"Given a sales database with tables `orders` (order_id, customer_id, order_date, total_amount) and `customers` (customer_id, customer_name, registration_date), write a SQL query to find the total sales amount and the number of orders for each customer who registered in the last year, and sort the results by total sales in descending order","SELECT c.customer_id, c.customer_name, COUNT(o.order_id) AS number_of_orders, SUM(o.total_amount) AS total_sales FROM customers c LEFT JOIN orders o ON c.customer_id = o.customer_id WHERE c.registration_date >= CURRENT_DATE - INTERVAL '1 year' GROUP BY c.customer_id, c.customer_name ORDER BY total_sales DESC",unknown,Intermediate,"Data Analyst, Join, Aggregate function, Group By",example_query,"This SQL query joins the `customers` and `orders` tables to filter customers who registered within the last year. It counts the number of orders and sums the total sales amount for each customer, then sorts the results by total sales in descending order","Candidates may forget to use the `GROUP BY` clause or might not account for customers with no orders, leading to incorrect counts. Additionally, using the wrong date interval could result in filtering out the intended rows","Candidates may forget to use the `GROUP BY` clause or might not account for customers with no orders, leading to incorrect counts. Additionally, using the wrong date interval could result in filtering out the intended rows"
415,"You are given two tables: `employees` (id, name, department_id, salary) and `departments` (id, department_name). Write a query to find the average salary of employees in each department, but only include departments with an average salary greater than $60,000, and order the results by the average salary in descending order","WITH AverageSalaries AS ( SELECT d.department_name, AVG(e.salary) AS avg_salary FROM employees e JOIN departments d ON e.department_id = d.id GROUP BY d.department_name ) SELECT department_name, avg_salary FROM AverageSalaries WHERE avg_salary > 60000 ORDER BY avg_salary DESC",SQL,intermediate,"[\""Data Analyst\"", \""Business Intelligence\"", \""Aggregate function\"", \""Join\""]","WITH AverageSalaries AS ( SELECT d.department_name, AVG(e.salary) AS avg_salary FROM employees e JOIN departments d ON e.department_id = d.id GROUP BY d.department_name ) SELECT department_name, avg_salary FROM AverageSalaries WHERE avg_salary > 60000 ORDER BY avg_salary DESC",Not Available,"This query uses a Common Table Expression (CTE) to calculate the average salary of employees per department. It then filters out departments with an average salary above $60,000 and orders the results by average salary in descending order","Candidates might forget to include the JOIN clause, incorrectly reference table names, or misplace the filtering condition"
416,"Given a sales database with tables `orders`, `customers`, and `products`, write a SQL query to find the top 5 customers by total sales amount in the last year, including their names and total sales amount","WITH SalesTotals AS ( SELECT c.customer_id, c.customer_name, SUM(o.total_amount) AS total_sales FROM customers c JOIN orders o ON c.customer_id = o.customer_id WHERE o.order_date >= DATEADD(YEAR, -1, GETDATE()) GROUP BY c.customer_id, c.customer_name ) SELECT customer_name, total_sales FROM SalesTotals ORDER BY total_sales DESC LIMIT 5",SQL,unknown,Advanced,"[""Data Analyst"", ""Business Intelligence"", ""Aggregate Function"", ""Join""]","WITH SalesTotals AS ( SELECT c.customer_id, c.customer_name, SUM(o.total_amount) AS total_sales FROM customers c JOIN orders o ON c.customer_id = o.customer_id WHERE o.order_date >= DATEADD(YEAR, -1, GETDATE()) GROUP BY c.customer_id, c.customer_name ) SELECT customer_name, total_sales FROM SalesTotals ORDER BY total_sales DESC LIMIT 5",Not Available,This SQL query uses a Common Table Expression (CTE) to first calculate the total sales for each customer who made purchases in the last year. It then selects the top five customers based on the total sales amount
417,"You are given two tables: 'orders' and 'customers'. The 'orders' table contains order_id, customer_id, order_date, and total_amount. The 'customers' table contains customer_id, customer_name, and join_date. Write a SQL query to find the total amount spent by each customer along with the count of orders they made, but only include customers who have placed at least one order. Sort the results by total amount spent in descending order","SELECT c.customer_id, c.customer_name, COUNT(o.order_id) AS order_count, SUM(o.total_amount) AS total_spent FROM customers c JOIN orders o ON c.customer_id = o.customer_id GROUP BY c.customer_id, c.customer_name HAVING COUNT(o.order_id) > 0 ORDER BY total_spent DESC",SQL,unknown,Intermediate,"['Join', 'Aggregate function', 'Data Analysis']","SELECT c.customer_id, c.customer_name, COUNT(o.order_id) AS order_count, SUM(o.total_amount) AS total_spent FROM customers c JOIN orders o ON c.customer_id = o.customer_id GROUP BY c.customer_id, c.customer_name HAVING COUNT(o.order_id) > 0 ORDER BY total_spent DESC",Not Available,"This SQL query joins the 'customers' and 'orders' tables, calculates both the count of orders and the total amount spent per customer, and ensures only customers with at least one order are included in the results. The final output is sorted by total amount spent in descending order"
418,"You are given two tables: `sales` (containing `order_id`, `customer_id`, `order_date`, `amount`) and `customers` (containing `customer_id`, `customer_name`, `join_date`). Write an SQL query to find the top 5 customers who have spent the most since joining, along with their total spend amount and join date. The result should be ordered by total spend in descending order","WITH customer_spending AS (SELECT c.customer_id, c.customer_name, c.join_date, SUM(s.amount) as total_spent FROM customers c LEFT JOIN sales s ON c.customer_id = s.customer_id GROUP BY c.customer_id, c.customer_name, c.join_date) SELECT * FROM customer_spending ORDER BY total_spent DESC LIMIT 5",SQL,advanced,"['Data Analyst', 'Data Engineer', 'Aggregate Functions', 'Join', 'CTE']","WITH customer_spending AS (SELECT c.customer_id, c.customer_name, c.join_date, SUM(s.amount) as total_spent FROM customers c LEFT JOIN sales s ON c.customer_id = s.customer_id GROUP BY c.customer_id, c.customer_name, c.join_date) SELECT * FROM customer_spending ORDER BY total_spent DESC LIMIT 5",Not Available,This query uses a Common Table Expression (CTE) to calculate total spending for each customer by joining the sales and customers tables. It then selects the top 5 customers sorted by their total spend,"Candidates might forget to use `GROUP BY`, resulting in an error, or they may not correctly apply the `JOIN` condition which can lead to incorrect results. Additionally, they may overlook the `LIMIT` clause"
419,"Consider a database containing two tables: 'orders' and 'customers'. The 'orders' table has columns: 'order_id', 'customer_id', 'order_total', and 'order_date'. The 'customers' table has columns: 'customer_id', 'customer_name', and 'signup_date'. Write an SQL query to find the top 3 customers who have spent the most in total while only considering those who signed up after January 1, 2020. The result should include the 'customer_name' and their 'total_spent'","WITH customer_spending AS (SELECT c.customer_name, SUM(o.order_total) AS total_spent FROM customers c JOIN orders o ON c.customer_id = o.customer_id WHERE c.signup_date > '2020-01-01' GROUP BY c.customer_name) SELECT customer_name, total_spent FROM customer_spending ORDER BY total_spent DESC LIMIT 3",SQL,unknown,Intermediate,"['Join', 'Aggregate function', 'CTE', 'Data Analyst']","SELECT customer_name, total_spent FROM customer_spending ORDER BY total_spent DESC LIMIT 3",Not Available,"The SQL code uses a Common Table Expression (CTE) to first aggregate the total spending for each customer who signed up after a specific date. It then selects the top 3 customers based on the total amount spent, sorted in descending order"
420,"You are given two tables: 'employees' (employee_id, department_id, salary) and 'departments' (department_id, department_name). Write a query to find the average salary of each department, along with the department name, where the average salary is greater than $70,000","SELECT d.department_name, AVG(e.salary) AS average_salary FROM employees e JOIN departments d ON e.department_id = d.department_id GROUP BY d.department_name HAVING AVG(e.salary) > 70000",SQL,unknown,Intermediate,"[Join, Aggregate function, Data Analysis]","SELECT d.department_name, AVG(e.salary) AS average_salary FROM employees e JOIN departments d ON e.department_id = d.department_id GROUP BY d.department_name HAVING AVG(e.salary) > 70000",Not Available,"This query joins the 'employees' table with the 'departments' table on the 'department_id', calculates the average salary for each department, and filters for departments where the average salary exceeds $70,000"
421,"Given a sales database with a table 'orders' (columns: order_id, customer_id, order_date, total_amount) and a table 'customers' (columns: customer_id, customer_name, signup_date), write a SQL query to find the top 3 customers who have spent the most money in total since signing up, along with their total spent amount and the number of orders they placed","WITH customer_spend AS (SELECT c.customer_id, c.customer_name, SUM(o.total_amount) AS total_spent, COUNT(o.order_id) AS order_count FROM customers c JOIN orders o ON c.customer_id = o.customer_id WHERE o.order_date >= c.signup_date GROUP BY c.customer_id, c.customer_name) SELECT customer_id, customer_name, total_spent, order_count FROM customer_spend ORDER BY total_spent DESC LIMIT 3",SQL,unknown,Advanced,"[""Data Analyst"", ""SQL"", ""Aggregate function"", ""Join"", ""CTE""]",Not Available,"This query uses a Common Table Expression (CTE) to aggregate the total spending and order count for each customer since their sign-up date, then sorts the results to find the top 3 customers based on total spending",Candidates might forget to include the signup date condition in the WHERE clause or misorder the results leading to incorrect customer selection
422,"Given a database of sales transactions with tables 'sales' (columns: id, product_id, sale_amount, sale_date) and 'products' (columns: id, product_name, category), write a SQL query to find the total sales amount for each product category in the year 2022, along with the average sale amount per sale for each category. Order the result by total sales amount in descending order","WITH category_sales AS (SELECT p.category, SUM(s.sale_amount) AS total_sales, AVG(s.sale_amount) AS avg_sale_amount FROM sales s JOIN products p ON s.product_id = p.id WHERE YEAR(s.sale_date) = 2022 GROUP BY p.category) SELECT category, total_sales, avg_sale_amount FROM category_sales ORDER BY total_sales DESC",SQL,unknown,Intermediate,"[""Aggregate function"", ""Join"", ""Data Analysis""]",Not Available,This query first creates a Common Table Expression (CTE) named 'category_sales' that calculates both the total and average sales amount for each product category in 2022 by joining the 'sales' and 'products' tables. It then selects the required fields from the CTE and orders the result,"Common mistakes include: not filtering for the year 2022 correctly, forgetting to group by the category, or misusing aggregate functions"
423,"You are given two tables: `orders` and `customers`. The `orders` table contains the columns `order_id`, `customer_id`, `order_date`, and `amount`. The `customers` table includes `customer_id`, `customer_name`, and `signup_date`. Write a query to find the top 5 customers who spent the most in the last month and their total spent amount. Display the customer name and total spent amount","WITH last_month_orders AS ( SELECT customer_id, SUM(amount) AS total_spent FROM orders WHERE order_date >= DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '1 month' AND order_date < DATE_TRUNC('month', CURRENT_DATE) GROUP BY customer_id ) SELECT c.customer_name, lmo.total_spent FROM last_month_orders lmo JOIN customers c ON lmo.customer_id = c.customer_id ORDER BY lmo.total_spent DESC LIMIT 5",SQL,unknown,Intermediate,"[""Data Analyst"", ""Business Intelligence"", ""JOIN"", ""Aggregate function""]",Not Available,This query uses a Common Table Expression (CTE) to first calculate the total spent by each customer in the last month and then joins that result with the customers table to get the corresponding customer names. The final result is ordered by total spent in descending order and limited to the top 5 customers,"Candidates might forget to filter the order dates correctly for the last month or might use incorrect date functions depending on the SQL dialect. Additionally, they might neglect the join condition or the LIMIT clause"
424,"Assuming you have two tables: `employees` (id, name, department_id, salary) and `departments` (id, department_name), write a query to find the average salary of employees in each department, and include department names in the results. Additionally, filter out departments with an average salary below $60,000","SELECT d.department_name, AVG(e.salary) AS average_salary FROM employees e JOIN departments d ON e.department_id = d.id GROUP BY d.department_name HAVING AVG(e.salary) >= 60000",SQL,unknown,Intermediate,"['Data Analyst', 'Data Engineer', 'Join', 'Aggregate Function']","SELECT d.department_name, AVG(e.salary) AS average_salary FROM employees e JOIN departments d ON e.department_id = d.id GROUP BY d.department_name HAVING AVG(e.salary) >= 60000",Not Available,"This query joins the `employees` table with the `departments` table to calculate the average salary per department and filters out any department with an average salary below $60,000"
425,"You are given a table called 'sales' with columns 'id', 'product_id', 'customer_id', 'amount', and 'sale_date'. Another table 'products' has 'id', 'name', and 'category'. Write a SQL query to find the total sales amount for each product category in 2023, and display the category name along with the total sales amount, sorted by total sales in descending order. You can assume the 'amount' is in dollars","SELECT p.category, SUM(s.amount) AS total_sales FROM sales s JOIN products p ON s.product_id = p.id WHERE YEAR(s.sale_date) = 2023 GROUP BY p.category ORDER BY total_sales DESC",SQL,unknown,Intermediate,"Join, Aggregate Function, Group By","SELECT p.category, SUM(s.amount) AS total_sales FROM sales s JOIN products p ON s.product_id = p.id WHERE YEAR(s.sale_date) = 2023 GROUP BY p.category ORDER BY total_sales DESC",Not Available,"This query joins the 'sales' and 'products' tables on the product_id and id columns, filters for sales that occurred in 2023, groups the results by product category, and calculates the total sales amount for each category. It then orders the result by total sales in descending order"
426,"Given a sales table that records sales transactions (sales_id, product_id, customer_id, quantity_sold, sale_date) and a products table that includes product information (product_id, product_name, category), write a SQL query to find the total quantity sold for each product in a specific category during the last quarter","WITH last_quarter AS ( SELECT product_id, SUM(quantity_sold) AS total_quantity FROM sales WHERE sale_date >= DATEADD(quarter, -1, GETDATE()) GROUP BY product_id ) SELECT p.product_name, lq.total_quantity FROM last_quarter lq JOIN products p ON lq.product_id = p.product_id WHERE p.category = 'specified_category'",SQL,unknown,Intermediate,"Data Analyst, SQL, Aggregate Function, CTE","WITH last_quarter AS ( SELECT product_id, SUM(quantity_sold) AS total_quantity FROM sales WHERE sale_date >= DATEADD(quarter, -1, GETDATE()) GROUP BY product_id ) SELECT p.product_name, lq.total_quantity FROM last_quarter lq JOIN products p ON lq.product_id = p.product_id WHERE p.category = 'specified_category'",Not Available,This query uses a Common Table Expression (CTE) to calculate the total quantity sold in the last quarter for each product and then joins it with the products table to retrieve product names for a specified category
427,"You have two tables: `employees` (with columns `id`, `name`, and `manager_id`) and `sales` (with columns `employee_id`, `sale_amount`, and `sale_date`). Write a SQL query to find the total sales made by each manager based on their team's sales over the past month. Return the manager's name and total sales, sorted in descending order of total sales","WITH MonthlySales AS (SELECT e.manager_id, SUM(s.sale_amount) AS total_sales FROM sales s JOIN employees e ON s.employee_id = e.id WHERE s.sale_date >= DATEADD(month, -1, GETDATE()) GROUP BY e.manager_id) SELECT e.name AS manager_name, COALESCE(ms.total_sales, 0) AS total_sales FROM employees e LEFT JOIN MonthlySales ms ON e.id = ms.manager_id WHERE e.manager_id IS NULL ORDER BY total_sales DESC",SQL,unknown,Advanced,"[""Data Analyst"", ""Data Engineer"", ""Aggregate function"", ""Join"", ""CTE""]",Not Available,"This query calculates the total sales for each manager by first creating a Common Table Expression (CTE) that sums up the sales for employees reporting to each manager in the last month, and then joins this data with the employees table to return manager names across the organization","A common mistake is forgetting to check the date range, leading to incorrect totals, or using INNER JOIN rather than LEFT JOIN, which would exclude managers without any employees"
428,"You are given two tables: `employees` and `departments`. The `employees` table contains the following columns: `id`, `name`, `department_id`, and `salary`. The `departments` table contains `id` and `department_name`. Write an SQL query to find the department with the highest average salary of its employees. Display the department name and the average salary","SELECT d.department_name, AVG(e.salary) AS average_salary FROM employees e JOIN departments d ON e.department_id = d.id GROUP BY d.department_name ORDER BY average_salary DESC LIMIT 1",SQL,intermediate,"Data Analyst, Join, Aggregate function","SELECT d.department_name, AVG(e.salary) AS average_salary FROM employees e JOIN departments d ON e.department_id = d.id GROUP BY d.department_name ORDER BY average_salary DESC LIMIT 1",Not Available,"This query joins the `employees` and `departments` tables on their IDs, aggregates employee salaries by department, and orders the results by average salary in descending order to find the highest","Candidates might forget to use GROUP BY properly, leading to errors or incorrect results, or they may not sort the results to determine the highest average correctly"
429,"Given a sales database with two tables: 'sales' (columns: sale_id, product_id, quantity, sale_date) and 'products' (columns: product_id, product_name, price), write a SQL query to find the total revenue generated for each product in the year 2022. Sort the results by total revenue in descending order","SELECT p.product_name, SUM(s.quantity * p.price) AS total_revenue FROM sales s JOIN products p ON s.product_id = p.product_id WHERE YEAR(s.sale_date) = 2022 GROUP BY p.product_name ORDER BY total_revenue DESC",SQL,unknown,Intermediate,"Data Analyst, SQL, Join, Aggregate function","SELECT p.product_name, SUM(s.quantity * p.price) AS total_revenue FROM sales s JOIN products p ON s.product_id = p.product_id WHERE YEAR(s.sale_date) = 2022 GROUP BY p.product_name ORDER BY total_revenue DESC",Not Available,"This SQL query joins the 'sales' and 'products' tables on the 'product_id' column, then calculates total revenue by multiplying quantity sold by the product price for sales that occurred in 2022, grouping the result by product name and ordering by total revenue"
430,"You have two tables: 'employees' (with columns 'id', 'name', 'department_id', 'salary') and 'departments' (with columns 'id', 'department_name'). Write a SQL query to find the average salary of employees in each department, along with the department name, but only include departments where the average salary is greater than 60,000","SELECT d.department_name, AVG(e.salary) as average_salary  FROM employees e JOIN departments d ON e.department_id = d.id GROUP BY d.department_name HAVING AVG(e.salary) > 60000",SQL,unknown,Intermediate,"Join, Aggregate function, Group By","SELECT d.department_name, AVG(e.salary) as average_salary  FROM employees e JOIN departments d ON e.department_id = d.id GROUP BY d.department_name HAVING AVG(e.salary) > 60000",Not Available,"The SQL query joins the two tables 'employees' and 'departments' on 'department_id' and 'id', groups the results by department name, calculates the average salary using AVG(), and filters the groups to return only those with an average salary above 60,000"
431,"You have a sales database with the following tables: `orders` (order_id, customer_id, order_date), `customers` (customer_id, customer_name, signup_date), and `order_items` (order_item_id, order_id, product_id, quantity, price). Write a query to find the top 5 customers by total sales amount for the year 2022, including their total sales and the number of orders placed","WITH CustomerSales AS (SELECT c.customer_id, c.customer_name, COUNT(o.order_id) AS order_count, SUM(oi.quantity * oi.price) AS total_sales FROM customers c JOIN orders o ON c.customer_id = o.customer_id JOIN order_items oi ON o.order_id = oi.order_id WHERE o.order_date BETWEEN '2022-01-01' AND '2022-12-31' GROUP BY c.customer_id, c.customer_name) SELECT customer_id, customer_name, total_sales, order_count FROM CustomerSales ORDER BY total_sales DESC LIMIT 5",SQL,intermediate,"Data Analyst, Aggregate Function, Join, SQL","WITH CustomerSales AS (SELECT c.customer_id, c.customer_name, COUNT(o.order_id) AS order_count, SUM(oi.quantity * oi.price) AS total_sales FROM customers c JOIN orders o ON c.customer_id = o.customer_id JOIN order_items oi ON o.order_id = oi.order_id WHERE o.order_date BETWEEN '2022-01-01' AND '2022-12-31' GROUP BY c.customer_id, c.customer_name) SELECT customer_id, customer_name, total_sales, order_count FROM CustomerSales ORDER BY total_sales DESC LIMIT 5","The query calculates the total sales and the number of orders per customer for the year 2022, using a Common Table Expression (CTE) called CustomerSales to first aggregate data, then selects from CTE to return the top 5 customers based on total sales",Candidates might forget to include the necessary joins or may use incorrect date formats. They may also neglect to group the results correctly,What would change in your query if you wanted to include customers who made no purchases in 2022?
432,"You are working for an e-commerce company and are tasked with analyzing customer purchases. Your database contains two tables: `customers` (with columns `customer_id`, `customer_name`, `signup_date`) and `orders` (with columns `order_id`, `customer_id`, `order_date`, `total_amount`). Write a SQL query to find the total purchase amount for each customer, along with their signup date, and identify customers who have spent more than $1,000, ordered in descending order of their total amount","SELECT c.customer_id, c.customer_name, c.signup_date, SUM(o.total_amount) AS total_spent FROM customers c JOIN orders o ON c.customer_id = o.customer_id GROUP BY c.customer_id, c.customer_name, c.signup_date HAVING SUM(o.total_amount) > 1000 ORDER BY total_spent DESC",SQL,unknown,Intermediate,"Data Analyst, Join, Aggregate function","SELECT c.customer_id, c.customer_name, c.signup_date, SUM(o.total_amount) AS total_spent FROM customers c JOIN orders o ON c.customer_id = o.customer_id GROUP BY c.customer_id, c.customer_name, c.signup_date HAVING SUM(o.total_amount) > 1000 ORDER BY total_spent DESC",Not Available,"This query joins the `customers` and `orders` tables to calculate the total spending for each customer. It groups the results by customer details and filters to include only those who have spent over $1,000, ordering the final results by total spending in descending order"
433,"Given a sales database with tables 'sales' (containing 'sale_id', 'product_id', 'amount', 'sale_date') and 'products' (containing 'product_id', 'category', 'price'), write a SQL query to find the total sales amount and total number of sales for each product category for the last quarter. Sort the results by total sales amount in descending order","SELECT p.category, SUM(s.amount) AS total_sales_amount, COUNT(s.sale_id) AS total_sales_count FROM sales s JOIN products p ON s.product_id = p.product_id WHERE s.sale_date >= DATEADD(QUARTER, -1, GETDATE()) GROUP BY p.category ORDER BY total_sales_amount DESC",SQL,unknown,Intermediate,"Data Analyst, Join, Aggregate Function","SELECT p.category, SUM(s.amount) AS total_sales_amount, COUNT(s.sale_id) AS total_sales_count FROM sales s JOIN products p ON s.product_id = p.product_id WHERE s.sale_date >= DATEADD(QUARTER, -1, GETDATE()) GROUP BY p.category ORDER BY total_sales_amount DESC",Not Available,"This query joins the 'sales' and 'products' tables to aggregate sales data by product category for the last quarter, calculating the total sales amount and count"
434,"You are given two tables: `employees (id, name, department_id, salary)` and `departments (id, department_name)`. Write a SQL query to find the average salary of employees in each department, including departments that have no employees","SELECT d.department_name, COALESCE(AVG(e.salary), 0) AS average_salary FROM departments d LEFT JOIN employees e ON d.id = e.department_id GROUP BY d.department_name",SQL,unknown,Intermediate,"Data Analyst, SQL, Join, Aggregate function","SELECT d.department_name, COALESCE(AVG(e.salary), 0) AS average_salary FROM departments d LEFT JOIN employees e ON d.id = e.department_id GROUP BY d.department_name",Not Available,"This SQL query uses a LEFT JOIN between departments and employees to ensure that all departments are included in the result, even if they have no employees. The `COALESCE` function is used to return a 0 average salary for departments without employees, and `AVG(e.salary)` is used to calculate the average salary per department"
435,"Given a sales database with tables named `Orders` and `Customers`, where `Orders` contains `OrderID`, `OrderDate`, `CustomerID`, and `TotalAmount`, and `Customers` contains `CustomerID`, `CustomerName`, and `Region`, write a SQL query to find the total sales amount per region for the year 2023. The results should be sorted by total sales amount in descending order","WITH RegionSales AS (SELECT c.Region, SUM(o.TotalAmount) AS TotalSales FROM Orders o JOIN Customers c ON o.CustomerID = c.CustomerID WHERE YEAR(o.OrderDate) = 2023 GROUP BY c.Region) SELECT Region, TotalSales FROM RegionSales ORDER BY TotalSales DESC",SQL,unknown,Intermediate,"[""SQL"",""Join"",""Aggregate function"",""CTE""]",Not Available,This query first creates a Common Table Expression (CTE) to calculate total sales per region for orders made in 2023 by joining the `Orders` and `Customers` tables. It then selects and sorts the results based on total sales amount,"Common mistakes include forgetting to filter by the correct year, not grouping by region, or misunderstanding the join condition and using incorrect table aliases"
436,"You are provided with two tables: `employees` and `departments`. The `employees` table contains columns `employee_id`, `name`, `department_id`, and `salary`. The `departments` table contains `department_id` and `department_name`. Write a SQL query to find the average salary of employees in each department, but only include departments that have employees with a salary greater than $50,000. The result should display the `department_name` and the `average_salary` ordered by `average_salary` in descending order","WITH department_salaries AS ( SELECT d.department_name, AVG(e.salary) AS average_salary FROM departments d JOIN employees e ON d.department_id = e.department_id WHERE e.salary > 50000 GROUP BY d.department_name) SELECT department_name, average_salary FROM department_salaries ORDER BY average_salary DESC",SQL,unknown,Intermediate,"Data Analyst, SQL, Aggregate Function, Join, CTE","SELECT department_name, AVG(salary) AS average_salary FROM employees JOIN departments ON employees.department_id = departments.department_id WHERE employees.salary > 50000 GROUP BY department_name ORDER BY average_salary DESC",Not Available,"This SQL query uses a Common Table Expression (CTE) to calculate the average salary of employees grouped by department. It filters out any employees earning less than $50,000 and finally orders the resulting departments by their average salaries in descending order"
437,"Consider the following two tables: `employees` (employee_id, name, department_id, salary) and `departments` (department_id, department_name). Write a SQL query to find the average salary of employees in each department, including departments with no employees. The result should display the department name and the average salary. If a department has no employees, the average salary should be null","SELECT d.department_name, AVG(e.salary) AS average_salary FROM departments d LEFT JOIN employees e ON d.department_id = e.department_id GROUP BY d.department_name",SQL,unknown,Intermediate,"Data Analyst, Aggregate function, Join","SELECT d.department_name, AVG(e.salary) AS average_salary FROM departments d LEFT JOIN employees e ON d.department_id = e.department_id GROUP BY d.department_name",Not Available,"This SQL query uses a LEFT JOIN to include all departments regardless of whether they have employees, and it calculates the average salary using the AVG() function grouped by department name"
438,"Given a sales table that includes the columns: sale_id, customer_id, product_id, sale_date, and sale_amount, write a SQL query to find the total sales amount for each customer and the rank of each customer based on their total sales amount. Customers with the same total should receive the same rank. Sort the result by total sales amount in descending order","WITH CustomerSales AS ( SELECT customer_id, SUM(sale_amount) AS total_sales FROM sales GROUP BY customer_id ), RankedCustomers AS ( SELECT customer_id, total_sales, RANK() OVER (ORDER BY total_sales DESC) AS sales_rank FROM CustomerSales ) SELECT customer_id, total_sales, sales_rank FROM RankedCustomers",SQL,unknown,Intermediate,"[""Data Analyst"", ""Business Intelligence"", ""Aggregate function"", ""Window function""]",Not Available,"The query first calculates the total sales for each customer in the CTE (Common Table Expression) called CustomerSales. It then ranks these total sales using the RANK() window function in the RankedCustomers CTE, ordering the results according to total sales amount in descending order. Finally, it selects the customer_id, total_sales, and sales_rank from the RankedCustomers CTE","Candidates might forget to use the ORDER BY clause correctly in the RANK() function, or they may misplace the GROUP BY clause, causing errors in aggregation"
439,"You are given two tables: 'employees' which has columns 'employee_id', 'name', and 'department_id', and 'departments' which has 'department_id' and 'budget'. Write a SQL query to find the total budget allocated for departments that have employees earning more than $50,000. Additionally, show the department name alongside the total budget","SELECT d.department_id, SUM(d.budget) as total_budget 
FROM employees e 
JOIN departments d ON e.department_id = d.department_id 
WHERE e.salary > 50000 
GROUP BY d.department_id",SQL,unknown,Intermediate,"Data Analyst, Aggregate Function, Join","SELECT d.department_id, SUM(d.budget) as total_budget 
FROM employees e 
JOIN departments d ON e.department_id = d.department_id 
WHERE e.salary > 50000 
GROUP BY d.department_id",Not Available,"This query joins the 'employees' and 'departments' tables based on 'department_id', filters for employees earning over $50,000, and aggregates the budget for each qualifying department"
440,"Given two tables, Employees (EmployeeID, Name, DepartmentID, Salary) and Departments (DepartmentID, DepartmentName), write a SQL query to find the average salary of employees for each department and return the results with DepartmentName and average Salary. Make sure to filter out departments with no employees","SELECT d.DepartmentName, AVG(e.Salary) AS AverageSalary FROM Departments d LEFT JOIN Employees e ON d.DepartmentID = e.DepartmentID GROUP BY d.DepartmentName HAVING COUNT(e.EmployeeID) > 0",SQL,unknown,Intermediate,"Data Analyst, Aggregate Function, Join","SELECT d.DepartmentName, AVG(e.Salary) AS AverageSalary FROM Departments d LEFT JOIN Employees e ON d.DepartmentID = e.DepartmentID GROUP BY d.DepartmentName HAVING COUNT(e.EmployeeID) > 0",Not Available,"This query performs a LEFT JOIN between the Departments and Employees tables to ensure all departments are included, calculates the average salary, groups the results by department name, and filters out departments with no employees using HAVING"
441,"You have two tables - 'orders' (order_id, customer_id, order_date, total_amount) and 'customers' (customer_id, customer_name, join_date). Write a SQL query to find out the total amount spent by each customer since they joined, showing the customer name, join date, and total spent, ordered by total spent descending","SELECT c.customer_name, c.join_date, SUM(o.total_amount) AS total_spent FROM customers c JOIN orders o ON c.customer_id = o.customer_id WHERE o.order_date >= c.join_date GROUP BY c.customer_name, c.join_date ORDER BY total_spent DESC",SQL,unknown,Intermediate,"Data Analyst, Join, Aggregate function","SELECT c.customer_name, c.join_date, SUM(o.total_amount) AS total_spent FROM customers c JOIN orders o ON c.customer_id = o.customer_id WHERE o.order_date >= c.join_date GROUP BY c.customer_name, c.join_date ORDER BY total_spent DESC",Not Available,"This query joins the 'customers' and 'orders' tables on the customer_id, sums up the total_amount for each customer, filters the orders to only include those placed after their join_date, and then orders the result by the total amount spent in descending order"
442,"You are working with two tables: 'Sales' and 'Products'. The 'Sales' table contains sales transactions with the columns: SaleID, ProductID, Quantity, and SaleDate. The 'Products' table contains ProductID, ProductName, and Price. Write a SQL query to find the total revenue generated from each product sold in the year 2023. Sort the results by revenue in descending order","SELECT p.ProductName, SUM(s.Quantity * p.Price) AS TotalRevenue FROM Sales s JOIN Products p ON s.ProductID = p.ProductID WHERE YEAR(s.SaleDate) = 2023 GROUP BY p.ProductName ORDER BY TotalRevenue DESC",SQL,unknown,Intermediate,"['Join', 'Aggregate Function', 'Data Analysis']","SELECT p.ProductName, SUM(s.Quantity * p.Price) AS TotalRevenue FROM Sales s JOIN Products p ON s.ProductID = p.ProductID WHERE YEAR(s.SaleDate) = 2023 GROUP BY p.ProductName ORDER BY TotalRevenue DESC",Not Available,"This query joins the Sales and Products tables, calculates the total revenue by multiplying quantity sold by the price for products sold in 2023, groups the results by product names, and orders them by total revenue in descending order"
443,"Given a sales data table with columns `order_id`, `customer_id`, `order_amount`, and `order_date`, write a query to find the top 3 customers who have spent the most in total on orders in the last year, along with their total spending","WITH CustomerSpending AS (SELECT customer_id, SUM(order_amount) AS total_spent FROM sales WHERE order_date >= DATEADD(year, -1, GETDATE()) GROUP BY customer_id) SELECT TOP 3 customer_id, total_spent FROM CustomerSpending ORDER BY total_spent DESC",SQL,unknown,Intermediate,"Data Analyst, Aggregate function, CTE","WITH CustomerSpending AS (SELECT customer_id, SUM(order_amount) AS total_spent FROM sales WHERE order_date >= DATEADD(year, -1, GETDATE()) GROUP BY customer_id) SELECT TOP 3 customer_id, total_spent FROM CustomerSpending ORDER BY total_spent DESC",Not Available,This query uses a Common Table Expression (CTE) to first calculate the total spending for each customer over the last year and then selects the top 3 highest spenders based on those total amounts
444,"You are given two tables: 'employees' (with columns 'id', 'name', 'manager_id') and 'sales' (with columns 'employee_id', 'amount', 'sale_date'). Write a SQL query to find the total sales amount for each manager, including the names of each manager. Only include managers who have at least one direct report","SELECT e.name AS manager_name, SUM(s.amount) AS total_sales FROM employees e JOIN employees m ON e.manager_id = m.id JOIN sales s ON e.id = s.employee_id GROUP BY e.name HAVING COUNT(e.id) > 0",SQL,unknown,Intermediate,"[""Join"", ""Aggregation"", ""Group By"", ""Data Analysis""]","SELECT e.name AS manager_name, SUM(s.amount) AS total_sales FROM employees e JOIN employees m ON e.manager_id = m.id JOIN sales s ON e.id = s.employee_id GROUP BY e.name HAVING COUNT(e.id) > 0",Not Available,"This query joins the employees table with itself to get manager information from the same table, joins it with sales to get sales data, and aggregates it to calculate total sales by each manager who has direct reports"
445,"Consider a sales database with three tables: `Customers` (CustomerID, CustomerName), `Orders` (OrderID, CustomerID, OrderDate, TotalAmount), and `OrderItems` (OrderItemID, OrderID, ProductID, Quantity, UnitPrice). Write a SQL query that retrieves the top 5 customers by total revenue generated, along with their names and total revenue","SELECT c.CustomerName, SUM(o.TotalAmount) AS TotalRevenue FROM Customers c JOIN Orders o ON c.CustomerID = o.CustomerID GROUP BY c.CustomerName ORDER BY TotalRevenue DESC LIMIT 5",SQL,intermediate,"[""""Data Analyst"""", """"Business Intelligence"""", """"Join"""", """"Aggregate function""""]","SELECT c.CustomerName, SUM(o.TotalAmount) AS TotalRevenue FROM Customers c JOIN Orders o ON c.CustomerID = o.CustomerID GROUP BY c.CustomerName ORDER BY TotalRevenue DESC LIMIT 5",Not Available,"This SQL query retrieves the names of the top 5 customers with the highest total revenue by joining the `Customers` and `Orders` tables, grouping the results by customer name and ordering them by the sum of total amounts in descending order","Common mistakes include forgetting to use the `GROUP BY` clause correctly, not including the `ORDER BY` clause, or using the wrong aggregation function. Additionally, candidates might overlook the `LIMIT` clause, resulting in more than five customers being displayed"
446,"You are analyzing an e-commerce database containing two tables: `orders` (with columns `order_id`, `customer_id`, `order_date`, `total_amount`) and `customers` (with columns `customer_id`, `customer_name`, `membership_level`). Write a SQL query to report the total amount spent by each customer, their membership level, and the date of their last order. The results should be sorted by the total amount spent in descending order. Include only customers who have placed orders","WITH customer_totals AS ( SELECT c.customer_id, c.customer_name, c.membership_level, SUM(o.total_amount) AS total_spent, MAX(o.order_date) AS last_order_date FROM customers c JOIN orders o ON c.customer_id = o.customer_id GROUP BY c.customer_id, c.customer_name, c.membership_level ) SELECT customer_name, membership_level, total_spent, last_order_date FROM customer_totals ORDER BY total_spent DESC",SQL,unknown,Advanced,"Data Analyst, SQL, Aggregate function, CTE, Join","WITH customer_totals AS ( SELECT c.customer_id, c.customer_name, c.membership_level, SUM(o.total_amount) AS total_spent, MAX(o.order_date) AS last_order_date FROM customers c JOIN orders o ON c.customer_id = o.customer_id GROUP BY c.customer_id, c.customer_name, c.membership_level ) SELECT customer_name, membership_level, total_spent, last_order_date FROM customer_totals ORDER BY total_spent DESC",Not Available,This query first creates a Common Table Expression (CTE) named `customer_totals` to aggregate the total amount spent and the latest order date for each customer. It then selects necessary fields from the CTE and orders the results based on the total amount spent
447,"You are working with two tables: 'Sales' (containing columns: SaleID, ProductID, SaleDate, Amount) and 'Products' (containing columns: ProductID, ProductName, Category). Write a SQL query to find the total sales amount for each product in the month of January 2023, along with the product name and category. The result should be ordered by total sales amount in descending order","WITH MonthlySales AS ( SELECT p.ProductID, p.ProductName, p.Category, SUM(s.Amount) AS TotalSales FROM Sales s JOIN Products p ON s.ProductID = p.ProductID WHERE s.SaleDate BETWEEN '2023-01-01' AND '2023-01-31' GROUP BY p.ProductID, p.ProductName, p.Category ) SELECT * FROM MonthlySales ORDER BY TotalSales DESC",SQL,unknown,Intermediate,"['Join', 'Aggregate function', 'CTE']","SELECT p.ProductName, SUM(s.Amount) AS TotalSales FROM Sales s JOIN Products p ON s.ProductID = p.ProductID WHERE s.SaleDate BETWEEN '2023-01-01' AND '2023-01-31' GROUP BY p.ProductName ORDER BY TotalSales DESC",Not Available,"This SQL query uses a Common Table Expression (CTE) to first aggregate the sales data for the given date range, grouping by product details to calculate total sales per product. Finally, it selects all columns from the CTE and orders the results by total sales in descending order"
448,"Given a sales database with tables 'Sales' (columns: SaleID, ProductID, Quantity, SaleDate) and 'Products' (columns: ProductID, ProductName, Price), write a query to find the total revenue generated from each product for the month of June 2023, returning the product name and total revenue sorted by total revenue in descending order","WITH MonthlyRevenue AS ( SELECT p.ProductName, SUM(s.Quantity * p.Price) AS TotalRevenue FROM Sales s JOIN Products p ON s.ProductID = p.ProductID WHERE s.SaleDate >= '2023-06-01' AND s.SaleDate < '2023-07-01' GROUP BY p.ProductName ) SELECT ProductName, TotalRevenue FROM MonthlyRevenue ORDER BY TotalRevenue DESC",SQL,unknown,Intermediate,"[""Join"",""Aggregate function"",""CTE"",""Data Analyst""]",Not Available,"This query uses a Common Table Expression (CTE) to first calculate the total revenue for each product sold in June 2023 by joining the 'Sales' and 'Products' tables, then it selects the results from the CTE, ordering by revenue in descending order","Common mistakes include: forgetting to join the tables properly, not filtering the date range correctly, or miscalculating the revenue by neglecting to multiply the quantity by the price"
449,"Given two tables, `employees` (with columns `id`, `name`, `manager_id`) and `projects` (with columns `id`, `employee_id`, `project_name`, `hours_logged`), write an SQL query to find the total hours logged by each employee for each project, along with their manager's name. Ensure to include all employees, even those who may not have logged any hours for certain projects","WITH EmployeeProjects AS (SELECT e.name AS employee_name, p.project_name, COALESCE(SUM(p.hours_logged), 0) AS total_hours FROM employees e LEFT JOIN projects p ON e.id = p.employee_id GROUP BY e.name, p.project_name), Managers AS (SELECT e.name AS manager_name, e2.name AS employee_name FROM employees e JOIN employees e2 ON e.manager_id = e2.id) SELECT ep.employee_name, ep.project_name, ep.total_hours, m.manager_name FROM EmployeeProjects ep LEFT JOIN Managers m ON ep.employee_name = m.employee_name ORDER BY ep.employee_name, ep.project_name",SQL,unknown,Advanced,"Data Analyst, Data Engineer","CTE, SQL, Join, Aggregate function","WITH EmployeeProjects AS (SELECT e.name AS employee_name, p.project_name, COALESCE(SUM(p.hours_logged), 0) AS total_hours FROM employees e LEFT JOIN projects p ON e.id = p.employee_id GROUP BY e.name, p.project_name), Managers AS (SELECT e.name AS manager_name, e2.name AS employee_name FROM employees e JOIN employees e2 ON e.manager_id = e2.id) SELECT ep.employee_name, ep.project_name, ep.total_hours, m.manager_name FROM EmployeeProjects ep LEFT JOIN Managers m ON ep.employee_name = m.employee_name ORDER BY ep.employee_name, ep.project_name",Not Available
450,"Given two tables, `employees` (id, name, department_id, salary) and `departments` (id, department_name), write a SQL query to find the average salary of employees in each department, and return the department name along with the average salary. Order the results by average salary in descending order","SELECT d.department_name, AVG(e.salary) AS average_salary FROM employees e JOIN departments d ON e.department_id = d.id GROUP BY d.department_name ORDER BY average_salary DESC",SQL,intermediate,"Data Analyst, Aggregate function, Join","example_query: SELECT d.department_name, AVG(e.salary) AS average_salary FROM employees e JOIN departments d ON e.department_id = d.id GROUP BY d.department_name ORDER BY average_salary DESC",Not Available,"This query uses a JOIN to combine the `employees` and `departments` tables based on the department_id, calculates the average salary using the AVG function, groups the results by department, and orders them by the average salary in descending order","Common mistakes include forgetting to use GROUP BY for aggregation, incorrectly joining the tables, or misusing the AVG function"
451,"Consider a retail database with tables `Orders`, `Customers`, and `Order_Items`. Each order can have multiple items, and you need to find the total amount spent by each customer in the last year, along with their number of orders. Write a SQL query to retrieve this information","WITH CustomerOrderSummary AS (SELECT c.CustomerID, COUNT(o.OrderID) AS NumberOfOrders, SUM(oi.Quantity * oi.UnitPrice) AS TotalSpent FROM Customers c JOIN Orders o ON c.CustomerID = o.CustomerID JOIN Order_Items oi ON o.OrderID = oi.OrderID WHERE o.OrderDate >= DATEADD(YEAR, -1, GETDATE()) GROUP BY c.CustomerID) SELECT c.CustomerID, c.Name, cos.TotalSpent, cos.NumberOfOrders FROM Customers c JOIN CustomerOrderSummary cos ON c.CustomerID = cos.CustomerID",SQL,unknown,Intermediate,"[""Data Analyst"", ""Data Engineer"", ""Join"", ""Aggregate Function""]",Not Available,The provided SQL code uses a Common Table Expression (CTE) to first aggregate the total spending and number of orders for each customer over the past year. It then selects from the `Customers` table to retrieve customer names alongside their respective spending and orders,"Candidates might forget to filter by order date, resulting in incorrect totals. They may also not account for orders made by customers who haven't ordered in the last year"
452,"You have two tables: `sales` and `products`. The `sales` table contains the following columns: `sale_id`, `product_id`, `quantity`, and `sale_date`. The `products` table contains `product_id`, `product_name`, and `price`. Write a query to find the total revenue generated from each product in the year 2022, sorted by revenue in descending order","SELECT p.product_name, SUM(s.quantity * p.price) AS total_revenue FROM sales s JOIN products p ON s.product_id = p.product_id WHERE YEAR(s.sale_date) = 2022 GROUP BY p.product_name ORDER BY total_revenue DESC",SQL,unknown,Intermediate,"Data Analyst, Data Engineer, Aggregate function, Join","SELECT p.product_name, SUM(s.quantity * p.price) AS total_revenue FROM sales s JOIN products p ON s.product_id = p.product_id WHERE YEAR(s.sale_date) = 2022 GROUP BY p.product_name ORDER BY total_revenue DESC",Not Available,"This query joins the `sales` and `products` tables on `product_id`, filters the results for the year 2022, calculates the total revenue for each product by multiplying the quantity sold by the product price, and sorts the results by total revenue in descending order"
453,"Given two tables, 'employees' and 'departments', where 'employees' has columns 'employee_id', 'name', 'department_id', and 'salary', and 'departments' has columns 'department_id' and 'department_name'. Write a query to find the average salary in each department along with the department name, and return only those departments where the average salary is greater than 50000","SELECT d.department_name, AVG(e.salary) AS average_salary FROM employees e JOIN departments d ON e.department_id = d.department_id GROUP BY d.department_name HAVING AVG(e.salary) > 50000",SQL,unknown,Intermediate,"Data Analyst, Join, Aggregate function","SELECT d.department_name, AVG(e.salary) AS average_salary FROM employees e JOIN departments d ON e.department_id = d.department_id GROUP BY d.department_name HAVING AVG(e.salary) > 50000",Not Available,"This query joins the 'employees' and 'departments' tables on 'department_id', calculates the average salary for each department, groups the results by department name, and filters to show only those with an average salary greater than 50,000"
454,"You are tasked with analyzing a sales database consisting of two tables: `sales` (with columns `sale_id`, `product_id`, `quantity`, and `sale_date`) and `products` (with columns `product_id`, `product_name`, and `price`). Write a query to find the total revenue generated from each product in the month of January 2023. Additionally, make sure to include the product name and only return products that generated revenue greater than $100. Sort the results by revenue in descending order","WITH JanuarySales AS (SELECT p.product_name, SUM(s.quantity * p.price) AS total_revenue
FROM sales s
JOIN products p ON s.product_id = p.product_id
WHERE s.sale_date >= '2023-01-01' AND s.sale_date < '2023-02-01'
GROUP BY p.product_name
HAVING total_revenue > 100
)
SELECT product_name, total_revenue
FROM JanuarySales
ORDER BY total_revenue DESC",SQL,unknown,Intermediate,"Data Analyst, Aggregation, Join","WITH JanuarySales AS (SELECT p.product_name, SUM(s.quantity * p.price) AS total_revenue FROM sales s JOIN products p ON s.product_id = p.product_id WHERE s.sale_date >= '2023-01-01' AND s.sale_date < '2023-02-01' GROUP BY p.product_name HAVING total_revenue > 100 ) SELECT product_name, total_revenue FROM JanuarySales ORDER BY total_revenue DESC",Not Available,"This SQL query uses a Common Table Expression (CTE) to first filter and aggregate sales data for January 2023, calculating total revenue for each product. It then selects only those products with revenue exceeding $100, ordered by descending revenue"
455,"You are given two tables: `employees` (with columns `id`, `name`, and `manager_id`) and `sales` (with columns `employee_id`, `sale_amount`, and `sale_date`). Write a SQL query to find the total sales made by each manager, displaying the manager's name and the total sales amount. If a manager has no sales, show their name with a total of 0 sales","SELECT e.name AS manager_name, COALESCE(SUM(s.sale_amount), 0) AS total_sales FROM employees e LEFT JOIN sales s ON e.id = s.employee_id WHERE e.manager_id IS NULL GROUP BY e.id, e.name",SQL,unknown,Intermediate,"[""Data Analyst"", ""Data Engineer"", ""Join"", ""Aggregate function""]",Not Available,"This query joins the `employees` table with the `sales` table to calculate the total sales for each manager. It uses a LEFT JOIN to ensure that managers with no sales still appear in the result with a total of 0, utilizing the COALESCE function","Candidates might forget to include COALESCE, leading to NULL values in totals for managers without sales. They might also mistakenly use INNER JOIN, which would exclude managers without sales"
456,"You are given two tables: `employees` and `departments`. The `employees` table contains columns `employee_id`, `name`, `salary`, and `department_id`. The `departments` table contains `department_id` and `department_name`. Write an SQL query to find the top 3 highest-paid employees in each department","WITH ranked_employees AS (SELECT e.name, e.salary, d.department_name, ROW_NUMBER() OVER (PARTITION BY d.department_id ORDER BY e.salary DESC) as rank FROM employees e JOIN departments d ON e.department_id = d.department_id) SELECT name, salary, department_name FROM ranked_employees WHERE rank <= 3 ORDER BY department_name, salary DESC",SQL,unknown,Advanced,"[""Data Analyst"", ""Data Engineer"", ""Business Intelligence"", ""Window Function"", ""Join""]",Not Available,"This SQL code uses a Common Table Expression (CTE) to first rank employees within their departments by salary using the ROW_NUMBER() window function. Then, it selects the employees with a rank of 3 or lower, effectively giving us the top 3 highest-paid employees from each department","Candidates often forget to use PARTITION BY in the ROW_NUMBER() function or omit the ORDER BY clause within it, which can lead to incorrect rankings. Others may not include the department_name in their final selection, losing context"
457,"Given two tables, 'employees' (employee_id, name, department_id, salary) and 'departments' (department_id, department_name), write a SQL query to find the average salary of employees in each department and display the department name alongside the result. Only include departments with an average salary greater than 50000. Sort the results by department name","SELECT d.department_name, AVG(e.salary) AS average_salary FROM employees e JOIN departments d ON e.department_id = d.department_id GROUP BY d.department_name HAVING AVG(e.salary) > 50000 ORDER BY d.department_name",SQL,unknown,Intermediate,"[""Join"",""Aggregate function"",""Data Analyst""]",Not Available,"This query joins the 'employees' and 'departments' tables on the department_id, calculates the average salary for each department, and filters the results with the HAVING clause to show only those departments with an average salary above 50000. Finally, it sorts the results by department name","Candidates may forget to include the HAVING clause, leading to incorrect results, or may not group by the department name, resulting in errors"
458,"You are working for a retail company that has two tables: `sales` and `products`. The `sales` table contains `sale_id`, `product_id`, `quantity`, and `sale_date`. The `products` table holds `product_id`, `product_name`, and `price`. Write a SQL query to find the total revenue generated from each product over the past month. The result should include the `product_name`, total revenue, and the quantity sold. Order the results by total revenue in descending order","WITH MonthlySales AS (SELECT product_id, SUM(quantity) AS total_quantity, SUM(quantity * price) AS total_revenue FROM sales s JOIN products p ON s.product_id = p.product_id WHERE s.sale_date >= DATEADD(MONTH, -1, GETDATE()) GROUP BY s.product_id) SELECT p.product_name, ms.total_quantity, ms.total_revenue FROM MonthlySales ms JOIN products p ON ms.product_id = p.product_id ORDER BY ms.total_revenue DESC",SQL,unknown,Intermediate,"[""Join"", ""Aggregate function"", ""CTE"", ""Data Analysis""]",Not Available,"This query first creates a Common Table Expression (CTE) called `MonthlySales` that aggregates the total quantity and total revenue of sales made in the past month. Then, it joins the CTE with the `products` table to get the names of the products and finally orders the result by total revenue in descending order","Candidates might forget to include the date filter in the subquery or misjoin the tables, leading to incorrect results"
459,"Given a sales database with tables 'orders' (order_id, customer_id, total_amount, order_date) and 'customers' (customer_id, name, signup_date), write a SQL query to find the top 5 customers with the highest total spending who signed up after January 1, 2020","WITH customer_spending AS (SELECT c.customer_id, c.name, SUM(o.total_amount) AS total_spent FROM customers c JOIN orders o ON c.customer_id = o.customer_id WHERE c.signup_date > '2020-01-01' GROUP BY c.customer_id, c.name) SELECT * FROM customer_spending ORDER BY total_spent DESC LIMIT 5",SQL,intermediate,"['Join', 'Aggregate function', 'Data Analysis']","SELECT c.customer_id, SUM(o.total_amount) AS total_spent FROM customers c JOIN orders o ON c.customer_id = o.customer_id GROUP BY c.customer_id",Not Available,This query uses a Common Table Expression (CTE) to first calculate the total spending for each customer who signed up after a specified date. It then selects the top 5 customers ordered by their total spending,"Candidates may forget to filter by the signup date or may not use GROUP BY correctly, leading to incorrect total calculations"
460,"Given a sales database with tables 'Sales' (containing fields 'SaleID', 'ProductID', 'CustomerID', 'SaleDate', 'Amount') and 'Customers' (containing 'CustomerID', 'CustomerName', 'Region'), write a SQL query to find the total sales amount for each customer in the 'West' region for the year 2022. The result should include 'CustomerName' and 'TotalSales'","SELECT c.CustomerName, SUM(s.Amount) AS TotalSales FROM Sales s JOIN Customers c ON s.CustomerID = c.CustomerID WHERE c.Region = 'West' AND YEAR(s.SaleDate) = 2022 GROUP BY c.CustomerName",SQL,unknown,Intermediate,"Data Analyst, Join, Aggregate function","SELECT c.CustomerName, SUM(s.Amount) AS TotalSales FROM Sales s JOIN Customers c ON s.CustomerID = c.CustomerID WHERE c.Region = 'West' AND YEAR(s.SaleDate) = 2022 GROUP BY c.CustomerName",Not Available,"This query joins the 'Sales' and 'Customers' tables on 'CustomerID', filters for customers in the 'West' region and for sales made in the year 2022, then it aggregates the sales amounts by customer"
461,"You are tasked with analyzing sales data from two tables: `sales` (with columns `sale_id`, `product_id`, `quantity`, `sale_date`, `region_id`) and `products` (with columns `product_id`, `product_name`, `price`). You need to produce a report that shows the total revenue generated from each product in each region for the month of January 2023. How would you construct your SQL query to achieve this?","SELECT p.product_name, s.region_id, SUM(s.quantity * p.price) AS total_revenue FROM sales s JOIN products p ON s.product_id = p.product_id WHERE s.sale_date BETWEEN '2023-01-01' AND '2023-01-31' GROUP BY p.product_name, s.region_id",SQL,unknown,Intermediate,"Data Analyst, SQL, Join, Aggregate function","SELECT p.product_name, s.region_id, SUM(s.quantity * p.price) AS total_revenue FROM sales s JOIN products p ON s.product_id = p.product_id WHERE s.sale_date BETWEEN '2023-01-01' AND '2023-01-31' GROUP BY p.product_name, s.region_id",Not Available,"This query joins the `sales` and `products` tables on `product_id`, filters for sales in January 2023, and calculates the total revenue by grouping results by product and region"
462,"You have a sales database with two tables: Orders (OrderID, CustomerID, OrderDate, Amount) and Customers (CustomerID, CustomerName, Country). Write an SQL query to find the total sales amount and the number of orders for each customer who has spent more than $1,000, and sort the result by the total sales amount in descending order","SELECT C.CustomerID, C.CustomerName, SUM(O.Amount) AS TotalSales, COUNT(O.OrderID) AS NumberOfOrders FROM Customers C JOIN Orders O ON C.CustomerID = O.CustomerID GROUP BY C.CustomerID, C.CustomerName HAVING SUM(O.Amount) > 1000 ORDER BY TotalSales DESC",SQL,unknown,Intermediate,"[""""Data Analyst"""", """"SQL"""", """"Join"""", """"Aggregate function""""]","SELECT C.CustomerID, C.CustomerName, SUM(O.Amount) AS TotalSales, COUNT(O.OrderID) AS NumberOfOrders FROM Customers C JOIN Orders O ON C.CustomerID = O.CustomerID GROUP BY C.CustomerID, C.CustomerName HAVING SUM(O.Amount) > 1000 ORDER BY TotalSales DESC",Not Available,"The SQL query joins the Customers and Orders tables on CustomerID, groups the results by each customer, and uses aggregation functions to calculate the total sales amount and the number of orders for customers that meet the sales threshold. Finally, it orders the results based on total sales in descending order"
463,"You have two tables: `employees` (id, name, department_id, salary) and `departments` (id, department_name). Write a SQL query to find the average salary of employees in each department and include the department name. Sort the results by the average salary in descending order","SELECT d.department_name, AVG(e.salary) AS average_salary FROM employees e JOIN departments d ON e.department_id = d.id GROUP BY d.department_name ORDER BY average_salary DESC",SQL,unknown,Intermediate,"Data Analyst, Aggregate function, Join","SELECT d.department_name, AVG(e.salary) AS average_salary FROM employees e JOIN departments d ON e.department_id = d.id GROUP BY d.department_name ORDER BY average_salary DESC",Not Available,"This query utilizes a JOIN to combine data from employees and departments, calculates the average salary for each department using the AVG() function, and sorts the results in descending order"
464,"You are given two tables: `employees` (with columns `employee_id`, `name`, `department_id`, `salary`) and `departments` (with columns `department_id`, `department_name`). Write a SQL query to find the average salary of employees in each department, showing the department name and only include departments with an average salary greater than 50000. Sort the results by average salary in descending order","SELECT d.department_name, AVG(e.salary) AS average_salary FROM employees e JOIN departments d ON e.department_id = d.department_id GROUP BY d.department_name HAVING AVG(e.salary) > 50000 ORDER BY average_salary DESC",SQL,intermediate,"[""Data Analyst"", ""Data Engineer"", ""Join"", ""Aggregate function""]","SELECT d.department_name, AVG(e.salary) AS average_salary FROM employees e JOIN departments d ON e.department_id = d.department_id GROUP BY d.department_name HAVING AVG(e.salary) > 50000 ORDER BY average_salary DESC",Not Available,"The query joins the `employees` and `departments` tables on the `department_id`, computes the average salary for each department using `AVG()` and groups the results by `department_name`. It filters the results with `HAVING` to only include departments where the average salary exceeds 50000 and sorts the output by average salary in descending order","Candidates might forget to use `HAVING` for filtering after grouping, or they may incorrectly join the tables"
465,"Imagine you have two tables: `Employees` and `Salaries`. The `Employees` table contains columns `EmployeeID`, `Name`, and `DepartmentID`, while the `Salaries` table contains `EmployeeID`, `Salary`, and `EffectiveDate`. Write a SQL query to find the highest salary in each department for the most recent effective date. Return the department ID along with the highest salary","WITH RecentSalaries AS ( SELECT EmployeeID, Salary, RANK() OVER (PARTITION BY EmployeeID ORDER BY EffectiveDate DESC) AS rnk FROM Salaries ) SELECT e.DepartmentID, MAX(rs.Salary) AS HighestSalary FROM Employees e JOIN RecentSalaries rs ON e.EmployeeID = rs.EmployeeID WHERE rs.rnk = 1 GROUP BY e.DepartmentID",SQL,unknown,Advanced,"Data Analyst, Data Engineer, Join, Aggregate Function, Window Function","WITH RecentSalaries AS ( SELECT EmployeeID, Salary, RANK() OVER (PARTITION BY EmployeeID ORDER BY EffectiveDate DESC) AS rnk FROM Salaries ) SELECT e.DepartmentID, MAX(rs.Salary) AS HighestSalary FROM Employees e JOIN RecentSalaries rs ON e.EmployeeID = rs.EmployeeID WHERE rs.rnk = 1 GROUP BY e.DepartmentID",Not Available,This query creates a common table expression (CTE) called RecentSalaries that ranks salaries for each employee by the latest effective date. It then joins this CTE with the Employees table to find the maximum salary for each department from the most recent salaries
466,"You have two tables: `Employees` (EmployeeID, Name, DepartmentID) and `Departments` (DepartmentID, DepartmentName, ManagerID). Write a SQL query to find the names of employees who work in the same department as a specific manager (for example, ManagerID = 101)",SELECT e.Name FROM Employees e JOIN Departments d ON e.DepartmentID = d.DepartmentID WHERE d.ManagerID = 101,SQL,unknown,Intermediate,"['Join', 'SQL', 'Data Analysis']",SELECT e.Name FROM Employees e JOIN Departments d ON e.DepartmentID = d.DepartmentID WHERE d.ManagerID = 101,Not Available,"This query uses an INNER JOIN to combine the `Employees` and `Departments` tables on `DepartmentID`, and then filters the results to include only those employees who work under the specified ManagerID"
467,"You are given two tables: `employees` and `departments`. The `employees` table has the columns `id`, `name`, `salary`, and `department_id`. The `departments` table has the columns `id` and `department_name`. Write a SQL query to find the highest salary in each department along with the department name. If a department has no employees, it should still be included in the result set with a salary of NULL","SELECT d.department_name, MAX(e.salary) AS highest_salary FROM departments d LEFT JOIN employees e ON d.id = e.department_id GROUP BY d.department_name",SQL,unknown,Intermediate,"[""Join"", ""Aggregate function"", ""Data Analysis""]","SELECT d.department_name, MAX(e.salary) AS highest_salary FROM departments d LEFT JOIN employees e ON d.id = e.department_id GROUP BY d.department_name",Not Available,"This SQL query uses a LEFT JOIN to combine the `departments` and `employees` tables. It aggregates the salaries using the MAX function and groups the results by the department name, ensuring departments with no employees still appear with NULL as their highest salary"
468,"Given two tables: `employees` (with columns `employee_id`, `name`, `department_id`) and `departments` (with columns `department_id`, `department_name`, `manager_id`), write a query to find the department names along with the number of employees in each department that has more than 5 employees. Sort the results by the number of employees in descending order","SELECT d.department_name, COUNT(e.employee_id) AS employee_count FROM departments d JOIN employees e ON d.department_id = e.department_id GROUP BY d.department_name HAVING COUNT(e.employee_id) > 5 ORDER BY employee_count DESC",SQL,unknown,Intermediate,"Data Analyst, SQL, Join, Aggregation","SELECT d.department_name, COUNT(e.employee_id) AS employee_count FROM departments d JOIN employees e ON d.department_id = e.department_id GROUP BY d.department_name HAVING COUNT(e.employee_id) > 5 ORDER BY employee_count DESC",Not Available,This query performs a join between the `employees` and `departments` tables to group the results by department name and count the number of employees in each department. It filters out departments with 5 or fewer employees and orders the remaining results by the employee count in descending order
469,"Given a sales database with the following tables: `Orders` (OrderID, CustomerID, OrderDate, TotalAmount) and `Customers` (CustomerID, CustomerName, SignupDate), write a query to find the total sales amount for each customer who signed up before January 1, 2022, and order the results by TotalSales descending","SELECT c.CustomerName, SUM(o.TotalAmount) AS TotalSales FROM Customers c JOIN Orders o ON c.CustomerID = o.CustomerID WHERE c.SignupDate < '2022-01-01' GROUP BY c.CustomerName ORDER BY TotalSales DESC",SQL,unknown,Intermediate,"Data Analyst, Join, Aggregate Function","SELECT c.CustomerName, SUM(o.TotalAmount) AS TotalSales FROM Customers c JOIN Orders o ON c.CustomerID = o.CustomerID WHERE c.SignupDate < '2022-01-01' GROUP BY c.CustomerName ORDER BY TotalSales DESC",Not Available,"This query joins the `Customers` and `Orders` tables, filters customers based on their signup date, sums their total sales, groups by customer name, and orders the results by total sales in descending order"
470,"You are given two tables: `employees` (with columns `id`, `name`, `department_id`, `salary`) and `departments` (with columns `id`, `department_name`). Write a SQL query to find the department with the highest average salary and list all employees in that department along with their salaries","WITH department_avg AS (SELECT d.department_name, AVG(e.salary) AS avg_salary FROM employees e JOIN departments d ON e.department_id = d.id GROUP BY d.department_name), highest_avg AS (SELECT department_name FROM department_avg ORDER BY avg_salary DESC LIMIT 1) SELECT e.name, e.salary FROM employees e JOIN departments d ON e.department_id = d.id WHERE d.department_name = (SELECT department_name FROM highest_avg)",SQL,unknown,Advanced,"[""Join"", ""Aggregate Function"", ""CTE""]","WITH department_avg AS (SELECT d.department_name, AVG(e.salary) AS avg_salary FROM employees e JOIN departments d ON e.department_id = d.id GROUP BY d.department_name), highest_avg AS (SELECT department_name FROM department_avg ORDER BY avg_salary DESC LIMIT 1) SELECT e.name, e.salary FROM employees e JOIN departments d ON e.department_id = d.id WHERE d.department_name = (SELECT department_name FROM highest_avg)",Not Available,"This SQL code uses Common Table Expressions (CTEs) to first calculate the average salary per department, determine the department with the highest average salary, and then fetch all employees from that department"
471,"Given a sales database with `sales` (with columns: `id`, `product_id`, `sale_date`, `amount`) and `products` (with columns: `id`, `name`, `category`). Write a query to find the total sales amount for each product category for the last month. Use appropriate joins and date filtering","SELECT p.category, SUM(s.amount) AS total_sales FROM sales s JOIN products p ON s.product_id = p.id WHERE s.sale_date >= DATEADD(month, -1, GETDATE()) GROUP BY p.category",SQL,unknown,Intermediate,"['Join', 'Aggregate function', 'Date filtering']","SELECT p.category, SUM(s.amount) AS total_sales FROM sales s JOIN products p ON s.product_id = p.id WHERE s.sale_date >= DATEADD(month, -1, GETDATE()) GROUP BY p.category",Not Available,"This query joins the `sales` and `products` tables on the product ID, filters the sales in the last month, and groups the results by product category to calculate the total sales amount for each category"
472,"You are given two tables in a database: `employees` and `departments`. The `employees` table has columns: `id`, `name`, `department_id`, and `salary`. The `departments` table includes `id` and `department_name`. Write a SQL query to find the average salary of employees in each department, along with the department name, and order the results by the average salary in descending order","SELECT d.department_name, AVG(e.salary) AS average_salary FROM employees e JOIN departments d ON e.department_id = d.id GROUP BY d.department_name ORDER BY average_salary DESC",SQL,unknown,Intermediate,"Data Analyst, SQL, Join, Aggregate function","SELECT d.department_name, AVG(e.salary) AS average_salary FROM employees e JOIN departments d ON e.department_id = d.id GROUP BY d.department_name ORDER BY average_salary DESC",Not Available,"This query joins the `employees` and `departments` tables on the `department_id` field, calculates the average salary using the AVG function, groups the results by department name, and orders the output by average salary in descending order"
473,"You have a sales database consisting of two tables: `orders` (with columns: `order_id`, `customer_id`, `order_date`, `total_amount`) and `customers` (with columns: `customer_id`, `customer_name`, `signup_date`). Write a query to find the total sales amount for each customer who signed up in the year 2022, along with their names, and sort the results in descending order of total sales","SELECT c.customer_name, SUM(o.total_amount) AS total_sales FROM customers c JOIN orders o ON c.customer_id = o.customer_id WHERE c.signup_date >= '2022-01-01' AND c.signup_date < '2023-01-01' GROUP BY c.customer_name ORDER BY total_sales DESC",SQL,unknown,Intermediate,"Data Analyst, Join, Aggregate Function","Example SQL Query: SELECT c.customer_name, SUM(o.total_amount) AS total_sales FROM customers c JOIN orders o ON c.customer_id = o.customer_id WHERE c.signup_date >= '2022-01-01' AND c.signup_date < '2023-01-01' GROUP BY c.customer_name ORDER BY total_sales DESC",Not Available,"This query joins the `customers` and `orders` tables on `customer_id`, filters customers who signed up in 2022, groups the results by customer name to calculate the total sales for each customer and sorts them in descending order by total sales"
474,"You are provided with two tables: 'employees' and 'departments'. The 'employees' table includes columns for employee ID, name, department ID, and salary. The 'departments' table contains department ID and department name. Write a SQL query to find the average salary of employees in each department and the total number of employees in each department. Present the results in a single output with the department name, average salary, and employee count","SELECT d.department_name, AVG(e.salary) AS average_salary, COUNT(e.employee_id) AS employee_count FROM employees e JOIN departments d ON e.department_id = d.department_id GROUP BY d.department_name",SQL,unknown,Intermediate,"['Join', 'Aggregate function', 'Data Analysis']","SELECT d.department_name, AVG(e.salary) AS average_salary, COUNT(e.employee_id) AS employee_count FROM employees e JOIN departments d ON e.department_id = d.department_id GROUP BY d.department_name",Not Available,"This query joins the 'employees' and 'departments' tables on the department ID, then calculates the average salary and employee count for each department, grouping the results by department name"
475,"Given a sales database with tables `orders` (fields: `order_id`, `customer_id`, `order_date`, `total_amount`) and `customers` (fields: `customer_id`, `customer_name`, `signup_date`), write an SQL query to find the total amount spent by each customer who signed up in the last year and has made at least one order in the last month. Include the customer name and the total spent amount, sorted by total amount in descending order","WITH recent_customers AS (SELECT customer_id, customer_name FROM customers WHERE signup_date >= DATEADD(year, -1, GETDATE())) SELECT c.customer_name, SUM(o.total_amount) AS total_spent FROM recent_customers c JOIN orders o ON c.customer_id = o.customer_id WHERE o.order_date >= DATEADD(month, -1, GETDATE()) GROUP BY c.customer_name ORDER BY total_spent DESC",SQL,unknown,Intermediate,"Join, CTE, Aggregate function, Date Functions","WITH recent_customers AS (SELECT customer_id, customer_name FROM customers WHERE signup_date >= DATEADD(year, -1, GETDATE())) SELECT c.customer_name, SUM(o.total_amount) AS total_spent FROM recent_customers c JOIN orders o ON c.customer_id = o.customer_id WHERE o.order_date >= DATEADD(month, -1, GETDATE()) GROUP BY c.customer_name ORDER BY total_spent DESC",Not Available,"This query uses a Common Table Expression (CTE) to first identify customers who signed up within the last year. It then joins this result with the orders to calculate the total amount spent by these customers in the last month, finally sorting the results in descending order according to the total amounts spent"
476,"You have a table named `sales` with columns `id`, `product_id`, `quantity`, and `sale_date`, and another table called `products` with `id`, `name`, and `category_id`. Write a SQL query that calculates the total quantity sold for each product category over the last 30 days, returning the category name and total quantity","SELECT p.category_id, SUM(s.quantity) AS total_quantity FROM sales s JOIN products p ON s.product_id = p.id WHERE s.sale_date >= CURRENT_DATE - INTERVAL '30 days' GROUP BY p.category_id ORDER BY total_quantity DESC",SQL,unknown,Intermediate,"Data Analyst, SQL, Aggregate Function, Join","SELECT p.category_id, SUM(s.quantity) AS total_quantity FROM sales s JOIN products p ON s.product_id = p.id WHERE s.sale_date >= CURRENT_DATE - INTERVAL '30 days' GROUP BY p.category_id ORDER BY total_quantity DESC",Not Available,"This query joins the `sales` and `products` tables using the `product_id`, filters records from the last 30 days using the `sale_date`, and then aggregates the data to calculate total sales per product category"
477,"Given two tables, `employees` (with columns `id`, `name`, `manager_id`) and `sales` (with columns `employee_id`, `sale_amount`), write a SQL query to find the total sales per manager, along with the manager's name. Managers with no sales should still be included in the result","WITH SalesPerManager AS (SELECT e.manager_id, e.name AS manager_name, SUM(s.sale_amount) AS total_sales FROM employees e LEFT JOIN sales s ON e.id = s.employee_id GROUP BY e.manager_id, e.name) SELECT manager_name, COALESCE(total_sales, 0) AS total_sales FROM SalesPerManager",SQL,unknown,Intermediate,"[Join, Aggregate Function, CTE]","WITH SalesPerManager AS (SELECT e.manager_id, e.name AS manager_name, SUM(s.sale_amount) AS total_sales FROM employees e LEFT JOIN sales s ON e.id = s.employee_id GROUP BY e.manager_id, e.name) SELECT manager_name, COALESCE(total_sales, 0) AS total_sales FROM SalesPerManager",Not Available,"This query first creates a Common Table Expression (CTE) that calculates total sales per manager by joining the `employees` table with the `sales` table. It groups by the manager's ID and name. The final SELECT retrieves the manager's name and total sales, using `COALESCE` to handle cases where a manager has no associated sales, returning a zero instead"
478,"You are tasked with identifying the top 3 products by sales revenue for each category from a retail database. The database has two tables: 'Products' (product_id, product_name, category_id) and 'Sales' (sale_id, product_id, quantity, sale_price). Write an SQL query to achieve this","WITH RankedProducts AS ( SELECT p.product_name, p.category_id, SUM(s.quantity * s.sale_price) AS total_revenue, ROW_NUMBER() OVER (PARTITION BY p.category_id ORDER BY SUM(s.quantity * s.sale_price) DESC) AS rank FROM Products p JOIN Sales s ON p.product_id = s.product_id GROUP BY p.product_name, p.category_id ) SELECT product_name, category_id, total_revenue FROM RankedProducts WHERE rank <= 3",SQL,unknown,Advanced,"Data Analyst, Data Engineer, Window Function, Aggregate Function","WITH RankedProducts AS ( SELECT p.product_name, p.category_id, SUM(s.quantity * s.sale_price) AS total_revenue, ROW_NUMBER() OVER (PARTITION BY p.category_id ORDER BY SUM(s.quantity * s.sale_price) DESC) AS rank FROM Products p JOIN Sales s ON p.product_id = s.product_id GROUP BY p.product_name, p.category_id ) SELECT product_name, category_id, total_revenue FROM RankedProducts WHERE rank <= 3",Not Available,"This query uses a Common Table Expression (CTE) to first calculate total revenue for each product, assigning a rank based on sales revenue within each category. The main SELECT statement filters to only include the top 3 products within each category"
479,"You are given two tables: `orders` (with columns `order_id`, `customer_id`, `order_date`, `amount`) and `customers` (with columns `customer_id`, `customer_name`, `signup_date`). Write a SQL query to find the top 5 customers by total spend, who have signed up in the last year. The output should include `customer_name`, total `amount spent`, and `signup_date`","WITH total_spent AS (SELECT c.customer_name, SUM(o.amount) AS total_amount, c.signup_date FROM customers c JOIN orders o ON c.customer_id = o.customer_id WHERE c.signup_date >= DATEADD(year, -1, GETDATE()) GROUP BY c.customer_name, c.signup_date) SELECT TOP 5 customer_name, total_amount, signup_date FROM total_spent ORDER BY total_amount DESC",SQL,intermediate,"[""Join"", ""Aggregate function"", ""CTE"", ""Data Analyst""]","WITH total_spent AS (SELECT c.customer_name, SUM(o.amount) AS total_amount, c.signup_date FROM customers c JOIN orders o ON c.customer_id = o.customer_id WHERE c.signup_date >= DATEADD(year, -1, GETDATE()) GROUP BY c.customer_name, c.signup_date) SELECT TOP 5 customer_name, total_amount, signup_date FROM total_spent ORDER BY total_amount DESC",Not Available,"This query uses a Common Table Expression (CTE) to first calculate the total spend for customers who signed up in the last year. Then, it selects the top 5 customers based on their total spend","Candidates might forget to filter customers based on the signup date or incorrectly use the date functions, leading to syntax errors"
480,You are working for a retail company and need to analyze the sales performance. Write a SQL query to find the top three products by total sales in the year 2022. Include the product name and the total sales amount for each product. Use appropriate aggregations and ensure to handle ties in total sales by ordering by product name if totals are the same,"WITH ProductSales AS ( SELECT p.product_name, SUM(s.sale_amount) AS total_sales FROM products p JOIN sales s ON p.product_id = s.product_id WHERE YEAR(s.sale_date) = 2022 GROUP BY p.product_name ) SELECT product_name, total_sales FROM ProductSales ORDER BY total_sales DESC, product_name ASC LIMIT 3",SQL,unknown,Intermediate,"Data Analyst, Aggregation, JOIN","SELECT p.product_name, SUM(s.sale_amount) AS total_sales ... GROUP BY p.product_name",Not Available,"This query uses a common table expression (CTE) to first calculate the total sales per product for the year 2022, then selects the top three products based on total sales while handling ties by ordering by product name as a secondary criterion"
481,"Given a sales database with a 'sales' table containing columns 'id', 'product_id', 'amount', and a 'products' table with 'id' and 'category', write a query to find the total sales amount for each product category, while only including categories that have total sales greater than $10,000","WITH CategorySales AS ( SELECT p.category, SUM(s.amount) AS total_sales FROM sales s JOIN products p ON s.product_id = p.id GROUP BY p.category ) SELECT category, total_sales FROM CategorySales WHERE total_sales > 10000",SQL,unknown,Intermediate,"['Aggregate function', 'Join', 'CTE', 'Data Analyst']","SELECT p.category, SUM(s.amount) AS total_sales FROM sales s JOIN products p ON s.product_id = p.id GROUP BY p.category",Not Available,"The query uses a Common Table Expression (CTE) to first calculate the total sales for each category before filtering for categories with sales over $10,000 in the final SELECT statement"
482,"You have two tables: `Employees` (with columns `EmployeeID`, `Name`, `DepartmentID`, `Salary`) and `Departments` (with columns `DepartmentID`, `DepartmentName`). Write a SQL query to find the average salary of employees in each department, but include departments with no employees and display those with an average salary of 0","SELECT d.DepartmentName, COALESCE(AVG(e.Salary), 0) AS AvgSalary FROM Departments d LEFT JOIN Employees e ON d.DepartmentID = e.DepartmentID GROUP BY d.DepartmentName",SQL,intermediate,"Data Analyst, Data Engineer, Aggregate Function, Join","SELECT d.DepartmentName, COALESCE(AVG(e.Salary), 0) AS AvgSalary FROM Departments d LEFT JOIN Employees e ON d.DepartmentID = e.DepartmentID GROUP BY d.DepartmentName",Not Available,"This query performs a LEFT JOIN between the Departments and Employees tables to ensure that all departments are included, even those without employees. The COALESCE function replaces NULL values with 0, which is needed for departments with no employees","Candidates might forget to use LEFT JOIN and instead use INNER JOIN, which would exclude departments with no employees. Additionally, they might neglect to use GROUP BY properly"
483,"You have a table named 'sales' with the following columns: 'id', 'product_id', 'quantity', 'sales_date', and a 'products' table with columns 'id', 'name', and 'category'. Write a SQL query to retrieve the total quantity sold for each product in the category 'Electronics' for the year 2022","SELECT p.name, SUM(s.quantity) AS total_quantity FROM sales s JOIN products p ON s.product_id = p.id WHERE p.category = 'Electronics' AND YEAR(s.sales_date) = 2022 GROUP BY p.name ORDER BY total_quantity DESC",SQL,unknown,Intermediate,"Data Analyst, Aggregate function, Join","SELECT p.name, SUM(s.quantity) AS total_quantity FROM sales s JOIN products p ON s.product_id = p.id WHERE p.category = 'Electronics' AND YEAR(s.sales_date) = 2022 GROUP BY p.name ORDER BY total_quantity DESC",Not Available,"This query retrieves the total quantity sold for each product in the 'Electronics' category for the year 2022 by joining the 'sales' and 'products' tables, filtering for the relevant category and date, and then grouping by product name while summing the quantities"
484,"You are working with two tables: 'employees' and 'departments'. The 'employees' table contains columns 'employee_id', 'name', 'salary', and 'department_id'. The 'departments' table contains 'department_id' and 'department_name'. Write an SQL query to find the total salary paid to employees in each department along with the department name. Sort the results by total salary in descending order","SELECT d.department_name, SUM(e.salary) AS total_salary FROM employees e JOIN departments d ON e.department_id = d.department_id GROUP BY d.department_name ORDER BY total_salary DESC",SQL,unknown,Intermediate,"['Join', 'Aggregate function', 'Data Analysis']","SELECT d.department_name, SUM(e.salary) AS total_salary FROM employees e JOIN departments d ON e.department_id = d.department_id GROUP BY d.department_name ORDER BY total_salary DESC",Not Available,"This query joins the 'employees' and 'departments' tables on 'department_id', aggregates the salary for each department using SUM(), groups the results by department name, and sorts them in descending order of total salary"
485,"Imagine you have two tables: `employees` (with columns `employee_id`, `name`, `department_id`, and `salary`) and `departments` (with columns `department_id` and `department_name`). Write a SQL query to find the average salary of employees in each department, showing the department name, and ensuring that only departments with an average salary above $50,000 are included in the result","SELECT d.department_name, AVG(e.salary) AS average_salary FROM employees e JOIN departments d ON e.department_id = d.department_id GROUP BY d.department_name HAVING AVG(e.salary) > 50000",SQL,intermediate,"['Join', 'Aggregate function', 'Data Analyst']","SELECT d.department_name, AVG(e.salary) AS average_salary FROM employees e JOIN departments d ON e.department_id = d.department_id GROUP BY d.department_name HAVING AVG(e.salary) > 50000",Not Available,"This query joins the `employees` and `departments` tables on the `department_id` and calculates the average salary for each department. It then filters the results to include only those departments where the average salary exceeds $50,000","Candidates might forget to include the HAVING clause, which is crucial for filtering the results based on the aggregated average salary"
486,"Given a table `sales` that records sales transactions with columns `transaction_id`, `customer_id`, `product_id`, `amount`, and `transaction_date`, and another table `customers` with `customer_id`, `customer_name`, and `join_date`, write a SQL query to find the total sales amount for each customer who joined in the last year, ordered by their total sales amount descending","WITH recent_customers AS (SELECT customer_id FROM customers WHERE join_date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR)) SELECT c.customer_name, SUM(s.amount) AS total_sales FROM sales s JOIN recent_customers rc ON s.customer_id = rc.customer_id JOIN customers c ON rc.customer_id = c.customer_id GROUP BY c.customer_name ORDER BY total_sales DESC",SQL,unknown,Intermediate,"Data Analyst, Join, Aggregate Function, CTE","WITH recent_customers AS (SELECT customer_id FROM customers WHERE join_date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR)) SELECT c.customer_name, SUM(s.amount) AS total_sales FROM sales s JOIN recent_customers rc ON s.customer_id = rc.customer_id JOIN customers c ON rc.customer_id = c.customer_id GROUP BY c.customer_name ORDER BY total_sales DESC",Not Available,"This query first creates a Common Table Expression (CTE) to isolate customers who joined within the last year. It then joins this CTE with the sales data to compute the total sales amount for each of these customers, finally ordering the results by total sales in descending order"
487,"You are working with two tables: `employees` and `departments`. The `employees` table contains columns `id`, `name`, `salary`, and `department_id`. The `departments` table has `id` and `department_name`. Write a SQL query to find the average salary of employees in each department, ordered by the average salary in descending order. If a department has no employees, it should not appear in the results","SELECT d.department_name, AVG(e.salary) AS average_salary FROM departments d JOIN employees e ON d.id = e.department_id GROUP BY d.department_name ORDER BY average_salary DESC",SQL,intermediate,"Data Analyst, Join, Aggregate Function","SELECT d.department_name, AVG(e.salary) AS average_salary FROM departments d LEFT JOIN employees e ON d.id = e.department_id GROUP BY d.department_name HAVING COUNT(e.id) > 0 ORDER BY average_salary DESC",Not Available,"This SQL query joins the `departments` table with the `employees` table to calculate the average salary in each department. It uses the `AVG` aggregate function and groups the results by department name, ordering them by average salary","Candidates might forget to handle departments with no employees correctly or use an INNER JOIN, which would exclude departments with no employees"
488,"Given two tables, `employees` (id, name, department_id) and `departments` (id, department_name), write a SQL query to find the department name with the highest average employee salary. Assume there is a third table `salaries` (employee_id, salary)","SELECT d.department_name FROM departments d JOIN (SELECT e.department_id, AVG(s.salary) AS avg_salary FROM employees e JOIN salaries s ON e.id = s.employee_id GROUP BY e.department_id) avg_salaries ON d.id = avg_salaries.department_id ORDER BY avg_salaries.avg_salary DESC LIMIT 1",SQL,unknown,Advanced,"[""Join"", ""Aggregate Function"", ""Data Analysis""]","SELECT d.department_name FROM departments d JOIN (SELECT e.department_id, AVG(s.salary) AS avg_salary FROM employees e JOIN salaries s ON e.id = s.employee_id GROUP BY e.department_id) avg_salaries ON d.id = avg_salaries.department_id ORDER BY avg_salaries.avg_salary DESC LIMIT 1",Not Available,"This query first calculates the average salary for each department by joining the `employees` and `salaries` tables. Then, it joins this result with the `departments` table to get the corresponding department name. Finally, it orders the results by average salary in descending order and limits the results to one to find the department with the highest average salary"
489,"Given a sales database with a `sales` table (columns: `sales_id`, `customer_id`, `amount`, `sale_date`) and a `customers` table (columns: `customer_id`, `customer_name`, `customer_since`), write a SQL query to find the average sale amount per customer for the year 2022, along with the customer's name. Include customers who made purchases in 2022, but also had purchases in previous years with at least one sale","SELECT c.customer_name, AVG(s.amount) AS average_sale_amount FROM customers c JOIN sales s ON c.customer_id = s.customer_id WHERE s.sale_date >= '2022-01-01' AND s.sale_date < '2023-01-01' AND c.customer_id IN (SELECT DISTINCT customer_id FROM sales WHERE sale_date < '2022-01-01') GROUP BY c.customer_name",SQL,unknown,Intermediate,"Data Analyst, Join, Aggregate Function","SELECT c.customer_name, AVG(s.amount) AS average_sale_amount FROM customers c JOIN sales s ON c.customer_id = s.customer_id WHERE s.sale_date >= '2022-01-01' AND s.sale_date < '2023-01-01' AND c.customer_id IN (SELECT DISTINCT customer_id FROM sales WHERE sale_date < '2022-01-01') GROUP BY c.customer_name",Not Available,"This query joins the `customers` and `sales` tables on `customer_id`, filters for sales in 2022, and ensures the customer had prior purchases before 2022 using a subquery. The average sale amount is then aggregated per customer"
490,"Given a sales database with tables 'sales' (columns: id, product_id, amount, sale_date) and 'products' (columns: id, name, category), write a query to find the total amount sold per product category for the last quarter. The result should show the category name and the total amount sold, ordered by the total amount sold in descending order","WITH last_quarter AS ( SELECT * FROM sales WHERE sale_date >= DATE_TRUNC('quarter', CURRENT_DATE - INTERVAL '3 months') AND sale_date < DATE_TRUNC('quarter', CURRENT_DATE) ) SELECT p.category, SUM(lq.amount) AS total_amount FROM last_quarter lq JOIN products p ON lq.product_id = p.id GROUP BY p.category ORDER BY total_amount DESC",SQL,unknown,Intermediate,"Data Analyst, Aggregate Function, Join","WITH last_quarter AS ( SELECT * FROM sales WHERE sale_date >= DATE_TRUNC('quarter', CURRENT_DATE - INTERVAL '3 months') AND sale_date < DATE_TRUNC('quarter', CURRENT_DATE) ) SELECT p.category, SUM(lq.amount) AS total_amount FROM last_quarter lq JOIN products p ON lq.product_id = p.id GROUP BY p.category ORDER BY total_amount DESC",Not Available,This query first defines a Common Table Expression (CTE) called 'last_quarter' to filter the sales records for the last quarter. Then it joins this filtered result with the 'products' table to group and sum the sales amounts per category
491,"Suppose you have two tables: 'Sales' which contains columns (OrderID, CustomerID, OrderDate, Amount), and 'Customers' which includes (CustomerID, CustomerName, RegistrationDate). Write a query to find the total sales amount and the number of unique customers for each month, including those months with zero sales","WITH MonthlySales AS ( SELECT DATE_TRUNC('month', OrderDate) AS SaleMonth, SUM(Amount) AS TotalSales, COUNT(DISTINCT CustomerID) AS UniqueCustomers FROM Sales GROUP BY SaleMonth ) SELECT COALESCE(MS.SaleMonth, C.RegistrationDate) AS SaleMonth, COALESCE(MS.TotalSales, 0) AS TotalSales, COALESCE(MS.UniqueCustomers, 0) AS UniqueCustomers FROM Customers C LEFT JOIN MonthlySales MS ON DATE_TRUNC('month', C.RegistrationDate) = MS.SaleMonth ORDER BY SaleMonth",SQL,unknown,Intermediate,"Data Analyst, Data Engineer, Join, Aggregate function, CTE","WITH MonthlySales AS ( SELECT DATE_TRUNC('month', OrderDate) AS SaleMonth, SUM(Amount) AS TotalSales, COUNT(DISTINCT CustomerID) AS UniqueCustomers FROM Sales GROUP BY SaleMonth ) SELECT COALESCE(MS.SaleMonth, C.RegistrationDate) AS SaleMonth, COALESCE(MS.TotalSales, 0) AS TotalSales, COALESCE(MS.UniqueCustomers, 0) AS UniqueCustomers FROM Customers C LEFT JOIN MonthlySales MS ON DATE_TRUNC('month', C.RegistrationDate) = MS.SaleMonth ORDER BY SaleMonth",Not Available,"This SQL code defines a common table expression (CTE) to aggregate sales by month, including total sales and unique customers. It then performs a LEFT JOIN with the Customers table to ensure months without sales still appear in the results, using COALESCE to handle null values for sales and customers"
492,"Given a table 'employees' with columns 'id', 'name', 'department_id', 'salary', and a table 'departments' with 'id' and 'department_name', write a SQL query to find the department with the highest total salary expenditure. Return the department name and the total salary","WITH dept_salaries AS (SELECT d.department_name, SUM(e.salary) AS total_salary FROM employees e JOIN departments d ON e.department_id = d.id GROUP BY d.department_name) SELECT department_name, total_salary FROM dept_salaries ORDER BY total_salary DESC LIMIT 1",SQL,unknown,Intermediate,"['Aggregate function', 'Join', 'CTE']","WITH dept_salaries AS (SELECT d.department_name, SUM(e.salary) AS total_salary FROM employees e JOIN departments d ON e.department_id = d.id GROUP BY d.department_name) SELECT department_name, total_salary FROM dept_salaries ORDER BY total_salary DESC LIMIT 1",Not Available,This SQL code first calculates the total salary for each department using a Common Table Expression (CTE) and then retrieves the department with the highest total salary expenditure by ordering the results in descending order and limiting it to one result
493,"You are provided with two tables: 'sales' and 'products'. The 'sales' table contains columns 'sale_id', 'product_id', 'quantity', and 'sale_date'. The 'products' table contains 'product_id', 'product_name', and 'price'. Write a SQL query to find the total sales revenue for each product, including the product name, for the month of January 2023. If a product has zero sales in that month, it should still be included in the result with a revenue of 0","SELECT p.product_name, COALESCE(SUM(s.quantity * p.price), 0) AS total_revenue FROM products p LEFT JOIN sales s ON p.product_id = s.product_id AND s.sale_date >= '2023-01-01' AND s.sale_date < '2023-02-01' GROUP BY p.product_id",SQL,unknown,Intermediate,"Data Analyst, Join, Aggregate function","SELECT p.product_name, COALESCE(SUM(s.quantity * p.price), 0) AS total_revenue FROM products p LEFT JOIN sales s ON p.product_id = s.product_id AND s.sale_date >= '2023-01-01' AND s.sale_date < '2023-02-01' GROUP BY p.product_id",Not Available,"This query joins the 'products' table with the 'sales' table on 'product_id', calculates the total revenue for each product sold in January 2023 using a LEFT JOIN to ensure products with zero sales are included, and uses COALESCE to return 0 for those products"
494,"You are given two tables, `employees` (with columns `id`, `name`, `department_id`, `salary`) and `departments` (with columns `id`, `department_name`). Write a SQL query to find the average salary of employees in each department, but only include departments that have more than 5 employees. Return the department name and the average salary","SELECT d.department_name, AVG(e.salary) as average_salary FROM employees e JOIN departments d ON e.department_id = d.id GROUP BY d.department_name HAVING COUNT(e.id) > 5",unknown,Intermediate,"['Join', 'Aggregate function', 'Group By']",example_query,"This query joins the `employees` table with the `departments` table to relate employee salaries to their respective departments. It then groups the results by department name, calculates the average salary, and filters for departments with more than 5 employees using the HAVING clause","Candidates may forget to include the HAVING clause or use WHERE instead of HAVING, which would lead to incorrect results. Another common mistake is not joining the tables correctly","Candidates may forget to include the HAVING clause or use WHERE instead of HAVING, which would lead to incorrect results. Another common mistake is not joining the tables correctly"
495,"Given two tables, `orders` and `customers`, where `orders` has columns `id`, `customer_id`, `order_date`, and `total_amount`, and `customers` has columns `id`, `name`, and `join_date`, write a query to get the total sales by each customer who joined after January 1st, 2022. Sort the results by total sales in descending order","SELECT c.name, SUM(o.total_amount) AS total_sales FROM customers c INNER JOIN orders o ON c.id = o.customer_id WHERE c.join_date > '2022-01-01' GROUP BY c.name ORDER BY total_sales DESC",SQL,intermediate,"Data Analyst, Join, Aggregate Function","SELECT c.name, SUM(o.total_amount) AS total_sales FROM customers c INNER JOIN orders o ON c.id = o.customer_id WHERE c.join_date > '2022-01-01' GROUP BY c.name ORDER BY total_sales DESC",Not Available,"The query combines the `customers` and `orders` tables using an inner join to match customers with their respective orders. It filters customers who joined after a specified date and aggregates their order totals, sorting the final results by sales","Candidates might forget to include the proper join condition, mistakenly use LEFT JOIN instead of INNER JOIN when the question specifies a strict relationship, or incorrectly use a date format"
496,"Given a sales database with tables 'sales' (columns: sale_id, product_id, amount, sale_date) and 'products' (columns: product_id, product_name, category), write a SQL query to determine the total sales amount for each product along with the product name and category. The result should be ordered by the total sales amount in descending order","SELECT p.product_name, p.category, SUM(s.amount) AS total_sales FROM products p JOIN sales s ON p.product_id = s.product_id GROUP BY p.product_name, p.category ORDER BY total_sales DESC",SQL,unknown,Intermediate,"Data Analyst, Join, Aggregate Function","SELECT p.product_name, p.category, SUM(s.amount) AS total_sales FROM products p JOIN sales s ON p.product_id = s.product_id GROUP BY p.product_name, p.category ORDER BY total_sales DESC",Not Available,"This query joins the 'products' and 'sales' tables on the 'product_id', groups the results by 'product_name' and 'category', calculates the sum of the 'amount' for each group, and orders the output by 'total_sales' in descending order"
497,"Given a sales database with two tables, `sales` and `products`, write a SQL query to find the top 5 products by total sales amount in the last quarter. The `sales` table has columns `id`, `product_id`, `sale_date`, and `amount`. The `products` table has columns `id` and `name`. Include the product name and total sales amount in your result","SELECT p.name, SUM(s.amount) AS total_sales FROM sales s JOIN products p ON s.product_id = p.id WHERE s.sale_date >= DATEADD(quarter, -1, GETDATE()) GROUP BY p.name ORDER BY total_sales DESC LIMIT 5",SQL,unknown,Intermediate,"[""Data Analyst"", ""Business Intelligence"", ""Join"", ""Aggregation""]","SELECT p.name, SUM(s.amount) AS total_sales FROM sales s JOIN products p ON s.product_id = p.id WHERE s.sale_date >= DATEADD(quarter, -1, GETDATE()) GROUP BY p.name ORDER BY total_sales DESC LIMIT 5",Not Available,"This query joins the `sales` and `products` tables on `product_id`, filters sales from the last quarter, groups by product name, and calculates the total sales amount to find the top 5 products"
498,"You have two tables: `orders` and `customers`. The `orders` table contains fields `order_id`, `customer_id`, `order_date`, and `order_amount`. The `customers` table contains fields `customer_id`, `customer_name`, and `customer_since`. Write a SQL query to retrieve the total order amount for each customer, alongside their name and the year they became a customer. Only include customers who have made at least one order","SELECT c.customer_name, YEAR(c.customer_since) AS customer_year, SUM(o.order_amount) AS total_order_amount FROM customers c JOIN orders o ON c.customer_id = o.customer_id GROUP BY c.customer_name, YEAR(c.customer_since) ORDER BY total_order_amount DESC",SQL,unknown,Intermediate,"Data Analyst, Join, Aggregate Function","SELECT c.customer_name, YEAR(c.customer_since) AS customer_year, SUM(o.order_amount) AS total_order_amount FROM customers c JOIN orders o ON c.customer_id = o.customer_id GROUP BY c.customer_name, YEAR(c.customer_since) ORDER BY total_order_amount DESC",Not Available,"This query joins `customers` and `orders` to find total order amounts by customer and formats the year the customer joined. The results are grouped by customer name and year, ensuring only customers with orders are included and sorted by total order amounts in descending order"
499,"You are tasked with analyzing sales data for the past year from two tables: `sales` and `products`. The `sales` table includes `sale_id`, `product_id`, `quantity`, and `sale_date`, while the `products` table contains `product_id`, `product_name`, and `price`. Write an SQL query to find the total sales revenue for each product for the last year, sorted by revenue in descending order","WITH Revenue AS (SELECT p.product_name, SUM(s.quantity * p.price) AS total_revenue FROM sales s JOIN products p ON s.product_id = p.product_id WHERE s.sale_date >= DATEADD(year, -1, GETDATE()) GROUP BY p.product_name) SELECT product_name, total_revenue FROM Revenue ORDER BY total_revenue DESC",SQL,unknown,Intermediate,"[""Data Analyst"", ""Business Intelligence"", ""Join"", ""Aggregation"", ""CTE""]",Not Available,This query first uses a Common Table Expression (CTE) named `Revenue` to calculate the total revenue for each product sold in the last year by joining the `sales` and `products` tables and summing up the revenue (quantity * price). It then selects and orders the results by total revenue in descending order,"Candidates might forget to apply the correct date filter, use incorrect join conditions, or neglect to include product names in the output. Another mistake could be not using a CTE properly, leading to confusion in aggregating the results"
500,"Given a sales database with tables for `sales` (with columns `id`, `amount`, `customer_id`, `sale_date`) and `customers` (with columns `id`, `name`, `join_date`), write an SQL query to find the top three customers who have spent the most in total sales in the last year, along with their total spending amount. Sort the results by total spending in descending order","WITH total_spending AS (SELECT c.id, c.name, SUM(s.amount) AS total_amount FROM customers c JOIN sales s ON c.id = s.customer_id WHERE s.sale_date >= DATEADD(year, -1, GETDATE()) GROUP BY c.id, c.name) SELECT id, name, total_amount FROM total_spending ORDER BY total_amount DESC OFFSET 0 ROWS FETCH NEXT 3 ROWS ONLY",SQL,unknown,Intermediate,"Data Analyst, Aggregate function, Join","SELECT c.id, c.name, SUM(s.amount) AS total_amount FROM customers c JOIN sales s ON c.id = s.customer_id WHERE s.sale_date >= DATEADD(year, -1, GETDATE()) GROUP BY c.id, c.name ORDER BY total_amount DESC OFFSET 0 ROWS FETCH NEXT 3 ROWS ONLY",Not Available,The SQL code uses a Common Table Expression (CTE) to calculate the total spending for each customer over the past year and then selects the top three customers based on that spending
501,What is a CTE (Common Table Expression)?,"A CTE is a temporary result set that you can reference within a SELECT, INSERT, UPDATE, or DELETE statement",SQL,intermediate,"CTE, SQL, Data Analysis",WITH Sales_CTE AS (SELECT * FROM sales WHERE amount > 100) SELECT * FROM Sales_CTE;,CTEs improve readability and organization of complex queries,Confusing CTE with views; not knowing scope limits,What are temporary tables?; Explain subqueries
502,What is the difference between UNION and UNION ALL?,UNION combines the result sets of two or more SELECT statements while removing duplicates; UNION ALL includes duplicates,SQL,intermediate,"UNION, SQL",SELECT id FROM tableA UNION SELECT id FROM tableB;,Use UNION for distinct values across results; use UNION ALL for performance when duplicates are acceptable,Misunderstanding result sets and performance implications,What is a JOIN?; Explain set operations
503,How would you optimize a slow-running query?,"You can optimize a slow-running query by creating indexes, analyzing query execution plans, and reducing complexity",SQL,advanced,"Query Optimization, SQL",SELECT * FROM Sales WHERE YEAR(sale_date) = 2022; CREATE INDEX idx_sale_date ON Sales(sale_date);,Query optimization techniques can improve performance and reduce resource consumption,Not considering index creation and analysis,What is indexing?; Explain execution plans
504,What is a primary key?,"A primary key is a unique identifier for each record in a table, ensuring that no two rows have the same key",SQL,easy,"Primary Key, SQL","CREATE TABLE users (id INT PRIMARY KEY, name VARCHAR(100));",Primary keys help maintain data integrity and establish relationships,Confusing primary keys with foreign keys,What is a composite key?; Explain foreign key
505,What is normalization?,Normalization is the process of organizing data to reduce redundancy and improve data integrity,SQL,intermediate,"Normalization, Database",Normalization typically involves dividing a database into tables and defining relationships,Normalization improves data integrity but can complicate queries,Over-normalizing can lead to performance issues,What are normal forms?; Explain denormalization
506,How do you handle NULL values in SQL?,You can handle NULL values using the IS NULL and IS NOT NULL operators,SQL,intermediate,"NULL Handling, SQL",SELECT * FROM users WHERE middle_name IS NULL;,Proper handling of NULLs prevents unexpected behavior,Confusing NULL with an empty string or zero,What is the COALESCE function?; Explain ISNULL
507,What is a foreign key?,A foreign key is a field (or group of fields) in one table that uniquely identifies a row in another table,SQL,intermediate,"Foreign Key, SQL","CREATE TABLE orders (order_id INT PRIMARY KEY, user_id INT FOREIGN KEY REFERENCES users(id));",Foreign keys enforce referential integrity between tables,Confusing foreign key constraints with primary keys,What is a self-referencing relationship?; Explain cascading actions
508,What are window functions?,Window functions perform calculations across a set of rows related to the current row,SQL,advanced,"Window Functions, SQL","SELECT name, RANK() OVER (ORDER BY score DESC) as rank FROM players;",Window functions allow advanced calculations like running totals,Overusing window functions can lead to performance issues,Explain ROW_NUMBER(); What is the difference between RANK() and DENSE_RANK()?
509,What is a self-join?,A self-join is a regular join that joins a table to itself to combine rows based on related columns,SQL,intermediate,"Self Join, SQL","SELECT A.name, B.name FROM employees A, employees B WHERE A.manager_id = B.id;",Self-joins can be useful for hierarchical data,Not aliasing correctly can cause confusion,What is a CROSS JOIN?; Explain recursive queries
510,What are indexes?,An index is a database object that speeds up data retrieval operations on a table,SQL,intermediate,"Indexes, SQL",CREATE INDEX idx_name ON employees(name);,Indexes improve data retrieval speed but add storage costs,Over-indexing can slow down INSERT operations,What is a composite index?; Explain covering index
511,Explain the difference between clustered and non-clustered indexes,A clustered index determines the physical order of data in a table; a non-clustered index creates a separate structure,SQL,advanced,"Index Types, SQL",CREATE CLUSTERED INDEX idx_name ON employees(name); CREATE NONCLUSTERED INDEX idx_salary ON employees(salary);,Choosing the right index is crucial for performance,Not understanding when to use each index type,What are covering indexes?; Explain index scans vs. index seeks
512,What is an aggregate function?,An aggregate function performs a calculation on a set of values and returns a single value,SQL,easy,"Aggregate Functions, SQL",SELECT COUNT(*) FROM orders;,Aggregate functions are essential for summarizing data,Misusing GROUP BY when not needed,What are GROUP BY and HAVING clauses?; Explain COUNT() vs. SUM()
513,What is a subquery?,A subquery is a SQL query nested inside another query,SQL,intermediate,"Subquery, SQL",SELECT name FROM employees WHERE department_id IN (SELECT id FROM departments);,Subqueries can be powerful but may impact performance,Not understanding the difference between correlated and non-correlated subqueries,What is an EXISTS clause?; Explain JOIN vs. subquery
514,What is the purpose of the GROUP BY clause?,The GROUP BY clause groups rows that have the same values in specified columns into aggregate data,SQL,intermediate,"GROUP BY, SQL","SELECT department, COUNT(*) FROM employees GROUP BY department;",GROUP BY is crucial for summarizing and aggregating data,Forgetting to include non-aggregated columns in SELECT,What is the HAVING clause?; Explain filtering groups
515,What is the difference between WHERE and HAVING?,WHERE filters records before aggregation; HAVING filters records after aggregation,SQL,intermediate,"WHERE, HAVING, SQL","SELECT department, COUNT(*) FROM employees GROUP BY department HAVING COUNT(*) > 5;",Understanding WHERE and HAVING is important for data filtering,Using HAVING instead of WHERE for simple conditions,What is a ROLLUP?; Explain CUBE in aggregation
516,What is a JOIN in SQL?,A JOIN is used to combine rows from two or more tables based on a related column,SQL,intermediate,"JOIN, SQL",SELECT * FROM employees INNER JOIN departments ON employees.department_id = departments.id;,JOINS are fundamental for retrieving related data across multiple tables,"Not understanding different types of JOINS (INNER, LEFT, RIGHT)",What are CROSS JOINs?; Explain OUTER JOINS
517,What is a database transaction?,A database transaction is a sequence of operations performed as a single logical unit of work,SQL,advanced,"Transactions, SQL","BEGIN TRANSACTION; INSERT INTO accounts (id, balance) VALUES (1, 100); COMMIT;",Transactions ensure data integrity by allowing rollback in case of errors,Forgetting to use COMMIT and ROLLBACK,Explain ACID properties; What is a rollback?
518,What is a trigger?,A trigger is a procedural code that is automatically executed in response to certain events on a table,SQL,advanced,"Triggers, SQL",CREATE TRIGGER trg_after_insert AFTER INSERT ON employees FOR EACH ROW BEGIN ... END;,Triggers automatically enforce business rules at the database level,Overusing triggers can lead to complex dependencies,What is a stored procedure?; How do you create a before trigger?
519,What is a stored procedure?,A stored procedure is a set of SQL statements that can be stored and executed in the database,SQL,advanced,"Stored Procedures, SQL",CREATE PROCEDURE proc_getEmployees AS BEGIN SELECT * FROM employees; END;,Stored procedures encapsulate business logic and improve performance,Not handling errors properly in stored procedures,What is a function?; What's the difference between a stored procedure and a function?
520,What is a cursor in SQL?,"A cursor is a database object used to retrieve, manipulate, and navigate through a result set row by row",SQL,advanced,"Cursor, SQL",DECLARE cursor_name CURSOR FOR SELECT name FROM employees;,Cursors can be useful for processing individual rows but may lead to performance issues,Not properly closing the cursor after use,What are set-based operations?; Explain static vs. dynamic cursors
521,What is data integrity?,Data integrity refers to the accuracy and consistency of data stored in a database,SQL,intermediate,"Data Integrity, SQL",Not Available,Ensuring data integrity is crucial for maintaining high-quality data,Neglecting to enforce integrity constraints,What are integrity constraints?; Explain referential integrity
522,What is a composite key?,A composite key is a primary key composed of two or more columns,SQL,intermediate,"Composite Key, SQL","CREATE TABLE student_courses (student_id INT, course_id INT, PRIMARY KEY (student_id, course_id));",Composite keys ensure uniqueness across multiple columns in a table,Confusing composite keys with foreign keys,What is a surrogate key?; Explain natural keys
523,What is an inner join?,An inner join returns records that have matching values in both tables,SQL,intermediate,"Inner Join, SQL",SELECT * FROM employees INNER JOIN departments ON employees.department_id = departments.id;,Inner joins are the most common type of join used in SQL,Not understanding how inner joins filter out non-matching records,What are left joins?; What is an outer join?
524,What is an outer join?,An outer join returns all records from one table and the matched records from the other,SQL,intermediate,"Outer Join, SQL",SELECT * FROM employees LEFT JOIN departments ON employees.department_id = departments.id;,Outer joins are useful for retrieving all data even when there are no matches,Misusing the type of outer join can lead to missing data,What is a right join?; Explain full outer join
525,What are constraints in SQL?,Constraints are rules enforced on data columns of a table to ensure accuracy and reliability,SQL,intermediate,"Constraints, SQL",Not Available,Constraints help maintain the integrity and accuracy of data,Neglecting to apply constraints may lead to invalid data,What is a unique constraint?; Explain check constraints
526,What is a logical operator in SQL?,Logical operators are used to combine multiple conditions in a SQL statement,SQL,easy,"Logical Operators, SQL",SELECT * FROM employees WHERE department = 'IT' AND salary > 60000;,Logical operators allow for more complex queries and conditions,Misusing logical operators can lead to unexpected results,What is a subquery?; Explain the NOT operator
527,What is a data type in SQL?,A data type indicates the type of data that can be stored in a column,SQL,easy,"Data Types, SQL","CREATE TABLE sample (id INT, name VARCHAR(50));",Choosing the appropriate data type is important for data integrity and performance,Using incorrect data types can lead to data loss,What are numeric data types?; Explain date and time data types
528,What is a temporary table?,A temporary table is a table that is created and exists temporarily during a session,SQL,intermediate,"Temporary Table, SQL","CREATE TEMPORARY TABLE temp_sales (id INT, amount DECIMAL(10,2));",Temporary tables can be useful for bridging complex calculations without affecting permanent tables,Not dropping the temporary table when done,What is a regular table?; Explain global temporary tables
529,What are data normalization forms?,Data normalization forms define the rules and processes for structuring a relational database,SQL,intermediate,"Normalization, Forms",Not Available,Normalization forms help define how tables relate to one another,Skipping normalization can lead to data anomalies,What is first normal form?; Explain third normal form
530,What is an execution plan?,An execution plan is a map that SQL Server uses to retrieve data,SQL,advanced,"Execution Plan, SQL",Not Available,Understanding execution plans is essential for performance tuning,Neglecting to analyze execution plans can lead to inefficient queries,What is query optimization?; Explain indexing strategies
531,What is the difference between a function and a stored procedure?,Functions return a value and can be used in SQL statements; stored procedures perform actions and do not need to return a value,SQL,intermediate,"Functions, Stored Procedures",Not Available,Understanding when to use a function versus a stored procedure is crucial for structuring code,Confusing the two can lead to improperly structured queries,What is a trigger?; Explain the use of parameters
532,What is a common data model?,A common data model provides a standardized way to represent data structures,SQL,intermediate,"Data Model, SQL",Not Available,Common data models improve interoperability between systems,Failing to adapt the model can lead to integration issues,What is a data mart?; Explain dimensional modeling
533,What is a data warehouse?,A data warehouse is a central repository of integrated data from one or more disparate sources,SQL,advanced,"Data Warehouse, SQL",Not Available,A data warehouse is designed to enable analysis and reporting,Confusing operational databases with data warehouses,What is ETL?; Explain OLAP
534,What is the purpose of database views?,Views provide a way to present data in a specific format without storing it physically,SQL,intermediate,"Views, SQL","CREATE VIEW employee_view AS SELECT name, department FROM employees;",Views can simplify complex queries and enhance security by restricting data access,Not updating views when base tables change,What is materialized view?; Explain indexed views
535,What is the difference between DELETE and TRUNCATE?,"DELETE removes rows one at a time and logs each deletion, while TRUNCATE removes all rows and does not log individual deletions",SQL,intermediate,"Delete, Truncate, SQL",DELETE FROM employees WHERE department = 'HR'; TRUNCATE TABLE employees;,TRUNCATE is faster and uses fewer system resources,Misunderstanding the use cases for each can lead to data loss,What is a rollback?; Explain the use of a transaction
536,What are system tables?,System tables hold the information necessary for SQL Server to manage its data and configure itself,SQL,advanced,"System Tables, SQL",SELECT * FROM sys.tables;,System tables provide metadata about the database structure,Ignoring system tables can overlook important database aspects,What is a catalog view?; Explain schema
537,What is a schema?,"A schema is a logical container for database objects such as tables, views, and procedures",SQL,intermediate,"Schema, SQL",CREATE SCHEMA sales AUTHORIZATION dbo;,Schemas help organize database objects logically,Confusing schemas with databases,What is namespace?; Explain database objects
538,What is database replication?,Database replication involves copying and distributing data between multiple databases to maintain consistency,SQL,advanced,"Replication, SQL",Not Available,Replication ensures data availability and redundancy,Not understanding the types of replication can lead to data inconsistencies,What is transaction log?; Explain data redundancy
539,What is a performance bottleneck in SQL?,A performance bottleneck is a point where the performance of a system or query significantly slows,SQL,advanced,"Performance, SQL",Not Available,Identifying and resolving bottlenecks is crucial for optimal performance,Neglecting to monitor performance regularly,What is query optimization?; Explain indexing strategies
540,What are stored functions?,Stored functions are similar to stored procedures; they return a single value and can be used directly in SQL statements,SQL,intermediate,"Stored Functions, SQL",CREATE FUNCTION get_employee_count() RETURNS INT BEGIN RETURN (SELECT COUNT(*) FROM employees); END;,Stored functions encapsulate complex logic and can simplify queries,Confusing stored functions with stored procedures,What is a cursor?; Explain database triggers
541,What is DDL?,"DDL stands for Data Definition Language, which is used to define and manage all structures in a database",SQL,easy,"DDL, SQL","CREATE, ALTER, DROP;",DDL commands manage the schema of a database,Not understanding the permanent effects of DDL commands,What is DML?; Explain DCL
542,What is DML?,"DML stands for Data Manipulation Language, which is used for querying and modifying data",SQL,easy,"DML, SQL","INSERT, UPDATE, DELETE;",DML allows for data retrieval and modification in the database,Not performing operations with transactions,What is SELECT?; Explain aggregations in DML
543,What is the purpose of a database lock?,Database locks are mechanisms to manage concurrent access to data and prevent data corruption,SQL,advanced,"Locks, SQL",Not Available,Locks ensure data integrity during transactions,Not understanding different lock types can lead to deadlocks,What is isolation level?; Explain lock escalation
544,What is horizontal scaling?,Horizontal scaling involves adding more machines to a pool to distribute the load,SQL,advanced,"Scaling, SQL",Not Available,Horizontal scaling improves performance by distributing the workload,Neglecting to manage the load balancing can hinder performance,What is vertical scaling?; Explain clustering
545,What are the ACID properties?,"ACID stands for Atomicity, Consistency, Isolation, Durability; it is a set of properties ensuring reliable transaction processing",SQL,advanced,"ACID, SQL",Not Available,Understanding ACID properties is crucial for database design,Neglecting one or more properties can lead to data anomalies,What is eventual consistency?; Explain CAP theorem
546,What is a composite foreign key?,A composite foreign key is a foreign key that consists of two or more columns,SQL,intermediate,"Composite Foreign Key, SQL","CREATE TABLE course_enrollment (student_id INT, course_id INT, FOREIGN KEY (student_id, course_id) REFERENCES students_courses (student_id, course_id));",Composite foreign keys enforce referential integrity across multiple columns,Confusing composite foreign keys with composite primary keys,What is cascade delete?; Explain orphaned records
547,What is optimistic locking?,Optimistic locking is a strategy to allow multiple transactions to complete without locking data,SQL,advanced,"Optimistic Locking, SQL",Not Available,Optimistic locking avoids locking conflicts in high-concurrency environments,Not validating data for changes can lead to update conflicts,What is pessimistic locking?; Explain concurrency control
548,What is a column-store index?,"A column-store index stores data in columns rather than rows, improving query performance for analytical workloads",SQL,advanced,"Column-store Index, SQL",CREATE COLUMNSTORE INDEX idx_col ON table_name;,Column-store indexes are optimized for large volume read queries,Not understanding the trade-offs between row-store and column-store,What is a wild card?; Explain full-text search
549,What is the purpose of a data dictionary?,"A data dictionary contains metadata about database objects, such as definitions and relationships",SQL,intermediate,"Data Dictionary, SQL",Not Available,A data dictionary provides a comprehensive view of data and its structure,Neglecting to maintain accurate metadata can lead to confusion,What is metadata?; Explain system catalog
550,What is a business intelligence (BI) model?,"A BI model organizes data for analysis and reporting, often structured around dimensions and facts",SQL,advanced,"Business Intelligence, SQL",Not Available,BI models facilitate efficient querying and analysis,Confusing BI modeling with transaction management,What is ETL?; Explain dimensional modeling
551,"Given a 'sales' table, write a SQL query to find the total sales amount per product for the year 2022","SELECT product_id, SUM(amount) as total_sales FROM sales WHERE YEAR(sale_date) = 2022 GROUP BY product_id;",SQL,intermediate,"Data Analyst, Business Analyst","SELECT product_id, SUM(amount) AS total_sales FROM sales WHERE YEAR(sale_date) = 2022 GROUP BY product_id;",This query calculates the total sales for each product in the specified year,Forgetting to group by product_id,How to calculate average sales; What is a time series analysis?
552,Write a SQL query to identify employees who have joined in the last month and have a salary greater than the average salary,"SELECT * FROM employees WHERE join_date >= DATEADD(month, -1, GETDATE()) AND salary > (SELECT AVG(salary) FROM employees);",SQL,intermediate,"Data Engineer, Business Analyst","SELECT * FROM employees WHERE join_date >= DATEADD(month, -1, GETDATE()) AND salary > (SELECT AVG(salary) FROM employees);",This retrieves employees based on their join date and compares their salary to the average,Misunderstanding date functions,What is a correlated subquery?; How to calculate the median salary?
553,"You have a table named 'transactions' with columns 'user_id', 'amount', and 'transaction_date'. Write a SQL query to get the total transaction amount for each user in the last year","SELECT user_id, SUM(amount) AS total_amount FROM transactions WHERE YEAR(transaction_date) = YEAR(CURRENT_DATE) - 1 GROUP BY user_id;",SQL,intermediate,"Data Analyst, Financial Analyst","SELECT user_id, SUM(amount) AS total_amount FROM transactions WHERE YEAR(transaction_date) = YEAR(CURRENT_DATE) - 1 GROUP BY user_id;",This groups transactions by user and sums their amounts for the previous year,Neglecting to account for the proper fiscal year,What are aggregate functions?; How to use date functions in SQL?
554,"Assuming a table 'inventory' with 'item_id', 'warehouse_id', and 'quantity', write a query to find the total quantity of items in each warehouse","SELECT warehouse_id, SUM(quantity) AS total_quantity FROM inventory GROUP BY warehouse_id;",SQL,easy,"Data Analyst, Warehouse Manager","SELECT warehouse_id, SUM(quantity) AS total_quantity FROM inventory GROUP BY warehouse_id;",This sums the item quantities per warehouse,Forgetting to group by warehouse_id,What is a GROUP BY clause?; How to calculate percentages?
555,Write a SQL query to find the percentage of total sales each product contributes to the overall sales,"SELECT product_id, (SUM(amount) / (SELECT SUM(amount) FROM sales)) * 100 AS percentage FROM sales GROUP BY product_id;",SQL,advanced,"Data Analyst, Business Analyst","SELECT product_id, (SUM(amount) / (SELECT SUM(amount) FROM sales)) * 100 AS percentage FROM sales GROUP BY product_id;",This calculates the sales percentage of each product against total sales,Neglecting to consider division by zero,What is a subquery?; How to calculate market share?
556,"Given a 'customers' table, write a query to find the top 5 customers based on total purchase amount","SELECT customer_id, SUM(amount) AS total_purchases FROM purchases GROUP BY customer_id ORDER BY total_purchases DESC LIMIT 5;",SQL,intermediate,"Data Analyst, Business Analyst","SELECT customer_id, SUM(amount) AS total_purchases FROM purchases GROUP BY customer_id ORDER BY total_purchases DESC LIMIT 5;",This retrieves the top 5 customers by their total purchase amounts,Not using correct ordering or limits,What is a ranking function?; How to use TOP in SQL?
557,"Assume a 'projects' table with 'project_id', 'start_date', and 'end_date'. Write a SQL query to calculate the total duration of each project in days","SELECT project_id, DATEDIFF(end_date, start_date) AS duration FROM projects;",SQL,intermediate,"Project Manager, Data Analyst","SELECT project_id, DATEDIFF(end_date, start_date) AS duration FROM projects;",This calculates how long each project has lasted in days,Incorrectly using date functions,What is the difference between DATEDIFF and TIMESTAMPDIFF?; How to calculate project timelines?
558,Write a SQL query to retrieve the nth highest salary from the 'employees' table,SELECT DISTINCT salary FROM employees ORDER BY salary DESC LIMIT 1 OFFSET n-1;,SQL,advanced,"Data Analyst, HR Analyst",SELECT DISTINCT salary FROM employees ORDER BY salary DESC LIMIT 1 OFFSET n-1;,This query finds the nth highest salary by using a combination of sorting and limiting,Not understanding zero-based indexing,What is a window function?; How to handle duplicate values?
559,"In a 'sales' table, how would you write a query to find the average sale amount per day?","SELECT DATE(sale_date) AS sale_day, AVG(amount) AS average_sale FROM sales GROUP BY DATE(sale_date);",SQL,intermediate,"Data Analyst, Business Analyst","SELECT DATE(sale_date) AS sale_day, AVG(amount) AS average_sale FROM sales GROUP BY DATE(sale_date);",This computes daily averages of sale amounts,Confusing aggregate functions with non-aggregated columns,How to calculate weekly averages?; What are time-series analyses?
560,Write a query to find records from a 'users' table where the email field does not contain a valid email format,SELECT * FROM users WHERE email NOT LIKE '%_@__%.__%';,SQL,intermediate,"Data Engineer, Data Analyst",SELECT * FROM users WHERE email NOT LIKE '%_@__%.__%';,This checks for valid email patterns and filters out invalid ones,Overlooking edge cases in email formats,What are string functions?; How to validate data integrity?
561,"You have a table 'orders' with 'customer_id', 'order_id', and 'order_amount'. Write a query to find the customer with the highest total order amount","SELECT customer_id, SUM(order_amount) AS total_amount FROM orders GROUP BY customer_id ORDER BY total_amount DESC LIMIT 1;",SQL,intermediate,"Data Analyst, Business Analyst","SELECT customer_id, SUM(order_amount) AS total_amount FROM orders GROUP BY customer_id ORDER BY total_amount DESC LIMIT 1;",This identifies the customer with the most significant financial contribution,Failing to account for ties in the output,What is ranking in SQL?; How to find top customers?
562,Write a SQL query to list all products that have not been sold,"SELECT p.product_id, p.product_name FROM products p LEFT JOIN sales s ON p.product_id = s.product_id WHERE s.product_id IS NULL;",SQL,advanced,"Data Analyst, Inventory Manager","SELECT p.product_id, p.product_name FROM products p LEFT JOIN sales s ON p.product_id = s.product_id WHERE s.product_id IS NULL;",This identifies products with no entries in the sales table,Not understanding LEFT JOIN behavior,What is data reconciliation?; How to manage inventory?
563,"Given a 'logs' table with 'log_id', 'user_id', and 'timestamp', how would you find the number of distinct users active in the last 7 days?",SELECT COUNT(DISTINCT user_id) FROM logs WHERE timestamp >= NOW() - INTERVAL '7 days';,SQL,intermediate,"Data Analyst, Business Analyst",SELECT COUNT(DISTINCT user_id) FROM logs WHERE timestamp >= NOW() - INTERVAL '7 days';,This counts active unique users based on log entries,Incorrect date range handling,What are time-based analyses?; How to analyze user engagement?
564,Write a SQL query to determine the average amount spent per transaction by each customer,"SELECT customer_id, AVG(amount) AS average_spent FROM transactions GROUP BY customer_id;",SQL,intermediate,"Data Analyst, Business Analyst","SELECT customer_id, AVG(amount) AS average_spent FROM transactions GROUP BY customer_id;",This calculates average transaction amounts per customer,Not grouping correctly,What are aggregate functions?; How to analyze spending patterns?
565,"In an 'emails' table, write a query to find users who have not verified their email addresses",SELECT * FROM users WHERE email_verified = FALSE;,SQL,easy,"Data Analyst, Marketing Analyst",SELECT * FROM users WHERE email_verified = FALSE;,This filters for users with unverified email addresses,Assuming the verification field is not properly defined,How to clean email lists?; What are user engagement techniques?
566,Write a SQL statement to find duplicate entries in a customer database based on email,"SELECT email, COUNT(*) AS count FROM customers GROUP BY email HAVING COUNT(*) > 1;",SQL,intermediate,"Data Analyst, Data Engineer","SELECT email, COUNT(*) AS count FROM customers GROUP BY email HAVING COUNT(*) > 1;",This identifies duplicate customer records based on email,Failing to account for case sensitivity,What are data cleansing techniques?; How to handle duplicates?
567,"Assuming a 'performance' table with 'employee_id', 'score', and 'date', write a query to find the average score per employee for the last month","SELECT employee_id, AVG(score) AS average_score FROM performance WHERE date >= DATEADD(month, -1, GETDATE()) GROUP BY employee_id;",SQL,intermediate,"HR Analyst, Data Analyst","SELECT employee_id, AVG(score) AS average_score FROM performance WHERE date >= DATEADD(month, -1, GETDATE()) GROUP BY employee_id;",This calculates the average score of employees for the previous month,Misunderstanding date handling,What are time series analyses?; How to use aggregate functions?
568,Write a query to list all countries with more than 10 cities in a 'cities' table,"SELECT country, COUNT(city_id) AS city_count FROM cities GROUP BY country HAVING city_count > 10;",SQL,intermediate,"Data Analyst, Urban Planner","SELECT country, COUNT(city_id) AS city_count FROM cities GROUP BY country HAVING city_count > 10;",This identifies countries based on the number of cities,Not counting correctly or using the HAVING clause wrongly,What are aggregation functions?; How to analyze geographic data?
569,"Given a 'users' table, write a query to find all users registered in the last 30 days",SELECT * FROM users WHERE registration_date >= NOW() - INTERVAL '30 days';,SQL,easy,"Data Analyst, Business Analyst",SELECT * FROM users WHERE registration_date >= NOW() - INTERVAL '30 days';,This filters users based on their registration date,Incorrectly accounting for the date range,What are user retention metrics?; How to perform cohort analysis?
570,"You have a 'subscriptions' table with 'user_id', 'plan', and 'start_date'. Write a query to find users who have not renewed their subscriptions","SELECT user_id, plan FROM subscriptions WHERE start_date < DATEADD(month, -1, GETDATE());",SQL,intermediate,"Data Analyst, Subscription Manager","SELECT user_id, plan FROM subscriptions WHERE start_date < DATEADD(month, -1, GETDATE());",This identifies users whose subscriptions have not been renewed,Not considering multiple plans for the same user,What are customer lifecycle metrics?; How to analyze subscription data?
571,Write a query to find how many products are out of stock from the 'inventory' table,SELECT COUNT(*) AS out_of_stock FROM inventory WHERE quantity = 0;,SQL,easy,"Inventory Manager, Data Analyst",SELECT COUNT(*) AS out_of_stock FROM inventory WHERE quantity = 0;,This counts products that are out of stock,Failing to distinguish between various stock statuses,What is inventory management?; How to forecast inventory needs?
572,"In a table 'sales_data', how would you write a query to find the total sales for each month of the current year?","SELECT MONTH(sale_date) AS sale_month, SUM(amount) AS total_sales FROM sales_data WHERE YEAR(sale_date) = YEAR(CURRENT_DATE) GROUP BY MONTH(sale_date);",SQL,intermediate,"Data Analyst, Financial Analyst","SELECT MONTH(sale_date) AS sale_month, SUM(amount) AS total_sales FROM sales_data WHERE YEAR(sale_date) = YEAR(CURRENT_DATE) GROUP BY MONTH(sale_date);",This sums sales amounts by month,Not grouping by YEAR if the dataset spans multiple years,How to visualize sales trends?; What are time series analyses?
573,You have a 'visits' table with 'user_id' and 'visit_date'. How would you query the unique users who visited in the last week?,SELECT COUNT(DISTINCT user_id) AS unique_visitors FROM visits WHERE visit_date >= NOW() - INTERVAL '1 week';,SQL,intermediate,"Data Analyst, Marketing Analyst",SELECT COUNT(DISTINCT user_id) AS unique_visitors FROM visits WHERE visit_date >= NOW() - INTERVAL '1 week';,This counts distinct users for the last week,Misunderstanding DISTINCT functionality,What are user engagement metrics?; How to measure website traffic?
574,Write a query to find the total number of orders from each customer along with their IDs,"SELECT customer_id, COUNT(order_id) AS total_orders FROM orders GROUP BY customer_id;",SQL,easy,"Data Analyst, Business Analyst","SELECT customer_id, COUNT(order_id) AS total_orders FROM orders GROUP BY customer_id;",This aggregates orders per customer,Forgetting to include all columns if needed,What are order fulfillment metrics?; How to calculate customer lifetime value?
575,You have a 'logs' table with 'user_id' and 'action_date'. Write a query to identify users who performed actions on two different days,SELECT user_id FROM logs GROUP BY user_id HAVING COUNT(DISTINCT DATE(action_date)) > 1;,SQL,intermediate,"Data Analyst, User Researcher",SELECT user_id FROM logs GROUP BY user_id HAVING COUNT(DISTINCT DATE(action_date)) > 1;,This finds users who were active on more than one day,Forgetting to handle date functions correctly,What are event tracking metrics?; How to analyze user behavior?
576,"Assuming an 'online_courses' table with 'course_id', 'subject', and 'registration_date', write a query to find the total number of registrations per subject for last year","SELECT subject, COUNT(*) AS total_registrations FROM online_courses WHERE YEAR(registration_date) = YEAR(CURRENT_DATE) - 1 GROUP BY subject;",SQL,intermediate,"Education Analyst, Data Analyst","SELECT subject, COUNT(*) AS total_registrations FROM online_courses WHERE YEAR(registration_date) = YEAR(CURRENT_DATE) - 1 GROUP BY subject;",This aggregates registrations by course subject,Not efficiently using COUNT with GROUP BY,What are enrollment metrics?; How to analyze course effectiveness?
577,Write a SQL query to calculate the customer retention rate from the 'purchases' table,"SELECT (COUNT(DISTINCT user_id) / (SELECT COUNT(DISTINCT user_id) FROM purchases WHERE purchase_date < DATEADD(year, -1, GETDATE()))) * 100 AS retention_rate FROM purchases WHERE purchase_date >= DATEADD(year, -1, GETDATE());",SQL,advanced,"Data Analyst, Marketing Analyst","SELECT (COUNT(DISTINCT user_id) / (SELECT COUNT(DISTINCT user_id) FROM purchases WHERE purchase_date < DATEADD(year, -1, GETDATE()))) * 100 AS retention_rate FROM purchases WHERE purchase_date >= DATEADD(year, -1, GETDATE());",This calculates the retention rate for customers based on prior year purchases,Misunderstanding what constitutes a returning customer,What is cohort analysis?; How to measure engagement?
578,Write a SQL query to find the most frequently purchased product from 'sales' table,"SELECT product_id, COUNT(*) AS purchase_count FROM sales GROUP BY product_id ORDER BY purchase_count DESC LIMIT 1;",SQL,intermediate,"Data Analyst, Business Analyst","SELECT product_id, COUNT(*) AS purchase_count FROM sales GROUP BY product_id ORDER BY purchase_count DESC LIMIT 1;",This finds the product with the highest sales volume,Failing to correctly aggregate purchase counts,What are sales performance metrics?; How to analyze product popularity?
579,"In a 'sessions' table, how would you write a query to find the average session duration per user?","SELECT user_id, AVG(TIMESTAMPDIFF(SECOND, start_time, end_time)) AS average_duration FROM sessions WHERE end_time IS NOT NULL GROUP BY user_id;",SQL,intermediate,"Data Analyst, User Researcher","SELECT user_id, AVG(TIMESTAMPDIFF(SECOND, start_time, end_time)) AS average_duration FROM sessions WHERE end_time IS NOT NULL GROUP BY user_id;",This calculates the average duration of sessions for each user,Confusing start and end times,What are session metrics?; How to optimize user experience?
580,Write a SQL query to count how many products are there in stock by category,"SELECT category, COUNT(*) AS total_products FROM products WHERE stock > 0 GROUP BY category;",SQL,easy,"Inventory Manager, Data Analyst","SELECT category, COUNT(*) AS total_products FROM products WHERE stock > 0 GROUP BY category;","This counts products that are in stock, categorized",Failing to filter correctly,What is stock management?; How to analyze product availability?
581,"Assume a 'user_activity' table with 'user_id', 'activity_type', and 'timestamp'. Write a query to find the most common activity type","SELECT activity_type, COUNT(*) AS count FROM user_activity GROUP BY activity_type ORDER BY count DESC LIMIT 1;",SQL,intermediate,"Data Analyst, UX Researcher","SELECT activity_type, COUNT(*) AS count FROM user_activity GROUP BY activity_type ORDER BY count DESC LIMIT 1;",This finds the activity type with the highest count,Not using GROUP BY effectively,What are user behavior metrics?; How to analyze trends?
582,Write a SQL query to determine the number of new users registered each month,"SELECT MONTH(registration_date) AS reg_month, COUNT(*) AS new_users FROM users GROUP BY MONTH(registration_date);",SQL,intermediate,"Data Analyst, Business Analyst","SELECT MONTH(registration_date) AS reg_month, COUNT(*) AS new_users FROM users GROUP BY MONTH(registration_date);",This totals new user registrations by month,Conflicting date formats,What are user growth metrics?; How to analyze registration trends?
583,"You have a 'feedback' table with 'user_id', 'rating', and 'comments'. Write a query to find the average rating given by each user","SELECT user_id, AVG(rating) AS average_rating FROM feedback GROUP BY user_id;",SQL,intermediate,"Data Analyst, Product Manager","SELECT user_id, AVG(rating) AS average_rating FROM feedback GROUP BY user_id;",This determines average feedback ratings per user,Not properly handling NULL ratings,What are feedback metrics?; How to analyze customer satisfaction?
584,"Given a 'subscriptions' table, write a SQL query to calculate the churn rate",SELECT (SUM(CASE WHEN status = 'canceled' THEN 1 ELSE 0 END) / COUNT(*)) * 100 AS churn_rate FROM subscriptions;,SQL,advanced,"Data Analyst, Business Analyst",SELECT (SUM(CASE WHEN status = 'canceled' THEN 1 ELSE 0 END) / COUNT(*)) * 100 AS churn_rate FROM subscriptions;,This calculates the percentage of canceled subscriptions,Ignoring active subscription counts,What is customer retention?; How to measure subscription performance?
585,"In an 'analytics' table with 'session_id', 'start_time', and 'end_time', write a query to find the average session length","SELECT AVG(TIMESTAMPDIFF(SECOND, start_time, end_time)) AS average_session_length FROM analytics;",SQL,intermediate,"Data Analyst, User Researcher","SELECT AVG(TIMESTAMPDIFF(SECOND, start_time, end_time)) AS average_session_length FROM analytics;",This gives the average time users spend in sessions,Failing to handle session end correctly,What are engagement metrics?; How to improve user experience?
586,Write a query to find all employees who have the same manager,"SELECT e1.id, e1.name, e2.name AS manager_name FROM employees e1 JOIN employees e2 ON e1.manager_id = e2.id;",SQL,intermediate,"HR Analyst, Data Analyst","SELECT e1.id, e1.name, e2.name AS manager_name FROM employees e1 JOIN employees e2 ON e1.manager_id = e2.id;",This retrieves employees along with their respective managers,Not distinguishing different manager relationships,What are organizational structures?; How to analyze team dynamics?
587,Write a SQL query to list products with a quantity less than the average quantity of all products,SELECT * FROM products WHERE quantity < (SELECT AVG(quantity) FROM products);,SQL,intermediate,"Inventory Manager, Data Analyst",SELECT * FROM products WHERE quantity < (SELECT AVG(quantity) FROM products);,This identifies products that are below average stock level,Misunderstanding the scope of aggregate functions,What are stock metrics?; How to manage inventory levels?
588,Write a query that retrieves the total revenue generated from each product category,"SELECT category, SUM(price * quantity_sold) AS total_revenue FROM sales GROUP BY category;",SQL,intermediate,"Data Analyst, Business Analyst","SELECT category, SUM(price * quantity_sold) AS total_revenue FROM sales GROUP BY category;",This calculates total revenue by category,Failing to multiply price and quantity correctly,What are sales analysis techniques?; How to structure financial reports?
589,"In a 'messages' table, write a query to count unread messages by user","SELECT user_id, COUNT(*) AS unread_count FROM messages WHERE is_read = FALSE GROUP BY user_id;",SQL,easy,"Data Analyst, Communications Manager","SELECT user_id, COUNT(*) AS unread_count FROM messages WHERE is_read = FALSE GROUP BY user_id;",This counts unread messages for each user,Not handling message status correctly,What are communication metrics?; How to improve inbox management?
590,Write a query to find users who signed up in the last 30 days and are in the premium plan,"SELECT * FROM users WHERE registration_date >= DATEADD(day, -30, GETDATE()) AND plan_type = 'premium';",SQL,easy,"Data Analyst, Marketing Manager","SELECT * FROM users WHERE registration_date >= DATEADD(day, -30, GETDATE()) AND plan_type = 'premium';",This filters for recent premium sign-ups,Failing to check plan type properly,What are user acquisition metrics?; How to optimize planning strategies?
591,"You have a 'clicks' table containing 'user_id', 'product_id', and 'timestamp'. Write a query to find users who clicked on more than 5 products in a day","SELECT user_id, COUNT(DISTINCT product_id) AS clicks FROM clicks WHERE DATE(timestamp) = CURDATE() GROUP BY user_id HAVING clicks > 5;",SQL,intermediate,"Data Analyst, Marketing Analyst","SELECT user_id, COUNT(DISTINCT product_id) AS clicks FROM clicks WHERE DATE(timestamp) = CURDATE() GROUP BY user_id HAVING clicks > 5;",This identifies users who engaged significantly in a day,Misunderstanding click counts per user,What are engagement metrics?; How to analyze user interactions?
592,Write a SQL query to find all orders that were shipped late,SELECT * FROM orders WHERE shipped_date > delivery_date;,SQL,intermediate,"Logistics Manager, Data Analyst",SELECT * FROM orders WHERE shipped_date > delivery_date;,This finds orders with delivery issues,Not clearly defining late shipments,What are logistics metrics?; How to manage delivery times?
593,"Given a 'spending' table containing 'user_id', 'amount' and 'date', write a query to find the highest spending day for each user","SELECT user_id, date, MAX(amount) AS highest_spending FROM spending GROUP BY user_id, date;",SQL,advanced,"Data Analyst, Financial Analyst","SELECT user_id, date, MAX(amount) AS highest_spending FROM spending GROUP BY user_id, date;",This identifies the peak spending day for each user,Misunderstanding the grouping-level within the query,What are spending habits?; How to analyze financial performance?
594,Write a query to find the average number of clicks per user over the last month,"SELECT user_id, AVG(click_count) AS average_clicks FROM (SELECT user_id, COUNT(*) AS click_count FROM clicks WHERE timestamp >= DATEADD(month, -1, GETDATE()) GROUP BY user_id);",SQL,intermediate,"Data Analyst, User Researcher","SELECT user_id, AVG(click_count) AS average_clicks FROM (SELECT user_id, COUNT(*) AS click_count FROM clicks WHERE timestamp >= DATEADD(month, -1, GETDATE()) GROUP BY user_id);",This summarizes user engagement by click counts,Neglecting to wrap the inner query correctly,What are engagement metrics?; How to analyze user interaction?
595,"Looking at a 'products' table, write a query to find all suppliers with more than 5 products",SELECT supplier_id FROM products GROUP BY supplier_id HAVING COUNT(product_id) > 5;,SQL,intermediate,"Data Analyst, Supplier Manager",SELECT supplier_id FROM products GROUP BY supplier_id HAVING COUNT(product_id) > 5;,This identifies suppliers with a larger product catalog,Not correctly applying the HAVING clause,What are product management techniques?; How to evaluate supplier performance?
596,"In a 'subscriptions' table with 'user_id', 'start_date', and 'end_date', write a query to retrieve active subscriptions",SELECT * FROM subscriptions WHERE end_date IS NULL OR end_date > NOW();,SQL,easy,"Data Analyst, Subscription Manager",SELECT * FROM subscriptions WHERE end_date IS NULL OR end_date > NOW();,This retrieves current subscriptions for users,Confusing active with expired subscriptions,What are retention metrics?; How to evaluate customer engagement?
597,Write a SQL query to find all customers who purchased the same product more than once,"SELECT customer_id, product_id, COUNT(*) AS purchase_count FROM purchases GROUP BY customer_id, product_id HAVING purchase_count > 1;",SQL,intermediate,"Data Analyst, Marketing Analyst","SELECT customer_id, product_id, COUNT(*) AS purchase_count FROM purchases GROUP BY customer_id, product_id HAVING purchase_count > 1;",This highlights repeat customers for specific products,Not accounting for the grouping correctly,What are customer loyalty metrics?; How to evaluate product performance?
598,"Assuming you have a 'visits' table with 'user_id', 'visit_date', and 'duration', write a query to calculate the total time spent by all users this month",SELECT SUM(duration) AS total_time FROM visits WHERE MONTH(visit_date) = MONTH(CURRENT_DATE);,SQL,intermediate,"Data Analyst, Marketing Analyst",SELECT SUM(duration) AS total_time FROM visits WHERE MONTH(visit_date) = MONTH(CURRENT_DATE);,This sums total visit time for the current month,Neglecting to group or filter for the right date,What are engagement metrics?; How to analyze user activity?
599,Write a query to find product categories with no products in stock,SELECT DISTINCT category FROM products WHERE quantity = 0;,SQL,intermediate,"Inventory Manager, Data Analyst",SELECT DISTINCT category FROM products WHERE quantity = 0;,This identifies categories lacking stock,Misunderstanding groupings for empty categories,What are stock management strategies?; How to evaluate product performance?
600,"Given an 'appointments' table containing 'customer_id', 'appointment_date', and 'canceled' flag, write a query to calculate the cancellation rate",SELECT (SUM(CASE WHEN canceled = 1 THEN 1 ELSE 0 END) / COUNT(*)) * 100 AS cancellation_rate FROM appointments;,SQL,advanced,"Data Analyst, Business Analyst",SELECT (SUM(CASE WHEN canceled = 1 THEN 1 ELSE 0 END) / COUNT(*)) * 100 AS cancellation_rate FROM appointments;,This calculates the percentage of canceled appointments,Not accounting for cases with no appointments,What are retention metrics?; How to manage appointment scheduling?
